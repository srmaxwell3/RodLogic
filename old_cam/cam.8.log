(LockRod *)(0x1110240) rBlked by DKER(1,9,6)
(LockRod *)(0x1110240) rBlked by DKER(1,12,6)
(LockRod *)(0x1110240) rBlked by DKER(1,15,6)
(LockRod *)(0x1110240)->{  lockState=lsLckd, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LTSL(0,0,6), LBSL(0,1,6), LBSL(0,2,6), LBSL(0,3,6), LBSL(0,4,6), LBSL(0,5,6), LBSL(0,6,6), LBSL(0,7,6), LBSL(0,8,6), LPSL(0,9,6), LBSL(0,10,6), LBSL(0,11,6), LPSL(0,12,6), LBSL(0,13,6), LBSL(0,14,6), LPSL(0,15,6), LBSL(0,16,6), LBSL(0,17,6), LBSL(0,18,6), LBSL(0,19,6), LBSL(0,20,6), LBSL(0,21,6), LBSL(0,22,6), LBSL(0,23,6), LBSL(0,24,6), LBSL(0,25,6), LHSL(0,26,6), Slot(0,27,6), DKER(1,9,6), Slot(1,10,6), DKER(1,12,6), Slot(1,13,6), DKER(1,15,6), Slot(1,16,6) } } }
(LockRod *)(0x11113d0) rBlked by DKWR(1,18,18)
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(0,0,18), LHNL(0,1,18), LBNL(0,2,18), LBNL(0,3,18), LBNL(0,4,18), LBNL(0,5,18), LBNL(0,6,18), LBNL(0,7,18), LBNL(0,8,18), LBNL(0,9,18), LBNL(0,10,18), LBNL(0,11,18), LBNL(0,12,18), LBNL(0,13,18), LBNL(0,14,18), LBNL(0,15,18), LBNL(0,16,18), LBNL(0,17,18), LPNL(0,18,18), LBNL(0,19,18), LBNL(0,20,18), LBNL(0,21,18), LBNL(0,22,18), LBNL(0,23,18), LBNL(0,24,18), LBNL(0,25,18), LBNL(0,26,18), LTNL(0,27,18), Slot(1,17,18), DKWR(1,18,18) } } }
(DataRod *)(0x1112360) rBlked at DSER(1,9,4) by Wall(1,9,3)
(DataRod *)(0x1112360) locked at DKER(1,9,6)
(DataRod *)(0x1112360) rBlked at DGER(3,9,10) by Wall(3,9,9)
(DataRod *)(0x1112360) rBlked at DGER(3,9,14) by Wall(3,9,13)
(DataRod *)(0x1112360)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,9,4), DSER(1,9,5), DKER(1,9,6), Slot(1,9,7), Slot(1,9,8), DIER(2,9,0), DBER(2,9,1), DBER(2,9,2), DBER(2,9,3), DPER(2,9,4), DPER(2,9,5), DPER(2,9,6), DBER(2,9,7), DBER(2,9,8), DBER(2,9,9), DPER(2,9,10), DBER(2,9,11), DBER(2,9,12), DBER(2,9,13), DPER(2,9,14), DBER(2,9,15), DHER(2,9,16), Slot(2,9,17), Slot(2,9,18), DGER(3,9,10), Slot(3,9,11), Slot(3,9,12), DGER(3,9,14), Slot(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1113560) rBlked at DSER(1,12,4) by Wall(1,12,3)
(DataRod *)(0x1113560) locked at DKER(1,12,6)
(DataRod *)(0x1113560) rBlked at DGER(3,12,14) by Wall(3,12,13)
(DataRod *)(0x1113560)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,12,4), DSER(1,12,5), DKER(1,12,6), Slot(1,12,7), Slot(1,12,8), DIER(2,12,0), DBER(2,12,1), DBER(2,12,2), DBER(2,12,3), DPER(2,12,4), DPER(2,12,5), DPER(2,12,6), DBER(2,12,7), DBER(2,12,8), DBER(2,12,9), DBER(2,12,10), DBER(2,12,11), DBER(2,12,12), DBER(2,12,13), DPER(2,12,14), DBER(2,12,15), DHER(2,12,16), Slot(2,12,17), Slot(2,12,18), DGER(3,12,14), Slot(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1114620) rBlked at DSER(1,15,4) by Wall(1,15,3)
(DataRod *)(0x1114620) locked at DKER(1,15,6)
(DataRod *)(0x1114620) rBlked at DPER(2,15,4) by Wall(2,15,3)
(DataRod *)(0x1114620) rBlked at DQER(3,15,8) by Wall(3,15,7)
(DataRod *)(0x1114620)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,15,4), DSER(1,15,5), DKER(1,15,6), Slot(1,15,7), Slot(1,15,8), DPER(2,15,4), DPER(2,15,5), DPER(2,15,6), DBER(2,15,7), DPER(2,15,8), DBER(2,15,9), DBER(2,15,10), DPER(2,15,11), DBER(2,15,12), DBER(2,15,13), DBER(2,15,14), DBER(2,15,15), DBER(2,15,16), DBER(2,15,17), DBER(2,15,18), DBER(2,15,19), DBER(2,15,20), DBER(2,15,21), DBER(2,15,22), DBER(2,15,23), DOER(2,15,24), DQER(3,15,8), Slot(3,15,9), Slot(3,15,10), DGER(3,15,11), Slot(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1115750) locked at DKWR(1,18,18)
(DataRod *)(0x1115750) rBlked at DSWR(1,18,20) by Wall(1,18,21)
(DataRod *)(0x1115750) rBlked at DPWR(2,18,20) by Wall(2,18,21)
(DataRod *)(0x1115750) rBlked at DQWR(3,18,16) by Wall(3,18,17)
(DataRod *)(0x1115750)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), Slot(1,18,17), DKWR(1,18,18), DSWR(1,18,19), DSWR(1,18,20), Slot(2,18,6), Slot(2,18,7), DHWR(2,18,8), DBWR(2,18,9), DBWR(2,18,10), DPWR(2,18,11), DBWR(2,18,12), DPWR(2,18,13), DBWR(2,18,14), DBWR(2,18,15), DPWR(2,18,16), DBWR(2,18,17), DPWR(2,18,18), DPWR(2,18,19), DPWR(2,18,20), Slot(3,18,8), Slot(3,18,9), Slot(3,18,10), DGWR(3,18,11), Slot(3,18,12), DQWR(3,18,13), Slot(3,18,14), Slot(3,18,15), DQWR(3,18,16) } } }
(DataRod *)(0x1116620) rBlked at DQSR(3,8,12) by Wall(3,7,12)
(DataRod *)(0x1116620) rBlked at DQSR(3,14,12) by Wall(3,13,12)
(DataRod *)(0x1116620) rBlked at DPSR(4,4,12) by Wall(4,3,12)
(DataRod *)(0x1116620) rBlked at DSSR(5,4,12) by Wall(5,3,12)
(DataRod *)(0x1116620) locked at DKSR(5,6,12)
(DataRod *)(0x1116620)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,12), Slot(3,9,12), Slot(3,10,12), DQSR(3,14,12), Slot(3,15,12), DGSR(3,16,12), Slot(3,17,12), Slot(3,18,12), Slot(3,19,12), DPSR(4,4,12), DPSR(4,5,12), DPSR(4,6,12), DBSR(4,7,12), DPSR(4,8,12), DBSR(4,9,12), DBSR(4,10,12), DBSR(4,11,12), DBSR(4,12,12), DBSR(4,13,12), DPSR(4,14,12), DBSR(4,15,12), DPSR(4,16,12), DBSR(4,17,12), DBSR(4,18,12), DHSR(4,19,12), Slot(4,20,12), Slot(4,21,12), DSSR(5,4,12), DSSR(5,5,12), DKSR(5,6,12), Slot(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x11175f0) rBlked at DQSR(3,8,15) by Wall(3,7,15)
(DataRod *)(0x11175f0) rBlked at DGSR(3,16,15) by Wall(3,15,15)
(DataRod *)(0x11175f0) rBlked at DPSR(4,4,15) by Wall(4,3,15)
(DataRod *)(0x11175f0) rBlked at DSSR(5,4,15) by Wall(5,3,15)
(DataRod *)(0x11175f0) locked at DKSR(5,6,15)
(DataRod *)(0x11175f0)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,15), Slot(3,9,15), Slot(3,10,15), DQSR(3,11,15), Slot(3,12,15), Slot(3,13,15), DGSR(3,16,15), Slot(3,17,15), Slot(3,18,15), Slot(3,19,15), DPSR(4,4,15), DPSR(4,5,15), DPSR(4,6,15), DBSR(4,7,15), DPSR(4,8,15), DBSR(4,9,15), DBSR(4,10,15), DPSR(4,11,15), DBSR(4,12,15), DBSR(4,13,15), DBSR(4,14,15), DBSR(4,15,15), DPSR(4,16,15), DBSR(4,17,15), DBSR(4,18,15), DHSR(4,19,15), Slot(4,20,15), Slot(4,21,15), DSSR(5,4,15), DSSR(5,5,15), DKSR(5,6,15), Slot(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x1118640) rBlked at DQNR(3,19,9) by Wall(3,20,9)
(DataRod *)(0x1118640) rBlked at DPNR(4,23,9) by Wall(4,24,9)
(DataRod *)(0x1118640) locked at DKNR(5,21,9)
(DataRod *)(0x1118640) rBlked at DSNR(5,23,9) by Wall(5,24,9)
(DataRod *)(0x1118640)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,14,9), Slot(3,15,9), DGNR(3,16,9), Slot(3,17,9), Slot(3,18,9), DQNR(3,19,9), Slot(4,12,9), Slot(4,13,9), DHNR(4,14,9), DBNR(4,15,9), DPNR(4,16,9), DBNR(4,17,9), DBNR(4,18,9), DPNR(4,19,9), DBNR(4,20,9), DPNR(4,21,9), DPNR(4,22,9), DPNR(4,23,9), Slot(5,19,9), Slot(5,20,9), DKNR(5,21,9), DSNR(5,22,9), DSNR(5,23,9) } } }
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,12)
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,15)
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(5,6,11), DKSR(5,6,12), Slot(5,6,14), DKSR(5,6,15), Slot(6,6,0), LHWL(6,6,1), LBWL(6,6,2), LBWL(6,6,3), LBWL(6,6,4), LBWL(6,6,5), LBWL(6,6,6), LBWL(6,6,7), LBWL(6,6,8), LBWL(6,6,9), LBWL(6,6,10), LBWL(6,6,11), LPWL(6,6,12), LBWL(6,6,13), LBWL(6,6,14), LPWL(6,6,15), LBWL(6,6,16), LBWL(6,6,17), LBWL(6,6,18), LBWL(6,6,19), LBWL(6,6,20), LBWL(6,6,21), LBWL(6,6,22), LBWL(6,6,23), LTWL(6,6,24) } } }
(LockRod *)(0x111a060) rBlked by DKNR(5,21,9)
(LockRod *)(0x111a060)->{  lockState=lsLckd, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DKNR(5,21,9), Slot(5,21,10), LTEL(6,21,0), LBEL(6,21,1), LBEL(6,21,2), LBEL(6,21,3), LBEL(6,21,4), LBEL(6,21,5), LBEL(6,21,6), LBEL(6,21,7), LBEL(6,21,8), LPEL(6,21,9), LBEL(6,21,10), LBEL(6,21,11), LBEL(6,21,12), LBEL(6,21,13), LBEL(6,21,14), LBEL(6,21,15), LBEL(6,21,16), LBEL(6,21,17), LBEL(6,21,18), LBEL(6,21,19), LBEL(6,21,20), LBEL(6,21,21), LBEL(6,21,22), LHEL(6,21,23), Slot(6,21,24) } } }
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall, LHWU): rules[{ tcEUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }] = LHWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall, LKWU): rules[{ tcEUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }] = LKWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall, LTWU): rules[{ tcEUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }] = LTWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall, LPWU): rules[{ tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }] = LPWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall, Slot): rules[{ tcEUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot, DSSR): rules[{ tcEUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }] = DSSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall, LTWL): rules[{ tcELSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }] = LTWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall, LBWL): rules[{ tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall, LHWL): rules[{ tcELSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }] = LHWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall, LPWL): rules[{ tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall }] = LPWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall, LBWL): rules[{ tcELSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall, LBWL): rules[{ tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall, Slot): rules[{ tcELSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall, LBWL): rules[{ tcELSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall, LBWL): rules[{ tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall, Slot): rules[{ tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot, DKSR): rules[{ tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }] = DKSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall, LHSU): rules[{ tcEUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }] = LHSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall, LKSU): rules[{ tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }] = LKSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL, LBSU): rules[{ tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL, LTSU): rules[{ tcEUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }] = LTSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL, LPSU): rules[{ tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }] = LPSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL, LBSU): rules[{ tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL, LBSU): rules[{ tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot, LBSU): rules[{ tcEUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL, Slot): rules[{ tcEUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL, LBSU): rules[{ tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot, DSER): rules[{ tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall, Slot): rules[{ tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DTER, Slot, Slot, Wall, Wall, Wall, Slot): rules[{ tcESE0, Wall, DTER, Slot, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, Slot, Wall, DBER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, Slot, Wall, DBER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DQSR, DBSR, Slot, Slot, Wall, DBER, Slot, Slot): rules[{ tcESE0, DQSR, DBSR, Slot, Slot, Wall, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall, DHE0): rules[{ tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall }] = DHE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall, DSE0): rules[{ tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DGER, Slot, Slot, DBER, Wall, DGE0): rules[{ tcESE0, Wall, Wall, DGER, Slot, Slot, DBER, Wall }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot, DGE0): rules[{ tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DQSR, DBSR, DQER, Slot, Slot, DBER, DQSR, DQE0): rules[{ tcESE0, DQSR, DBSR, DQER, Slot, Slot, DBER, DQSR }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Slot, DBNR, DQER, Slot, Slot, DBER, DQNR, DQE0): rules[{ tcESE0, Slot, DBNR, DQER, Slot, Slot, DBER, DQNR }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, Slot, DQER, DBER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, Slot, DQER, DBER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DTER, DBER, DBER, Wall, Wall, DTE0): rules[{ tcESE0, Wall, Slot, DTER, DBER, DBER, Wall, Wall }] = DTE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall, DPE0): rules[{ tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall, DPE0): rules[{ tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall, DPE0): rules[{ tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DPER, DBER, DTER, Slot, Wall, DPE0): rules[{ tcESE0, Wall, Wall, DPER, DBER, DTER, Slot, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DBER, DBER, DPER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Slot, DBER, DBER, DPER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DBER, DOER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DBER, DBER, DOER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall, DBE0): rules[{ tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DQER, DBER, DPER, DBER, Slot, Wall, DBE0): rules[{ tcESE0, Wall, DQER, DBER, DPER, DBER, Slot, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DQER, DBER, DPER, DBER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, DQER, DBER, DPER, DBER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall, DBE0): rules[{ tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall, DPE0): rules[{ tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, DPER, DPER, DSER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Wall, DPER, DPER, DSER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall, DBE0): rules[{ tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall, DPE0): rules[{ tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU, DSE0): rules[{ tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall, Slot): rules[{ tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall, DSE0): rules[{ tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, DQER, Slot, DTER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Wall, DQER, Slot, DTER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, DQER, Slot, DPER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, DQER, Slot, DPER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall, DIE0): rules[{ tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall }] = DIE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DBER, DOER, Wall, Wall, Wall, DOE0): rules[{ tcESE0, Wall, Wall, DBER, DOER, Wall, Wall, Wall }] = DOE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, DPER, Slot, Slot, Wall, Wall, Wall, Slot): rules[{ tcESE0, Wall, DPER, Slot, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, DPER, DBER, DPER, Slot, Wall, DPE0): rules[{ tcESE0, Wall, Wall, DPER, DBER, DPER, Slot, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, DQER, Slot, DPER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Wall, DQER, Slot, DPER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall, DSE1): rules[{ tcESE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DQE0, Slot, Wall, DBE0, Wall, DQE1): rules[{ tcESE1, Wall, Wall, DQE0, Slot, Wall, DBE0, Wall }] = DQE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall, DQE1): rules[{ tcESE1, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall }] = DQE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Wall, Slot, DPE0, Slot, Wall, Slot): rules[{ tcESE1, Wall, Wall, Wall, Slot, DPE0, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, Wall, Slot, DSE0, Wall, Wall, Slot): rules[{ tcESE1, Wall, Slot, Wall, Slot, DSE0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Slot, Slot, DQE0, DBE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Slot, Slot, DQE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall, DPE1): rules[{ tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall, DPE1): rules[{ tcESE1, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall, DPE1): rules[{ tcESE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall, DPE1): rules[{ tcESE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall, DSE1): rules[{ tcESE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall, Slot): rules[{ tcESE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU, DSE1): rules[{ tcESE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DQSR, DBSR, Slot, DQE0, Slot, DPE0, DQSR, Slot): rules[{ tcESE1, DQSR, DBSR, Slot, DQE0, Slot, DPE0, DQSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Slot, DBNR, Slot, DQE0, Slot, DPE0, DQNR, Slot): rules[{ tcESE1, Slot, DBNR, Slot, DQE0, Slot, DPE0, DQNR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall, DOE1): rules[{ tcESE1, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall }] = DOE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU, LTSL): rules[{ tcELEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU }] = LTSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcELEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU, LHSL): rules[{ tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU }] = LHSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, DSE0, Wall, LBSU, Wall, Wall, LPSU, LPSL): rules[{ tcELEL, LBSU, DSE0, Wall, LBSU, Wall, Wall, LPSU }] = LPSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU, LPSL): rules[{ tcELEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU }] = LPSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall, Slot): rules[{ tcELEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU, LBSL): rules[{ tcELEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU, LBSL): rules[{ tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, DSE0, Wall, Wall, LKSU, Wall, LPSU, Wall, Slot): rules[{ tcELEL, DSE0, Wall, Wall, LKSU, Wall, LPSU, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall, Slot): rules[{ tcELEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU, DKE0): rules[{ tcELEL, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }] = DKE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU, DKE1): rules[{ tcELEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }] = DKE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL, LHNU): rules[{ tcSUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }] = LHNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR, LKNU): rules[{ tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR }] = LKNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL, LTNU): rules[{ tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }] = LTNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL, LPNU): rules[{ tcSUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }] = LPNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall, Slot): rules[{ tcSUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall, DSWR): rules[{ tcSUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall }] = DSWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall, LTNL): rules[{ tcSLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }] = LTNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU, LBNL): rules[{ tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU, LHNL): rules[{ tcSLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }] = LHNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU, LPNL): rules[{ tcSLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU }] = LPNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU, LBNL): rules[{ tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU, LBNL): rules[{ tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU, Slot): rules[{ tcSLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot, LBNL): rules[{ tcSLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU, LBNL): rules[{ tcSLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR, Slot): rules[{ tcSLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall, DKWR): rules[{ tcSLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }] = DKWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall, LHWU): rules[{ tcSUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }] = LHWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall, LKWU): rules[{ tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }] = LKWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcSUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall, LBWU): rules[{ tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall, LTWU): rules[{ tcSUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }] = LTWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall, LPWU): rules[{ tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }] = LPWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall, LBWU): rules[{ tcSUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall, Slot): rules[{ tcSUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall, LBWU): rules[{ tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot, DSSR): rules[{ tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }] = DSSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall, Slot): rules[{ tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot, DHS0): rules[{ tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot }] = DHS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Wall, Slot, Wall, Wall, Slot, DQS0): rules[{ tcSSS0, DQSR, DBSR, Wall, Slot, Wall, Wall, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot, DQS0): rules[{ tcSSS0, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot, DSS0): rules[{ tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, Slot, DQE1, DBE1, DQSR, DQS0): rules[{ tcSSS0, DQSR, DBSR, Slot, Slot, DQE1, DBE1, DQSR }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DBSR, DGWR, Slot, DQWR, DBWR, Slot, Slot): rules[{ tcSSS0, Slot, DBSR, DGWR, Slot, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR, DPS0): rules[{ tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR, DPS0): rules[{ tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DPSR, DPS0): rules[{ tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DPSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR, DPS0): rules[{ tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR, DBS0): rules[{ tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR, Slot): rules[{ tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR, DPS0): rules[{ tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot, DSS0): rules[{ tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR, Slot): rules[{ tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR, DSS0): rules[{ tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot, Slot): rules[{ tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, Slot, Slot): rules[{ tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, DQSR, Slot): rules[{ tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, DQSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DBSR, Slot, Slot, DQWR, DBWR, Slot, Slot): rules[{ tcSSS0, Slot, DBSR, Slot, Slot, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE0, DBSR, DPS0): rules[{ tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE0, DBSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DPSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DPSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE0, Slot): rules[{ tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, DGE0, Slot): rules[{ tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, DGE0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot, DJE0): rules[{ tcSSS0, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }] = DJE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall, DHS1): rules[{ tcSSS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }] = DHS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall, DQS1): rules[{ tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }] = DQS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall, DSS1): rules[{ tcSSS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }] = DSS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0, Slot): rules[{ tcSSS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0, Slot): rules[{ tcSSS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0, Slot): rules[{ tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DQS0, DQS1): rules[{ tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = DQS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DQS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot, DQS1): rules[{ tcSSS1, DQS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }] = DQS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0, DPS1): rules[{ tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }] = DPS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0, DPS1): rules[{ tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }] = DPS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0, DPS1): rules[{ tcSSS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }] = DPS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0, DPS1): rules[{ tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }] = DPS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0, Slot): rules[{ tcSSS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0, DPS1): rules[{ tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = DPS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot, DSS1): rules[{ tcSSS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }] = DSS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0, Slot): rules[{ tcSSS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0, DSS1): rules[{ tcSSS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }] = DSS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot, Slot): rules[{ tcSSS1, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DPS0, DGE0, DQS0, Wall, DBE0, Slot, Slot): rules[{ tcSSS1, Slot, DPS0, DGE0, DQS0, Wall, DBE0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DPS0, Slot, DQS0, DQE1, DBE1, Slot, Slot): rules[{ tcSSS1, Slot, DPS0, Slot, DQS0, DQE1, DBE1, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall, LHEU): rules[{ tcWUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall }] = LHEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall, LKEU): rules[{ tcWUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall }] = LKEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall, LTEU): rules[{ tcWUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall }] = LTEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall, LPEU): rules[{ tcWUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall }] = LPEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall, Slot): rules[{ tcWUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR, DSNR): rules[{ tcWUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR }] = DSNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall, LTWL): rules[{ tcSLSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }] = LTWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall, LBWL): rules[{ tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall, LHWL): rules[{ tcSLSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }] = LHWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS0, Wall, LPWL): rules[{ tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS0, Wall }] = LPWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS1, Wall, LPWL): rules[{ tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS1, Wall }] = LPWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall, LBWL): rules[{ tcSLSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall, LBWL): rules[{ tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall, Slot): rules[{ tcSLSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall, LBWL): rules[{ tcSLSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall, LBWL): rules[{ tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }] = LBWL
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, LPWU, Wall, LKWU, DSS0, Wall, Wall, Slot): rules[{ tcSLSL, Wall, LPWU, Wall, LKWU, DSS0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Wall, LPWU, Wall, LKWU, DSS1, Wall, Wall, Slot): rules[{ tcSLSL, Wall, LPWU, Wall, LKWU, DSS1, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0, DKS0): rules[{ tcSLSL, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }] = DKS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSLSL, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1, DKS1): rules[{ tcSLSL, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1 }] = DKS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall, LTEL): rules[{ tcWLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall }] = LTEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcWLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcWLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall, LHEL): rules[{ tcWLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall }] = LHEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LBEU, LBEU, LPEU, DSNR, Wall, LPEL): rules[{ tcWLNL, Wall, Wall, LBEU, LBEU, LPEU, DSNR, Wall }] = LPEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall, Slot): rules[{ tcWLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall, LBEL): rules[{ tcWLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall, LBEL): rules[{ tcWLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Wall, LPEU, DSNR, LKEU, Wall, Wall, Wall, Slot): rules[{ tcWLNL, Wall, LPEU, DSNR, LKEU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLNL, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR, DKNR): rules[{ tcWLNL, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR }] = DKNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL, LHNU): rules[{ tcWUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }] = LHNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR, LKNU): rules[{ tcWUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR }] = LKNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcWUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL, LBNU): rules[{ tcWUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL, LTNU): rules[{ tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }] = LTNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL, LPNU): rules[{ tcWUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }] = LPNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL, LBNU): rules[{ tcWUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall, Slot): rules[{ tcWUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL, LBNU): rules[{ tcWUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall, DSWR): rules[{ tcWUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall }] = DSWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall, LTNL): rules[{ tcWLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }] = LTNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU, LBNL): rules[{ tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU, LHNL): rules[{ tcWLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }] = LHNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU, LPNL): rules[{ tcWLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU }] = LPNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU, LBNL): rules[{ tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU, LBNL): rules[{ tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU, Slot): rules[{ tcWLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot, LBNL): rules[{ tcWLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU, LBNL): rules[{ tcWLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }] = LBNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR, Slot): rules[{ tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall, DKWR): rules[{ tcWLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }] = DKWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall, LHSU): rules[{ tcNUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }] = LHSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, DKE0, Wall, Wall, Slot, Wall, LBSL, Wall, LKSU): rules[{ tcNUEL, DKE0, Wall, Wall, Slot, Wall, LBSL, Wall }] = LKSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall, LKSU): rules[{ tcNUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall }] = LKSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL, LBSU): rules[{ tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL, LTSU): rules[{ tcNUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }] = LTSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL, LPSU): rules[{ tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }] = LPSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL, LBSU): rules[{ tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL, LBSU): rules[{ tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot, LBSU): rules[{ tcNUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL, Slot): rules[{ tcNUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, DKE0, Wall, LPSL, Wall, Wall, LBSL, LBSU): rules[{ tcNUEL, LBSL, DKE0, Wall, LPSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL, LBSU): rules[{ tcNUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, Wall, DPE0, DSE0, DKE0, DSE0, LPSL, Slot, DSE0): rules[{ tcNUEL, Wall, DPE0, DSE0, DKE0, DSE0, LPSL, Slot }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot, DSE1): rules[{ tcNUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall, Slot): rules[{ tcNRE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall, Slot): rules[{ tcNRE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall, Slot): rules[{ tcNRE1, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1, Slot): rules[{ tcNRE1, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, Wall, Slot, Slot, Wall, Wall, Slot): rules[{ tcNRE1, Wall, Slot, Wall, Slot, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DQE1, Slot, Slot, DBE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, DQE1, Slot, Slot, DBE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, Slot, Slot, DPE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Wall, Slot, Slot, DPE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, Slot, DPE1, Slot, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Slot, Slot, DPE1, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall, Slot): rules[{ tcNRE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, Slot, Slot, DSE1, Wall, Wall, DSE0): rules[{ tcNRE1, Wall, Slot, Slot, Slot, DSE1, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DBS1, Slot, Slot, DQE1, DBE1, DQS1, DQE0): rules[{ tcNRE1, Slot, DBS1, Slot, Slot, DQE1, DBE1, DQS1 }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DBNR, Slot, Slot, DQE1, DBE1, DQNR, DQE0): rules[{ tcNRE1, Slot, DBNR, Slot, Slot, DQE1, DBE1, DQNR }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE1, DBE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DPE1, DBE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DPE1, DBE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DPE1, DBE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DBE1, DBE1, DPE1, Wall, Wall, DPE0): rules[{ tcNRE1, Wall, Slot, DBE1, DBE1, DPE1, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DPE1, DBE1, DPE1, Wall, Wall, DPE0): rules[{ tcNRE1, Wall, Slot, DPE1, DBE1, DPE1, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DBE1, DOE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DBE1, DBE1, DOE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall, DHE0): rules[{ tcNRE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }] = DHE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall, DPE0): rules[{ tcNRE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall, DPE0): rules[{ tcNRE1, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DQE1, DBE1, DPE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, DQE1, DBE1, DPE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DPE1, DPE1, DBE1, DSE1, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DPE1, DPE1, DBE1, DSE1, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, DPE1, DPE1, DSE1, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, Slot, DPE1, DPE1, DSE1, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE1, DPE1, DPE1, DSE1, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DPE1, DPE1, DPE1, DSE1, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall, DSE0): rules[{ tcNRE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall, DSE0): rules[{ tcNRE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU, DSE0): rules[{ tcNRE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE1, DSE1, DSE1, Wall, Wall, Wall, Slot): rules[{ tcNRE1, Wall, DPE1, DSE1, DSE1, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE1, DSE1, DSE1, DSE1, Wall, Wall, DSE0): rules[{ tcNRE1, Wall, DPE1, DSE1, DSE1, DSE1, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU, DSE0): rules[{ tcNRE1, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, DQE1, Wall, DPE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Slot, DQE1, Wall, DPE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, DQE1, Slot, DPE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Slot, DQE1, Slot, DPE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall, DGE0): rules[{ tcNRE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot, DJE0): rules[{ tcNRE1, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }] = DJE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall, DIE0): rules[{ tcNRE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }] = DIE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DOE1, Wall, Wall, Wall, DOE0): rules[{ tcNRE1, Wall, Wall, DBE1, DOE1, Wall, Wall, Wall }] = DOE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DHE0, Slot, Wall, Wall, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall, Slot): rules[{ tcNRE0, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DQE0, Slot, Wall, DBE0, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DQE0, Slot, Wall, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1, Slot): rules[{ tcNRE0, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Wall, Slot, Slot, Slot, Wall, Slot): rules[{ tcNRE0, Wall, Wall, Wall, Slot, Slot, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall, DPER): rules[{ tcNRE0, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, Wall, Slot, DSE0, Wall, Wall, DSER): rules[{ tcNRE0, Wall, Slot, Wall, Slot, DSE0, Wall, Wall }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall, DSER): rules[{ tcNRE0, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall, DQER): rules[{ tcNRE0, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall }] = DQER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Slot, Slot, DQE0, DBE0, Wall, DQER): rules[{ tcNRE0, Wall, Wall, Slot, Slot, DQE0, DBE0, Wall }] = DQER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall, DGER): rules[{ tcNRE0, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }] = DGER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall, DGER): rules[{ tcNRE0, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }] = DGER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall, DBER): rules[{ tcNRE0, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall, DHER): rules[{ tcNRE0, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }] = DHER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall, DPER): rules[{ tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall, DPER): rules[{ tcNRE0, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall, DPER): rules[{ tcNRE0, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall, DBER): rules[{ tcNRE0, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall, DBER): rules[{ tcNRE0, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }] = DBER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall, DPER): rules[{ tcNRE0, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall, DPER): rules[{ tcNRE0, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall, DPER): rules[{ tcNRE0, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }] = DPER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall, Slot): rules[{ tcNRE0, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall, DSER): rules[{ tcNRE0, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall, DSER): rules[{ tcNRE0, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU, DSER): rules[{ tcNRE0, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }] = DSER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DBS1, Slot, DQE0, Slot, DPE0, DQS1, Slot): rules[{ tcNRE0, Slot, DBS1, Slot, DQE0, Slot, DPE0, DQS1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DBNR, Slot, DQE0, Slot, DPE0, DQNR, Slot): rules[{ tcNRE0, Slot, DBNR, Slot, DQE0, Slot, DPE0, DQNR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall, Slot): rules[{ tcNRE0, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot, DQS0): rules[{ tcNRE0, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall, DIER): rules[{ tcNRE0, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }] = DIER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall, DOER): rules[{ tcNRE0, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall }] = DOER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU, LTSL): rules[{ tcNLEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU }] = LTSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcNLEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU, LBSL): rules[{ tcNLEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU, LHSL): rules[{ tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU }] = LHSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, DSER, Wall, LBSU, Wall, Wall, LPSU, LPSL): rules[{ tcNLEL, LBSU, DSER, Wall, LBSU, Wall, Wall, LPSU }] = LPSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall, Slot): rules[{ tcNLEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU, LBSL): rules[{ tcNLEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU, LBSL): rules[{ tcNLEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }] = LBSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, DSER, Wall, Wall, LKSU, Wall, LPSU, Wall, Slot): rules[{ tcNLEL, DSER, Wall, Wall, LKSU, Wall, LPSU, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU, DKER): rules[{ tcNLEL, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }] = DKER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall, LHEU): rules[{ tcNUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall }] = LHEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall, LKEU): rules[{ tcNUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall }] = LKEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall, LBEU): rules[{ tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall, LTEU): rules[{ tcNUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall }] = LTEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall, LPEU): rules[{ tcNUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall }] = LPEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall, LBEU): rules[{ tcNUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall, LBEU): rules[{ tcNUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall, LBEU): rules[{ tcNUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall, Slot): rules[{ tcNUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall, LBEU): rules[{ tcNUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR, DSNR): rules[{ tcNUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR }] = DSNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Wall, Wall, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN0, Wall, Wall, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Wall, DHNR, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN0, Wall, DHNR, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DQNR, DBNR, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN0, DQNR, DBNR, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Wall, Wall, Wall, Slot, Wall, DPNR, Slot, Slot): rules[{ tcNSN0, Wall, Wall, Wall, Slot, Wall, DPNR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, Wall, Wall, Slot, Wall, Wall, DHNR, DHN0): rules[{ tcNSN0, Slot, Wall, Wall, Slot, Wall, Wall, DHNR }] = DHN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, Wall, Wall, Slot, Wall, DBNR, DSNR, DSN0): rules[{ tcNSN0, Slot, Wall, Wall, Slot, Wall, DBNR, DSNR }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DBNR, DQER, Slot, Slot, DBER, DQNR, DQN0): rules[{ tcNSN0, Slot, DBNR, DQER, Slot, Slot, DBER, DQNR }] = DQN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR, DQN0): rules[{ tcNSN0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR }] = DQN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DPNR, Wall, Wall, DBNR, Wall, Slot, DBNR, DBN0): rules[{ tcNSN0, DPNR, Wall, Wall, DBNR, Wall, Slot, DBNR }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DPNR, Slot, Wall, DBNR, Wall, Wall, DPNR, DPN0): rules[{ tcNSN0, DPNR, Slot, Wall, DBNR, Wall, Wall, DPNR }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DBNR, Wall, Wall, DBNR, Wall, Slot, DPNR, DPN0): rules[{ tcNSN0, DBNR, Wall, Wall, DBNR, Wall, Slot, DPNR }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DHNR, Wall, Wall, DBNR, Wall, Slot, DPNR, DPN0): rules[{ tcNSN0, DHNR, Wall, Wall, DBNR, Wall, Slot, DPNR }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, Wall, Wall, DHNR, Wall, Slot, DBNR, DBN0): rules[{ tcNSN0, Slot, Wall, Wall, DHNR, Wall, Slot, DBNR }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, Wall, Slot): rules[{ tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DBNR, Wall, Wall, DPNR, Wall, DQNR, DBNR, DBN0): rules[{ tcNSN0, DBNR, Wall, Wall, DPNR, Wall, DQNR, DBNR }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DBNR, Slot, Wall, DPNR, Wall, DQNR, DBNR, DBN0): rules[{ tcNSN0, DBNR, Slot, Wall, DPNR, Wall, DQNR, DBNR }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DBNR, DSNR, Wall, DPNR, Wall, Wall, DPNR, DPN0): rules[{ tcNSN0, DBNR, DSNR, Wall, DPNR, Wall, Wall, DPNR }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, DPNR, DPN0): rules[{ tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, DPNR }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, Wall, Slot): rules[{ tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, DSNR, DSN0): rules[{ tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, DSNR }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR, DSN0): rules[{ tcNSN0, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DPNR, Wall, DQNR, Wall, Wall, Wall, Slot): rules[{ tcNSN0, Slot, DPNR, Wall, DQNR, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DPNR, Wall, DQNR, Wall, Wall, Slot, Slot): rules[{ tcNSN0, Slot, DPNR, Wall, DQNR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DPN0, Slot, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcNSN1, DPN0, Slot, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcNSN1, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DSN0, Wall, Wall, Slot, Wall, Slot, Wall, Slot): rules[{ tcNSN1, DSN0, Wall, Wall, Slot, Wall, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DQN0, DBN0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN1, DQN0, DBN0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Wall, Wall, Wall, Slot, Wall, Wall, DHN0, DHN1): rules[{ tcNSN1, Wall, Wall, Wall, Slot, Wall, Wall, DHN0 }] = DHN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0, DSN1): rules[{ tcNSN1, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0 }] = DSN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Wall, DBN0, Wall, Slot, Wall, Wall, DQN0, DQN1): rules[{ tcNSN1, Wall, DBN0, Wall, Slot, Wall, Wall, DQN0 }] = DQN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0, DQN1): rules[{ tcNSN1, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0 }] = DQN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0, DBN1): rules[{ tcNSN1, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0 }] = DBN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0, DPN1): rules[{ tcNSN1, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }] = DPN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0, DPN1): rules[{ tcNSN1, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }] = DPN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0, DPN1): rules[{ tcNSN1, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0 }] = DPN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0, DBN1): rules[{ tcNSN1, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0 }] = DBN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot, Slot): rules[{ tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0, DBN1): rules[{ tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0 }] = DBN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0, DPN1): rules[{ tcNSN1, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }] = DPN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0, DPN1): rules[{ tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }] = DPN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot, Slot): rules[{ tcNSN1, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0, DSN1): rules[{ tcNSN1, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0 }] = DSN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0, DSN1): rules[{ tcNSN1, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0 }] = DSN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, DPN0, DQER, DQN0, Slot, DBER, Slot, Slot): rules[{ tcNSN1, Slot, DPN0, DQER, DQN0, Slot, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, DPN0, Slot, DQN0, Slot, DBWR, Slot, Slot): rules[{ tcNSN1, Slot, DPN0, Slot, DQN0, Slot, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall, LTEL): rules[{ tcNLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall }] = LTEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcNLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall, LBEL): rules[{ tcNLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall, LHEL): rules[{ tcNLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall }] = LHEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LBEU, LBEU, LPEU, DSN1, Wall, LPEL): rules[{ tcNLNL, Wall, Wall, LBEU, LBEU, LPEU, DSN1, Wall }] = LPEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall, Slot): rules[{ tcNLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall, LBEL): rules[{ tcNLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall, LBEL): rules[{ tcNLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall }] = LBEL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, Wall, LPEU, DSN1, LKEU, Wall, Wall, Wall, Slot): rules[{ tcNLNL, Wall, LPEU, DSN1, LKEU, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLNL, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot, DKN1): rules[{ tcNLNL, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot }] = DKN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, LBWL, Wall, Slot, DKS0, Wall, Wall, LKWU): rules[{ tcEUSL, Wall, LBWL, Wall, Slot, DKS0, Wall, Wall }] = LKWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, LBWL, Wall, Slot, DKS1, Wall, Wall, LKWU): rules[{ tcEUSL, Wall, LBWL, Wall, Slot, DKS1, Wall, Wall }] = LKWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS0, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS0, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS1, Wall, LBWU): rules[{ tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS1, Wall }] = LBWU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, DSS0, LPWL, Slot, DKS0, Wall, DPS0, DSS0, DSS0): rules[{ tcEUSL, DSS0, LPWL, Slot, DKS0, Wall, DPS0, DSS0 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUSL, Slot, LPWL, Slot, DKS1, Wall, DPS1, DSS1, DSS1): rules[{ tcEUSL, Slot, LPWL, Slot, DKS1, Wall, DPS1, DSS1 }] = DSS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DGS0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DGS0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall, Slot): rules[{ tcERS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, DBS1, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS1, Wall, DBS1, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, DPS1, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS1, Wall, DPS1, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DGS0, DBS0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS1, DGS0, DBS0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, Slot, Slot): rules[{ tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0, Slot): rules[{ tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, Slot, Wall, Slot, Wall, Wall, DPS1, DPS0): rules[{ tcERS1, Slot, Slot, Wall, Slot, Wall, Wall, DPS1 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0, Slot): rules[{ tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, Wall, Wall, Slot, Wall, Slot, DSS1, DSS0): rules[{ tcERS1, Slot, Wall, Wall, Slot, Wall, Slot, DSS1 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0, Slot): rules[{ tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, DQS1, DQS0): rules[{ tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, DQS1 }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS1, Slot, Slot, Wall, DBER, DQS1, DQS0): rules[{ tcERS1, Slot, DBS1, Slot, Slot, Wall, DBER, DQS1 }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0, Slot): rules[{ tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, DGS0, Slot): rules[{ tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS1, DQER, Slot, Slot, DBER, DQS1, DQS0): rules[{ tcERS1, Slot, DBS1, DQER, Slot, Slot, DBER, DQS1 }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS0, DBS0, Slot, Slot, DQWR, DBWR, Slot, Slot): rules[{ tcERS1, DQS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0, DBS0): rules[{ tcERS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0, DBS0): rules[{ tcERS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0, DBS0): rules[{ tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0, DBS0): rules[{ tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0, DBS0): rules[{ tcERS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DBS1, DBS0): rules[{ tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS1, Wall, Wall, DBS1, Wall, Wall, DBS1, DBS0): rules[{ tcERS1, DPS1, Wall, Wall, DBS1, Wall, Wall, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DBS1, DBS0): rules[{ tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DBS1, DBS0): rules[{ tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DHS1, DHS0): rules[{ tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DHS1 }] = DHS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DPS1, DPS0): rules[{ tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DPS1 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DPS1, DPS0): rules[{ tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DPS1 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot, DHS0): rules[{ tcERS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }] = DHS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DHS1, Wall, Wall, Wall, Slot): rules[{ tcERS1, DBS1, Wall, Wall, DHS1, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0, DPS0): rules[{ tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0, DPS0): rules[{ tcERS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0, DPS0): rules[{ tcERS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0, DPS0): rules[{ tcERS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0, DPS0): rules[{ tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Slot, DBS1, DBS0): rules[{ tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Slot, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DPS1, Wall, DQS1, DBS1, DBS0): rules[{ tcERS1, DBS1, Wall, Wall, DPS1, Wall, DQS1, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DSS1, Wall, DPS1, Wall, Wall, DPS1, DPS0): rules[{ tcERS1, Slot, DSS1, Wall, DPS1, Wall, Wall, DPS1 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Wall, DPS1, DPS0): rules[{ tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Wall, DPS1 }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot, DSS0): rules[{ tcERS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0, DSS0): rules[{ tcERS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0, DSS0): rules[{ tcERS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, Wall, Slot): rules[{ tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, DSS1, DSS0): rules[{ tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, DSS1 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1, DSS0): rules[{ tcERS1, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1 }] = DSS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot, DQS0): rules[{ tcERS1, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Wall, Slot): rules[{ tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Slot, Slot): rules[{ tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS1, DGWR, DQS1, DQWR, DBWR, Slot, Slot): rules[{ tcERS1, Slot, DPS1, DGWR, DQS1, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS0, DGER, DGS0, Slot, DBER, Slot, DGS0): rules[{ tcERS1, Slot, DPS0, DGER, DGS0, Slot, DBER, Slot }] = DGS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DHS0, Wall, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS0, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DGS0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS0, DGS0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall, Slot): rules[{ tcERS0, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DGS0, DBS0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS0, DGS0, DBS0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Wall, Slot, Wall, Slot, Wall, Wall, DPS0, DPSR): rules[{ tcERS0, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Wall, Wall, Wall, Slot, Wall, Slot, DSS0, DSSR): rules[{ tcERS0, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }] = DSSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0, DQSR): rules[{ tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = DQSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, DQS0, DQSR): rules[{ tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = DQSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0, DGSR): rules[{ tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = DGSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, DGS0, DGSR): rules[{ tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = DGSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, Slot, Slot, DQWR, DBWR, Slot, Slot): rules[{ tcERS0, DQS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot, Slot): rules[{ tcERS0, DQS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0, DBSR): rules[{ tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0, DBSR): rules[{ tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0, DHSR): rules[{ tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }] = DHSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0, DPSR): rules[{ tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0, DPSR): rules[{ tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0, DPSR): rules[{ tcERS0, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot, Slot): rules[{ tcERS0, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0, DBSR): rules[{ tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0, DBSR): rules[{ tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0, DBSR): rules[{ tcERS0, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0, DPSR): rules[{ tcERS0, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0, DPSR): rules[{ tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }] = DPSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot, Slot): rules[{ tcERS0, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0, DSSR): rules[{ tcERS0, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }] = DSSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0, DSSR): rules[{ tcERS0, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }] = DSSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot, Slot): rules[{ tcERS0, Slot, DPS0, Wall, DQS0, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, Slot, DQS0, Wall, DBER, Slot, Slot): rules[{ tcERS0, Slot, DPS0, Slot, DQS0, Wall, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, DQER, DQS0, Slot, DBER, Slot, Slot): rules[{ tcERS0, Slot, DPS0, DQER, DQS0, Slot, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, DGER, DGS0, Slot, DBER, Slot, Slot): rules[{ tcERS0, Slot, DPS0, DGER, DGS0, Slot, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DQN1, DBN1, DQER, Slot, Slot, DBER, Slot, DQE0): rules[{ tcESE0, DQN1, DBN1, DQER, Slot, Slot, DBER, Slot }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DGSR, DBSR, DGER, Slot, Slot, DBER, Slot, DGE0): rules[{ tcESE0, DGSR, DBSR, DGER, Slot, Slot, DBER, Slot }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Wall, Slot, DPER, DSER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Wall, Slot, DPER, DSER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, DPER, DPER, DSER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, DPER, DPER, DSER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Slot, Wall, DSER, DSER, Wall, Wall, Slot): rules[{ tcESE0, Wall, Slot, Wall, DSER, DSER, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall, Slot): rules[{ tcESE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall, Slot): rules[{ tcESE1, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DQN1, DBN1, Slot, DQE0, Slot, DPE0, Slot, Slot): rules[{ tcESE1, DQN1, DBN1, Slot, DQE0, Slot, DPE0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcELEL, Wall, Slot, Slot, DSE1, DSE1, LBSU, LKSU, DKE1): rules[{ tcELEL, Wall, Slot, Slot, DSE1, DSE1, LBSU, LKSU }] = DKE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0, Slot): rules[{ tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot, DQS0): rules[{ tcERS1, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0, DQSR): rules[{ tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = DQSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot, Slot): rules[{ tcERS0, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, LBEL, DKN1, Slot, Wall, Wall, Wall, LKEU): rules[{ tcWUNL, Wall, LBEL, DKN1, Slot, Wall, Wall, Wall }] = LKEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKN1, Wall, LBEU): rules[{ tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKN1, Wall }] = LBEU
(Volume *)(0x7fffea0d24a0)->AddRule(tcWUNL, DSN1, LPEL, Wall, DKN1, Slot, DPN1, Slot, DSN1): rules[{ tcWUNL, DSN1, LPEL, Wall, DKN1, Slot, DPN1, Slot }] = DSN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Slot, Slot, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcWRN1, Slot, Slot, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Slot, DPN1, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcWRN1, Slot, DPN1, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Slot, Wall, Wall, Slot, Wall, Slot, Wall, Slot): rules[{ tcWRN1, Slot, Wall, Wall, Slot, Wall, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DPN1, Slot, Wall, Slot, Wall, Wall, Slot, DPN0): rules[{ tcWRN1, DPN1, Slot, Wall, Slot, Wall, Wall, Slot }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DSN1, Wall, Wall, Slot, Wall, Slot, Slot, DSN0): rules[{ tcWRN1, DSN1, Wall, Wall, Slot, Wall, Slot, Slot }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Slot, DBN1, Wall, Slot, Wall, Wall, DQN1, Slot): rules[{ tcWRN1, Slot, DBN1, Wall, Slot, Wall, Wall, DQN1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DQN1, DBN1, Slot, Slot, Slot, DBWR, Slot, DQN0): rules[{ tcWRN1, DQN1, DBN1, Slot, Slot, Slot, DBWR, Slot }] = DQN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DQN1, DBN1, Slot, Slot, DQE1, DBE1, Slot, DQN0): rules[{ tcWRN1, DQN1, DBN1, Slot, Slot, DQE1, DBE1, Slot }] = DQN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DBN1, DPN0): rules[{ tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DBN1 }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DHN1, Wall, Wall, DBN1, Wall, Wall, DPN1, DHN0): rules[{ tcWRN1, DHN1, Wall, Wall, DBN1, Wall, Wall, DPN1 }] = DHN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DBN1, Wall, Wall, DBN1, Wall, Slot, DPN1, DBN0): rules[{ tcWRN1, DBN1, Wall, Wall, DBN1, Wall, Slot, DPN1 }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DPN1, DPN0): rules[{ tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DPN1 }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Wall, Wall, Wall, DHN1, Wall, Wall, DBN1, Slot): rules[{ tcWRN1, Wall, Wall, Wall, DHN1, Wall, Wall, DBN1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, Slot, DPN0): rules[{ tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, Slot }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DQN1, DBN1, DBN0): rules[{ tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DQN1, DBN1 }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, DPN1, DPN0): rules[{ tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, DPN1 }] = DPN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DBN1, DSN1, Wall, DPN1, Wall, Slot, DPN1, DBN0): rules[{ tcWRN1, DBN1, DSN1, Wall, DPN1, Wall, Slot, DPN1 }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Wall, Wall, Wall, DSN1, Wall, DPN1, DSN1, Slot): rules[{ tcWRN1, Wall, Wall, Wall, DSN1, Wall, DPN1, DSN1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DSN1, Wall, Wall, DSN1, Wall, DPN1, DSN1, DSN0): rules[{ tcWRN1, DSN1, Wall, Wall, DSN1, Wall, DPN1, DSN1 }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot, DSN0): rules[{ tcWRN1, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot }] = DSN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Wall, DPN1, Wall, DQN1, Wall, Wall, Slot, Slot): rules[{ tcWRN1, Wall, DPN1, Wall, DQN1, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Slot, DPN1, Wall, DQN1, Wall, Wall, Slot, Slot): rules[{ tcWRN1, Slot, DPN1, Wall, DQN1, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DPN0, Slot, Wall, Slot, Wall, Wall, Wall, DPNR): rules[{ tcWRN0, DPN0, Slot, Wall, Slot, Wall, Wall, Wall }] = DPNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall, DQNR): rules[{ tcWRN0, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall }] = DQNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DSN0, Wall, Wall, Slot, Wall, Slot, Wall, DSNR): rules[{ tcWRN0, DSN0, Wall, Wall, Slot, Wall, Slot, Wall }] = DSNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DQN0, DBN0, Wall, Slot, Wall, Wall, Slot, DQNR): rules[{ tcWRN0, DQN0, DBN0, Wall, Slot, Wall, Wall, Slot }] = DQNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Wall, Wall, Wall, Slot, Wall, Wall, DHN0, Slot): rules[{ tcWRN0, Wall, Wall, Wall, Slot, Wall, Wall, DHN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0, Slot): rules[{ tcWRN0, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Wall, DBN0, Wall, Slot, Wall, Wall, DQN0, Slot): rules[{ tcWRN0, Wall, DBN0, Wall, Slot, Wall, Wall, DQN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0, Slot): rules[{ tcWRN0, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0, DPNR): rules[{ tcWRN0, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0 }] = DPNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0, DBNR): rules[{ tcWRN0, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }] = DBNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0, DHNR): rules[{ tcWRN0, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }] = DHNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0, DPNR): rules[{ tcWRN0, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0 }] = DPNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0, Slot): rules[{ tcWRN0, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot, DPNR): rules[{ tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot }] = DPNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0, DBNR): rules[{ tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0 }] = DBNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0, DBNR): rules[{ tcWRN0, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }] = DBNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0, DPNR): rules[{ tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }] = DPNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot, DSNR): rules[{ tcWRN0, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot }] = DSNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0, Slot): rules[{ tcWRN0, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0, DSNR): rules[{ tcWRN0, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0 }] = DSNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, DPN0, Slot, DQN0, Slot, DBWR, Slot, Slot): rules[{ tcWRN0, Slot, DPN0, Slot, DQN0, Slot, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, DPN0, Slot, DQN0, DQE1, DBE1, Slot, Slot): rules[{ tcWRN0, Slot, DPN0, Slot, DQN0, DQE1, DBE1, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, DGSR, DGE0): rules[{ tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, DGSR }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR, DQE0): rules[{ tcESE0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, Slot, DGER, DBER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, Slot, DGER, DBER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, Wall, Wall, Slot, DGER, Slot, DPER, Wall, Slot): rules[{ tcESE0, Wall, Wall, Slot, DGER, Slot, DPER, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall, DGE1): rules[{ tcESE1, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }] = DGE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR, Slot): rules[{ tcESE1, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, DGSR, Slot): rules[{ tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, DGSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot, DGS0): rules[{ tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot }] = DGS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, DGSR, DQS0): rules[{ tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, DGSR }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR, DBS0): rules[{ tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, Slot, Slot): rules[{ tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DPSR, Wall, DGSR, Wall, Wall, Slot, Slot): rules[{ tcSSS0, Slot, DPSR, Wall, DGSR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0, DQS1): rules[{ tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = DQS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot, DGS1): rules[{ tcSSS1, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }] = DGS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0, DBS1): rules[{ tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }] = DBS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot, Slot): rules[{ tcSSS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DPS0, Wall, DGS0, Wall, Wall, Slot, Slot): rules[{ tcSSS1, Slot, DPS0, Wall, DGS0, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Wall, Slot, Slot, Wall, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Wall, Slot, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DPWR, Wall, Slot, Slot, Wall, Wall, Slot): rules[{ tcWSW0, Wall, DPWR, Wall, Slot, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DQWR, Slot, Slot, DBWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, DQWR, Slot, Slot, DBWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Wall, Slot, Slot, DHWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Wall, Slot, Slot, DHWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR, Slot): rules[{ tcWSW0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, Slot, DHWR, Wall, Wall, DHW0): rules[{ tcWSW0, Wall, Wall, Slot, Slot, DHWR, Wall, Wall }] = DHW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DBWR, Slot, Slot, DSWR, Wall, Wall, DSW0): rules[{ tcWSW0, Wall, DBWR, Slot, Slot, DSWR, Wall, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot, DQW0): rules[{ tcWSW0, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, Slot, DGWR, DBWR, Wall, DGW0): rules[{ tcWSW0, Wall, Wall, Slot, Slot, DGWR, DBWR, Wall }] = DGW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Slot, DHWR, DBWR, DBWR, Wall, Wall, DBW0): rules[{ tcWSW0, Wall, Slot, DHWR, DBWR, DBWR, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Slot, DPWR, DBWR, DBWR, Wall, Wall, DBW0): rules[{ tcWSW0, Wall, Slot, DPWR, DBWR, DBWR, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall, DPW0): rules[{ tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DGS1, DPWR, DBWR, DPWR, Wall, Wall, DPW0): rules[{ tcWSW0, Wall, DGS1, DPWR, DBWR, DPWR, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DPWR, DBWR, DPWR, Slot, Wall, DPW0): rules[{ tcWSW0, Wall, Wall, DPWR, DBWR, DPWR, Slot, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Slot, Slot, DHWR, DBWR, Wall, Wall, DBW0): rules[{ tcWSW0, Wall, Slot, Slot, DHWR, DBWR, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DPWR, DPWR, Wall, DSWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, DPWR, DPWR, Wall, DSWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Wall, Wall, DBW0): rules[{ tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DGWR, DBWR, DPWR, DBWR, Wall, Wall, DBW0): rules[{ tcWSW0, Wall, DGWR, DBWR, DPWR, DBWR, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Slot, Wall, DBW0): rules[{ tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Slot, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DBWR, DPWR, DPWR, DSWR, Wall, DPW0): rules[{ tcWSW0, Wall, Wall, DBWR, DPWR, DPWR, DSWR, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DPWR, DPWR, DPWR, DSWR, Wall, DPW0): rules[{ tcWSW0, Wall, Wall, DPWR, DPWR, DPWR, DSWR, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DPWR, DSWR, DSWR, Wall, Wall, Wall, Slot): rules[{ tcWSW0, Wall, DPWR, DSWR, DSWR, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DPWR, DSWR, DSWR, DSWR, Wall, Wall, DSW0): rules[{ tcWSW0, Wall, DPWR, DSWR, DSWR, DSWR, Wall, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall, DSW0): rules[{ tcWSW0, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, DQWR, Wall, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Slot, DQWR, Wall, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DGS1, DQWR, Slot, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, DGS1, DQWR, Slot, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Slot, DPS1, DGWR, DGS1, DQWR, DBWR, Slot, DJS1): rules[{ tcWSW0, Slot, DPS1, DGWR, DGS1, DQWR, DBWR, Slot }] = DJS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, DGWR, DGS1, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Slot, DGWR, DGS1, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LPNU, DSW0, Wall, LBNU, Wall, Wall, LBNU, LPNL): rules[{ tcWLWL, LPNU, DSW0, Wall, LBNU, Wall, Wall, LBNU }] = LPNL
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSW0, Slot): rules[{ tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSW0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWLWL, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall, DKS0): rules[{ tcWLWL, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }] = DKS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DBNR, Slot, Slot, DQE1, DBE1, DGNR, DQE0): rules[{ tcNRE1, Slot, DBNR, Slot, Slot, DQE1, DBE1, DGNR }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DBS1, Slot, Slot, DGE1, DBE1, DQS1, DGE0): rules[{ tcNRE1, Slot, DBS1, Slot, Slot, DGE1, DBE1, DQS1 }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DGE1, DBE1, DPE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, DGE1, DBE1, DPE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, DGE1, Wall, DPE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Slot, DGE1, Wall, DPE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall, Slot): rules[{ tcNRE0, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall, DGER): rules[{ tcNRE0, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall }] = DGER
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR, Slot): rules[{ tcNRE0, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE0, Slot, DBS1, Slot, DGE0, Slot, DPE0, DQS1, Slot): rules[{ tcNRE0, Slot, DBS1, Slot, DGE0, Slot, DPE0, DQS1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DGNR, DBNR, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN0, DGNR, DBNR, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR, DGN0): rules[{ tcNSN0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR }] = DGN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DBNR, Slot, Slot, DGW0, DBW0, DQNR, DQN0): rules[{ tcNSN0, Slot, DBNR, Slot, Slot, DGW0, DBW0, DQNR }] = DQN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, DBNR, Wall, Wall, DPNR, Wall, DGNR, DBNR, DBN0): rules[{ tcNSN0, DBNR, Wall, Wall, DPNR, Wall, DGNR, DBNR }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN0, Slot, DPNR, Wall, DGNR, Wall, Wall, Slot, Slot): rules[{ tcNSN0, Slot, DPNR, Wall, DGNR, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot, Slot): rules[{ tcNSN1, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0, DGN1): rules[{ tcNSN1, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0 }] = DGN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0, DBN1): rules[{ tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0 }] = DBN1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, DPN0, Slot, DQN0, DGW0, DBW0, Slot, Slot): rules[{ tcNSN1, Slot, DPN0, Slot, DQN0, DGW0, DBW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNSN1, Slot, DPN0, DQER, DGN0, Slot, DBER, Slot, Slot): rules[{ tcNSN1, Slot, DPN0, DQER, DGN0, Slot, DBER, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DJS1, DBS1, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS1, DJS1, DBS1, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, DJS1, DGS0): rules[{ tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, DJS1 }] = DGS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DBS1, DGER, Slot, Slot, DBER, DQS1, DQS0): rules[{ tcERS1, Slot, DBS1, DGER, Slot, Slot, DBER, DQS1 }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0, DBS0): rules[{ tcERS1, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DBS1, Wall, Wall, DPS1, Wall, DJS1, DBS1, DBS0): rules[{ tcERS1, DBS1, Wall, Wall, DPS1, Wall, DJS1, DBS1 }] = DBS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot, DQW0): rules[{ tcERS1, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0, DGS0): rules[{ tcERS1, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0 }] = DGS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS1, Slot, DJS1, Slot, DPW0, Slot, DQW0): rules[{ tcERS1, Slot, DPS1, Slot, DJS1, Slot, DPW0, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcERS0, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0, DGSR): rules[{ tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = DGSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQS0, DBS0, DBSR): rules[{ tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQS0, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0, DBSR): rules[{ tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0 }] = DBSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DGS0, DBS0, Slot, DQS0, Slot, DPW0, Slot, Slot): rules[{ tcERS0, DGS0, DBS0, Slot, DQS0, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot, DQW0): rules[{ tcERS0, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQS0, DQSR): rules[{ tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQS0 }] = DQSR
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0, Slot): rules[{ tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE0, DGN1, DBN1, DQER, Slot, Slot, DBER, Slot, DQE0): rules[{ tcESE0, DGN1, DBN1, DQER, Slot, Slot, DBER, Slot }] = DQE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DGN1, DBN1, Slot, DQE0, Slot, DPE0, Slot, Slot): rules[{ tcESE1, DGN1, DBN1, Slot, DQE0, Slot, DPE0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKS0, LKNU): rules[{ tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKS0 }] = LKNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, LBNL, DKS0, Wall, LPNL, Wall, Wall, LBNL, LBNU): rules[{ tcSUWL, LBNL, DKS0, Wall, LPNL, Wall, Wall, LBNL }] = LBNU
(Volume *)(0x7fffea0d24a0)->AddRule(tcSUWL, Slot, DPW0, DSW0, DKS0, DSW0, LPNL, Wall, DSW0): rules[{ tcSUWL, Slot, DPW0, DSW0, DKS0, DSW0, LPNL, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DSW0, Slot, Wall, Wall, Wall, Slot): rules[{ tcSRW1, Wall, Slot, DSW0, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DPW0, Slot, Wall, Slot, Wall, Slot): rules[{ tcSRW1, Wall, Wall, DPW0, Slot, Wall, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Slot, Slot, Wall, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, Slot, Slot, Wall, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Wall, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, Wall, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Slot, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, Slot, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DGW0, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, DGW0, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Slot, DBSR, Slot, Slot, Slot, DPW0, Slot, Slot): rules[{ tcSRW1, Slot, DBSR, Slot, Slot, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, DQSR, DBSR, Slot, Slot, Slot, DPW0, Slot, Slot): rules[{ tcSRW1, DQSR, DBSR, Slot, Slot, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Wall, Slot, DHW0, Wall, Wall, Slot): rules[{ tcSRW1, Wall, Wall, Wall, Slot, DHW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall, Slot): rules[{ tcSRW1, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot, Slot): rules[{ tcSRW1, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall, DBW0): rules[{ tcSRW1, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall, DBW0): rules[{ tcSRW1, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall, DBW0): rules[{ tcSRW1, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall, DBW0): rules[{ tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall, DBW0): rules[{ tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall }] = DBW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall, DHW0): rules[{ tcSRW1, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall }] = DHW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall, DPW0): rules[{ tcSRW1, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Slot, DBW0, DPW0, DBW0, Wall, Wall, DPW0): rules[{ tcSRW1, Wall, Slot, DBW0, DPW0, DBW0, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall, DPW0): rules[{ tcSRW1, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall, DPW0): rules[{ tcSRW1, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall, DPW0): rules[{ tcSRW1, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall, DSW0): rules[{ tcSRW1, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall, DSW0): rules[{ tcSRW1, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall, DSW0): rules[{ tcSRW1, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }] = DSW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall, DGW0): rules[{ tcSRW1, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall }] = DGW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DSW0, Slot, Wall, Wall, Wall, DSWR): rules[{ tcSRW0, Wall, Slot, DSW0, Slot, Wall, Wall, Wall }] = DSWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DPW0, Slot, Wall, Slot, Wall, DPWR): rules[{ tcSRW0, Wall, Wall, DPW0, Slot, Wall, Slot, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Slot, Slot, Wall, DBW0, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Slot, Slot, Wall, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Wall, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Wall, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Slot, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Slot, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DGW0, Slot, Slot, DBW0, Wall, DGWR): rules[{ tcSRW0, Wall, Wall, DGW0, Slot, Slot, DBW0, Wall }] = DGWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Slot, DBSR, Slot, Slot, Slot, DPW0, Slot, Slot): rules[{ tcSRW0, Slot, DBSR, Slot, Slot, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, DQSR, DBSR, Slot, Slot, Slot, DPW0, Slot, Slot): rules[{ tcSRW0, DQSR, DBSR, Slot, Slot, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Wall, Slot, DHW0, Wall, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Wall, Slot, DHW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall, Slot): rules[{ tcSRW0, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot, Slot): rules[{ tcSRW0, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall, DHWR): rules[{ tcSRW0, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall }] = DHWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall, DPWR): rules[{ tcSRW0, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall, DBWR): rules[{ tcSRW0, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }] = DBWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall, DPWR): rules[{ tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall, DPWR): rules[{ tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall, DPWR): rules[{ tcSRW0, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Slot, DBW0, DPW0, DBW0, Wall, Wall, DBWR): rules[{ tcSRW0, Wall, Slot, DBW0, DPW0, DBW0, Wall, Wall }] = DBWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall, DBWR): rules[{ tcSRW0, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall }] = DBWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall, DBWR): rules[{ tcSRW0, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall }] = DBWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall, DPWR): rules[{ tcSRW0, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall }] = DPWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall, DSWR): rules[{ tcSRW0, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall }] = DSWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall, Slot): rules[{ tcSRW0, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall, DSWR): rules[{ tcSRW0, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }] = DSWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, Slot, Slot, DBWR, Slot, DQS0): rules[{ tcSSS0, DQSR, DBSR, Slot, Slot, Slot, DBWR, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DBSR, DGWR, Slot, Slot, DBWR, Slot, Slot): rules[{ tcSSS0, Slot, DBSR, DGWR, Slot, Slot, DBWR, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DQSR, DBSR, DPS0): rules[{ tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DQSR, DBSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DGSR, DBSR, Wall, DQSR, Wall, Wall, Slot, DGS0): rules[{ tcSSS0, DGSR, DBSR, Wall, DQSR, Wall, Wall, Slot }] = DGS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, DQSR, Slot): rules[{ tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, DQSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall, Slot): rules[{ tcSRW1, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall, DPW0): rules[{ tcSRW1, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW1, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot, DQW0): rules[{ tcSRW1, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall, DQWR): rules[{ tcSRW0, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall }] = DQWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall, DQWR): rules[{ tcSRW0, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall }] = DQWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall, Slot): rules[{ tcSRW0, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall, DGWR): rules[{ tcSRW0, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall }] = DGWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall, DBWR): rules[{ tcSRW0, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }] = DBWR
(Volume *)(0x7fffea0d24a0)->AddRule(tcSRW0, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot, Slot): rules[{ tcSRW0, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DGN1, DBN1, Slot, Slot, DQE1, DBE1, Slot, DGN0): rules[{ tcWRN1, DGN1, DBN1, Slot, Slot, DQE1, DBE1, Slot }] = DGN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DGN1, DBN1, DBN0): rules[{ tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DGN1, DBN1 }] = DBN0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN1, Wall, DPN1, Wall, DGN1, Wall, Wall, Slot, Slot): rules[{ tcWRN1, Wall, DPN1, Wall, DGN1, Wall, Wall, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot, DGNR): rules[{ tcWRN0, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot }] = DGNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0, Slot): rules[{ tcWRN0, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0, DBNR): rules[{ tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0 }] = DBNR
(Volume *)(0x7fffea0d24a0)->AddRule(tcWRN0, Slot, DPN0, Slot, DGN0, DQE1, DBE1, Slot, Slot): rules[{ tcWRN0, Slot, DPN0, Slot, DGN0, DQE1, DBE1, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, DKS1, Wall, Wall, Slot, Wall, LBSL, Wall, LKSU): rules[{ tcNUEL, DKS1, Wall, Wall, Slot, Wall, LBSL, Wall }] = LKSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, LBSL, DKS1, Wall, LPSL, Wall, Wall, LBSL, LBSU): rules[{ tcNUEL, LBSL, DKS1, Wall, LPSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcNUEL, Wall, Slot, Slot, DKE1, DSE1, LPSL, Slot, DSE1): rules[{ tcNUEL, Wall, Slot, Slot, DKE1, DSE1, LPSL, Slot }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, Slot, Slot, Slot, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Slot, Slot, Slot, Slot, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, Slot, DPE1, DSE1, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, Slot, Slot, DPE1, DSE1, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, Slot, DSE1, DSE1, LBSU, LKSU, DSE0): rules[{ tcNRE1, Wall, Slot, Slot, DSE1, DSE1, LBSU, LKSU }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall, DHE1): rules[{ tcESE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }] = DHE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall, Slot): rules[{ tcESE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall, DPE1): rules[{ tcESE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall, DPE1): rules[{ tcESE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }] = DPE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall, DBE1): rules[{ tcESE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }] = DBE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot, Slot): rules[{ tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall, DIE1): rules[{ tcESE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }] = DIE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, Slot, DQS0): rules[{ tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU, LPSL): rules[{ tcNLEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU }] = LPSL
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall, Slot): rules[{ tcNLEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNLEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU, DKE1): rules[{ tcNLEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }] = DKE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot, DQS0): rules[{ tcERS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcERS0, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot, Slot): rules[{ tcERS0, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall, LKSU): rules[{ tcEUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall }] = LKSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL, LBSU): rules[{ tcEUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL }] = LBSU
(Volume *)(0x7fffea0d24a0)->AddRule(tcEUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot, DSE1): rules[{ tcEUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot }] = DSE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot, DGE1): rules[{ tcESE1, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot }] = DGE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcESE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall, Slot): rules[{ tcESE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DGE1, DBSR, Wall, Slot, Wall, Wall, Wall, Slot): rules[{ tcSSS0, DGE1, DBSR, Wall, Slot, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, DQSR, Slot): rules[{ tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, DQSR }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE1, DBSR, DPS0): rules[{ tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE1, DBSR }] = DPS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE1, Slot): rules[{ tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE1 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS0, DQSR, DBSR, Slot, DGE1, Wall, DPE1, Slot, DJE1): rules[{ tcSSS0, DQSR, DBSR, Slot, DGE1, Wall, DPE1, Slot }] = DJE1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot, DQS1): rules[{ tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot }] = DQS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0, Slot): rules[{ tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0, Slot): rules[{ tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0 }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcSSS1, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot, DGS1): rules[{ tcSSS1, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }] = DGS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot, DQW0): rules[{ tcWSW0, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }] = DQW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DQWR, Slot, DGS1, DBWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, DQWR, Slot, DGS1, DBWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, DGS1, DBWR, DBWR, DPWR, Wall, Wall, DPW0): rules[{ tcWSW0, Wall, DGS1, DBWR, DBWR, DPWR, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Slot, DPWR, DBWR, DPWR, Wall, Wall, DPW0): rules[{ tcWSW0, Wall, Slot, DPWR, DBWR, DPWR, Wall, Wall }] = DPW0
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, DGS1, DQWR, Wall, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, DGS1, DQWR, Wall, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, DQWR, Slot, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Slot, DQWR, Slot, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Slot, DPS1, Slot, DGS1, DQWR, DBWR, Slot, DJS1): rules[{ tcWSW0, Slot, DPS1, Slot, DGS1, DQWR, DBWR, Slot }] = DJS1
(Volume *)(0x7fffea0d24a0)->AddRule(tcWSW0, Wall, Wall, Slot, DGWR, Slot, DPWR, Wall, Slot): rules[{ tcWSW0, Wall, Wall, Slot, DGWR, Slot, DPWR, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DBE1, Wall, Slot, Slot, Wall, Wall, Slot): rules[{ tcNRE1, Wall, DBE1, Wall, Slot, Slot, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, Slot, Slot, DBE1, Wall, Slot): rules[{ tcNRE1, Wall, Wall, Wall, Slot, Slot, DBE1, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DBE1, Slot, Slot, DSE1, Wall, Wall, DSE0): rules[{ tcNRE1, Wall, DBE1, Slot, Slot, DSE1, Wall, Wall }] = DSE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Slot, Slot, DJE1, DBE1, Wall, DGE0): rules[{ tcNRE1, Wall, Wall, Slot, Slot, DJE1, DBE1, Wall }] = DGE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Slot, DBE1, DBE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Slot, DBE1, DBE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DIE1, DBE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DIE1, DBE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Slot, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Slot, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE1, DBE1, DHE1, Wall, Wall, DHE0): rules[{ tcNRE1, Wall, Wall, DPE1, DBE1, DHE1, Wall, Wall }] = DHE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DBE1, DPE1, Slot, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DBE1, DBE1, DPE1, Slot, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DHE1, Wall, Wall, Wall, Slot): rules[{ tcNRE1, Wall, Wall, DBE1, DHE1, Wall, Wall, Wall }] = Slot
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, DJE1, DBE1, DPE1, DBE1, Wall, Wall, DBE0): rules[{ tcNRE1, Wall, DJE1, DBE1, DPE1, DBE1, Wall, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DPE1, DPE1, DBE1, DSE1, Wall, DBE0): rules[{ tcNRE1, Wall, Wall, DPE1, DPE1, DBE1, DSE1, Wall }] = DBE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, DBE1, DPE1, DPE1, DSE1, Wall, DPE0): rules[{ tcNRE1, Wall, Wall, DBE1, DPE1, DPE1, DSE1, Wall }] = DPE0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Slot, DPS0, Slot, DJE1, Wall, DPE1, Slot, DQS0): rules[{ tcNRE1, Slot, DPS0, Slot, DJE1, Wall, DPE1, Slot }] = DQS0
(Volume *)(0x7fffea0d24a0)->AddRule(tcNRE1, Wall, Wall, Wall, DIE1, DBE1, Wall, Wall, DIE0): rules[{ tcNRE1, Wall, Wall, Wall, DIE1, DBE1, Wall, Wall }] = DIE0
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X-----|-G|> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 0, tick tcEUSL (cycle: 0, phase: E, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcEUSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(5,6,11), DKSR(5,6,12), Slot(5,6,14), DKSR(5,6,15), Slot(6,6,0), LHWL(6,6,1), LBWL(6,6,2), LBWL(6,6,3), LBWL(6,6,4), LBWL(6,6,5), LBWL(6,6,6), LBWL(6,6,7), LBWL(6,6,8), LBWL(6,6,9), LBWL(6,6,10), LBWL(6,6,11), LPWL(6,6,12), LBWL(6,6,13), LBWL(6,6,14), LPWL(6,6,15), LBWL(6,6,16), LBWL(6,6,17), LBWL(6,6,18), LBWL(6,6,19), LBWL(6,6,20), LBWL(6,6,21), LBWL(6,6,22), LBWL(6,6,23), LTWL(6,6,24) } } }
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,12)
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,15)
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,11), { tcEUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,12), { tcEUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,14), { tcEUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,15), { tcEUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,0), { tcEUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ LHWL, Wall, Wall, Wall, Wall, Wall } } = LHWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWL(6,6,1), { tcEUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LHWL, area={ LBWL, Wall, Wall, Slot, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,2), { tcEUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LHWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,3), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,4), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,5), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,6), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,7), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,8), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,9), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,10), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,11), { tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,12), { tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,13), { tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,14), { tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,15), { tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,16), { tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,17), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,18), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,19), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,20), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,21), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,22), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,23), { tcEUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LTWL, Wall, Wall, LBWL, Wall, Wall } } = LTWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWL(6,6,24), { tcEUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LTWL, area={ Wall, Wall, Wall, LBWL, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X-----|-G|> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 1, tick tcERS1 (cycle: 0, phase: E, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcERS1, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1116620)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,12), Slot(3,9,12), Slot(3,10,12), DQSR(3,14,12), Slot(3,15,12), DGSR(3,16,12), Slot(3,17,12), Slot(3,18,12), Slot(3,19,12), DPSR(4,4,12), DPSR(4,5,12), DPSR(4,6,12), DBSR(4,7,12), DPSR(4,8,12), DBSR(4,9,12), DBSR(4,10,12), DBSR(4,11,12), DBSR(4,12,12), DBSR(4,13,12), DPSR(4,14,12), DBSR(4,15,12), DPSR(4,16,12), DBSR(4,17,12), DBSR(4,18,12), DHSR(4,19,12), Slot(4,20,12), Slot(4,21,12), DSSR(5,4,12), DSSR(5,5,12), DSSR(5,6,12), Slot(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620) rBlked at DQSR(3,8,12) by Wall(3,7,12)
(DataRod *)(0x1116620) rBlked at DQSR(3,14,12) by Wall(3,13,12)
(DataRod *)(0x1116620) rBlked at DPSR(4,4,12) by Wall(4,3,12)
(DataRod *)(0x1116620) rBlked at DSSR(5,4,12) by Wall(5,3,12)
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x11175f0)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,15), Slot(3,9,15), Slot(3,10,15), DQSR(3,11,15), Slot(3,12,15), Slot(3,13,15), DGSR(3,16,15), Slot(3,17,15), Slot(3,18,15), Slot(3,19,15), DPSR(4,4,15), DPSR(4,5,15), DPSR(4,6,15), DBSR(4,7,15), DPSR(4,8,15), DBSR(4,9,15), DBSR(4,10,15), DPSR(4,11,15), DBSR(4,12,15), DBSR(4,13,15), DBSR(4,14,15), DBSR(4,15,15), DPSR(4,16,15), DBSR(4,17,15), DBSR(4,18,15), DHSR(4,19,15), Slot(4,20,15), Slot(4,21,15), DSSR(5,4,15), DSSR(5,5,15), DSSR(5,6,15), Slot(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) rBlked at DQSR(3,8,15) by Wall(3,7,15)
(DataRod *)(0x11175f0) rBlked at DGSR(3,16,15) by Wall(3,15,15)
(DataRod *)(0x11175f0) rBlked at DPSR(4,4,15) by Wall(4,3,15)
(DataRod *)(0x11175f0) rBlked at DSSR(5,4,15) by Wall(5,3,15)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X-----|-G|> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 2, tick tcERS0 (cycle: 0, phase: E, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcERS0, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,12), Slot(3,9,12), Slot(3,10,12), DQSR(3,14,12), Slot(3,15,12), DGSR(3,16,12), Slot(3,17,12), Slot(3,18,12), Slot(3,19,12), DPSR(4,4,12), DPSR(4,5,12), DPSR(4,6,12), DBSR(4,7,12), DPSR(4,8,12), DBSR(4,9,12), DBSR(4,10,12), DBSR(4,11,12), DBSR(4,12,12), DBSR(4,13,12), DPSR(4,14,12), DBSR(4,15,12), DPSR(4,16,12), DBSR(4,17,12), DBSR(4,18,12), DHSR(4,19,12), Slot(4,20,12), Slot(4,21,12), DSSR(5,4,12), DSSR(5,5,12), DSSR(5,6,12), Slot(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620) rBlked at DQSR(3,8,12) by Wall(3,7,12)
(DataRod *)(0x1116620) rBlked at DQSR(3,14,12) by Wall(3,13,12)
(DataRod *)(0x1116620) rBlked at DPSR(4,4,12) by Wall(4,3,12)
(DataRod *)(0x1116620) rBlked at DSSR(5,4,12) by Wall(5,3,12)
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,15), Slot(3,9,15), Slot(3,10,15), DQSR(3,11,15), Slot(3,12,15), Slot(3,13,15), DGSR(3,16,15), Slot(3,17,15), Slot(3,18,15), Slot(3,19,15), DPSR(4,4,15), DPSR(4,5,15), DPSR(4,6,15), DBSR(4,7,15), DPSR(4,8,15), DBSR(4,9,15), DBSR(4,10,15), DPSR(4,11,15), DBSR(4,12,15), DBSR(4,13,15), DBSR(4,14,15), DBSR(4,15,15), DPSR(4,16,15), DBSR(4,17,15), DBSR(4,18,15), DHSR(4,19,15), Slot(4,20,15), Slot(4,21,15), DSSR(5,4,15), DSSR(5,5,15), DSSR(5,6,15), Slot(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) rBlked at DQSR(3,8,15) by Wall(3,7,15)
(DataRod *)(0x11175f0) rBlked at DGSR(3,16,15) by Wall(3,15,15)
(DataRod *)(0x11175f0) rBlked at DPSR(4,4,15) by Wall(4,3,15)
(DataRod *)(0x11175f0) rBlked at DSSR(5,4,15) by Wall(5,3,15)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X-----|-G|> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 3, tick tcELSL (cycle: 0, phase: E, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcELSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LKWU(5,6,11), DSSR(5,6,12), LKWU(5,6,14), DSSR(5,6,15), LHWU(6,6,0), LBWU(6,6,1), LBWU(6,6,2), LBWU(6,6,3), LBWU(6,6,4), LBWU(6,6,5), LBWU(6,6,6), LBWU(6,6,7), LBWU(6,6,8), LBWU(6,6,9), LBWU(6,6,10), LPWU(6,6,11), LBWU(6,6,12), LBWU(6,6,13), LPWU(6,6,14), LBWU(6,6,15), LBWU(6,6,16), LBWU(6,6,17), LBWU(6,6,18), LBWU(6,6,19), LBWU(6,6,20), LBWU(6,6,21), LBWU(6,6,22), LTWU(6,6,23), Slot(6,6,24) } } }
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,11) by Wall(5,6,10)
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,14) by Wall(5,6,13)
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,11), { tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LKWU, area={ DSSR, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSSR(5,6,12), { tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DKSR
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,14), { tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LKWU, area={ DSSR, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSSR(5,6,15), { tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DKSR
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWU(6,6,0), { tcELSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LHWU, area={ LBWU, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,1), { tcELSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LHWU, Wall, Wall } } = LHWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,2), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,3), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,4), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,5), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,6), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,7), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,8), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,9), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,10), { tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,11), { tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,12), { tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, DSSR, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,13), { tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,14), { tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,15), { tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, DSSR, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,16), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,17), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,18), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,19), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,20), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,21), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,22), { tcELSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LTWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWU(6,6,23), { tcELSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LTWU, area={ Slot, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,24), { tcELSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=Slot, area={ Wall, Wall, Wall, LTWU, Wall, Wall } } = LTWL
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X-----|-G|> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 4, tick tcEUEL (cycle: 0, phase: E, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcEUEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x1110240)->{  lockState=lsLckd, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LTSL(0,0,6), LBSL(0,1,6), LBSL(0,2,6), LBSL(0,3,6), LBSL(0,4,6), LBSL(0,5,6), LBSL(0,6,6), LBSL(0,7,6), LBSL(0,8,6), LPSL(0,9,6), LBSL(0,10,6), LBSL(0,11,6), LPSL(0,12,6), LBSL(0,13,6), LBSL(0,14,6), LPSL(0,15,6), LBSL(0,16,6), LBSL(0,17,6), LBSL(0,18,6), LBSL(0,19,6), LBSL(0,20,6), LBSL(0,21,6), LBSL(0,22,6), LBSL(0,23,6), LBSL(0,24,6), LBSL(0,25,6), LHSL(0,26,6), Slot(0,27,6), DKER(1,9,6), Slot(1,10,6), DKER(1,12,6), Slot(1,13,6), DKER(1,15,6), Slot(1,16,6) } } }
(LockRod *)(0x1110240) rBlked by DKER(1,9,6)
(LockRod *)(0x1110240) rBlked by DKER(1,12,6)
(LockRod *)(0x1110240) rBlked by DKER(1,15,6)
(LockRod *)(0x1110240)->AttemptToMove(): At LTSL(0,0,6), { tcEUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LTSL, area={ Wall, LBSL, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,1,6), { tcEUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LTSL, Wall } } = LTSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,2,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,3,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,4,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,5,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,6,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,7,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,8,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,9,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,10,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,11,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,12,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,13,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,14,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,15,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,16,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,17,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,18,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,19,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,20,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,21,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,22,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,23,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,24,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,25,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LHSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LHSL(0,26,6), { tcEUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LHSL, area={ Wall, Slot, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,27,6), { tcEUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, Wall, Wall, LHSL, Wall } } = LHSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,9,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,10,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,12,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,13,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,15,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,16,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^^---G-|-G|> |......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^^-----|-G|> |...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....^^^-Q|-G|--|--------O 15
16 ......^..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 5, tick tcESE0 (cycle: 0, phase: E, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcESE0, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1112360)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,9,4), DSER(1,9,5), DSER(1,9,6), Slot(1,9,7), Slot(1,9,8), DIER(2,9,0), DBER(2,9,1), DBER(2,9,2), DBER(2,9,3), DPER(2,9,4), DPER(2,9,5), DPER(2,9,6), DBER(2,9,7), DBER(2,9,8), DBER(2,9,9), DPER(2,9,10), DBER(2,9,11), DBER(2,9,12), DBER(2,9,13), DPER(2,9,14), DBER(2,9,15), DHER(2,9,16), Slot(2,9,17), Slot(2,9,18), DGER(3,9,10), Slot(3,9,11), Slot(3,9,12), DGER(3,9,14), Slot(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360) rBlked at DSER(1,9,4) by Wall(1,9,3)
(DataRod *)(0x1112360) rBlked at DGER(3,9,10) by Wall(3,9,9)
(DataRod *)(0x1112360) rBlked at DGER(3,9,14) by Wall(3,9,13)
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,4), { tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, DPER } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,8), { tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DBER } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DIER(2,9,0), { tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DIER, area={ DBER, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,1), { tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DIER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,2), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,3), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,4), { tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,5), { tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,7), { tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,8), { tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,9), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,10), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,11), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,12), { tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,13), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,14), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,15), { tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DHER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DHER(2,9,16), { tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DHER, area={ Slot, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,17), { tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DHER, Wall, Wall } } = DHE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,18), { tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGER(3,9,10), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,11), { tcESE0, Wall, Wall, DGER, Slot, Slot, DBER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, DBER, DGER, Wall, Wall } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,12), { tcESE0, DQSR, DBSR, Slot, Slot, Wall, DBER, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Slot, DBER, Slot, DQSR, DBSR } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGER(3,9,14), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,15), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Slot, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,16), { tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DHER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1113560)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,12,4), DSER(1,12,5), DSER(1,12,6), Slot(1,12,7), Slot(1,12,8), DIER(2,12,0), DBER(2,12,1), DBER(2,12,2), DBER(2,12,3), DPER(2,12,4), DPER(2,12,5), DPER(2,12,6), DBER(2,12,7), DBER(2,12,8), DBER(2,12,9), DBER(2,12,10), DBER(2,12,11), DBER(2,12,12), DBER(2,12,13), DPER(2,12,14), DBER(2,12,15), DHER(2,12,16), Slot(2,12,17), Slot(2,12,18), DGER(3,12,14), Slot(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560) rBlked at DSER(1,12,4) by Wall(1,12,3)
(DataRod *)(0x1113560) rBlked at DGER(3,12,14) by Wall(3,12,13)
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,4), { tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, DPER } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,8), { tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DBER } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DIER(2,12,0), { tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DIER, area={ DBER, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,1), { tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DIER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,2), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,3), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,4), { tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,5), { tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,7), { tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,8), { tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,9), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,10), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,11), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,12), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,13), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,14), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,15), { tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DHER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DHER(2,12,16), { tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DHER, area={ Slot, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,17), { tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DHER, Wall, Wall } } = DHE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,18), { tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DGER(3,12,14), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,15), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Slot, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,16), { tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DHER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1114620)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSER(1,15,4), DSER(1,15,5), DSER(1,15,6), Slot(1,15,7), Slot(1,15,8), DPER(2,15,4), DPER(2,15,5), DPER(2,15,6), DBER(2,15,7), DPER(2,15,8), DBER(2,15,9), DBER(2,15,10), DPER(2,15,11), DBER(2,15,12), DBER(2,15,13), DBER(2,15,14), DBER(2,15,15), DBER(2,15,16), DBER(2,15,17), DBER(2,15,18), DBER(2,15,19), DBER(2,15,20), DBER(2,15,21), DBER(2,15,22), DBER(2,15,23), DOER(2,15,24), DQER(3,15,8), Slot(3,15,9), Slot(3,15,10), DGER(3,15,11), Slot(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1114620) rBlked at DSER(1,15,4) by Wall(1,15,3)
(DataRod *)(0x1114620) rBlked at DPER(2,15,4) by Wall(2,15,3)
(DataRod *)(0x1114620) rBlked at DQER(3,15,8) by Wall(3,15,7)
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,4), { tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, DPER } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,8), { tcESE0, Wall, DPER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DPER } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,4), { tcESE0, Wall, Wall, Wall, DPER, DPER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,5), { tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,7), { tcESE0, Wall, Wall, DPER, DBER, DPER, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,8), { tcESE0, Wall, DQER, DBER, DPER, DBER, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Slot, DBER, Wall, DQER } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,9), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,10), { tcESE0, Wall, Slot, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,11), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,12), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,13), { tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,14), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,15), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,16), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,17), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,18), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,19), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,20), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,21), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,22), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,23), { tcESE0, Wall, Wall, DBER, DBER, DOER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DOER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DOER(2,15,24), { tcESE0, Wall, Wall, DBER, DOER, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DOER, area={ Wall, Wall, Wall, DBER, Wall, Wall } } = DOE0
(DataRod *)(0x1114620)->AttemptToMove(): At DQER(3,15,8), { tcESE0, Wall, Wall, Wall, DQER, Slot, DPER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DQER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,9), { tcESE0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, DGNR, DBER, DQER, Slot, DBNR } } = DQE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,10), { tcESE0, Wall, Wall, Slot, Slot, DGER, DBER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ DGER, Wall, DBER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DGER(3,15,11), { tcESE0, Wall, Wall, Slot, DGER, Slot, DPER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,12), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, DGSR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, DGSR, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,13), { tcESE0, Wall, Wall, Slot, Slot, Wall, DBER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DBER, Slot, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^^^---G|--G-0|......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^^^----|--G-0|...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 .... ^^^-Q--G--|--------0 15
16 ......^..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 6, tick tcESE1 (cycle: 0, phase: E, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcESE1, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,9,4), DSE0(1,9,5), DSE0(1,9,6), DSE0(1,9,7), Slot(1,9,8), DIE0(2,9,0), DBE0(2,9,1), DBE0(2,9,2), DBE0(2,9,3), DBE0(2,9,4), DPE0(2,9,5), DPE0(2,9,6), DPE0(2,9,7), DBE0(2,9,8), DBE0(2,9,9), DBE0(2,9,10), DPE0(2,9,11), DBE0(2,9,12), DBE0(2,9,13), DBE0(2,9,14), DPE0(2,9,15), DBE0(2,9,16), DHE0(2,9,17), Slot(2,9,18), Slot(3,9,10), DGE0(3,9,11), Slot(3,9,12), Slot(3,9,14), DGE0(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360) fBlked at DIE0(2,9,0) by input (dsSet0)
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,12,4), DSE0(1,12,5), DSE0(1,12,6), DSE0(1,12,7), Slot(1,12,8), DIE0(2,12,0), DBE0(2,12,1), DBE0(2,12,2), DBE0(2,12,3), DBE0(2,12,4), DPE0(2,12,5), DPE0(2,12,6), DPE0(2,12,7), DBE0(2,12,8), DBE0(2,12,9), DBE0(2,12,10), DBE0(2,12,11), DBE0(2,12,12), DBE0(2,12,13), DBE0(2,12,14), DPE0(2,12,15), DBE0(2,12,16), DHE0(2,12,17), Slot(2,12,18), Slot(3,12,14), DGE0(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560) fBlked at DIE0(2,12,0) by input (dsSet0)
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1114620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,15,4), DSE0(1,15,5), DSE0(1,15,6), DSE0(1,15,7), Slot(1,15,8), Slot(2,15,4), DPE0(2,15,5), DPE0(2,15,6), DPE0(2,15,7), DBE0(2,15,8), DPE0(2,15,9), DBE0(2,15,10), DBE0(2,15,11), DPE0(2,15,12), DBE0(2,15,13), DBE0(2,15,14), DBE0(2,15,15), DBE0(2,15,16), DBE0(2,15,17), DBE0(2,15,18), DBE0(2,15,19), DBE0(2,15,20), DBE0(2,15,21), DBE0(2,15,22), DBE0(2,15,23), DOE0(2,15,24), Slot(3,15,8), DQE0(3,15,9), Slot(3,15,10), Slot(3,15,11), DGE0(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,4), { tcESE1, Wall, Slot, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,5), { tcESE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,6), { tcESE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,7), { tcESE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,8), { tcESE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,4), { tcESE1, Wall, Wall, Wall, Slot, DPE0, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DPE0, Wall, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,5), { tcESE1, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DPE0, Wall, DSE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,6), { tcESE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,7), { tcESE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,8), { tcESE1, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Slot, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,9), { tcESE1, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DQE0 } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,10), { tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,11), { tcESE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,12), { tcESE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,13), { tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,14), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,15), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,16), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,17), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,18), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,19), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,20), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,21), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,22), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,23), { tcESE1, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DOE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DOE0(2,15,24), { tcESE1, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DOE0, area={ Wall, Wall, Wall, DBE0, Wall, Wall } } = DOE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,8), { tcESE1, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DQE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DQE0(3,15,9), { tcESE1, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DQE0, area={ Slot, DGNR, DPE0, Slot, Slot, DBNR } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,10), { tcESE1, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Slot, Wall, DBE0, DQE0, Wall, Wall } } = DQE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,11), { tcESE1, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DGE0, Wall, DBE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DGE0(3,15,12), { tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, DGSR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DGE0, area={ Slot, DGSR, DPE0, Slot, DQSR, DBSR } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,13), { tcESE1, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, DBE0, DGE0, Wall, Wall } } = DGE1
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^^^---G|--G-0|......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^^^----|--G-0|...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  ^^^|Q-|G-|--------1 15
16 ......^..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 7, tick tcELEL (cycle: 0, phase: E, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcELEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x1110240)->{  lockState=lsLckd, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(0,0,6), LTSU(0,1,6), LBSU(0,2,6), LBSU(0,3,6), LBSU(0,4,6), LBSU(0,5,6), LBSU(0,6,6), LBSU(0,7,6), LBSU(0,8,6), LBSU(0,9,6), LPSU(0,10,6), LBSU(0,11,6), LBSU(0,12,6), LPSU(0,13,6), LBSU(0,14,6), LBSU(0,15,6), LPSU(0,16,6), LBSU(0,17,6), LBSU(0,18,6), LBSU(0,19,6), LBSU(0,20,6), LBSU(0,21,6), LBSU(0,22,6), LBSU(0,23,6), LBSU(0,24,6), LBSU(0,25,6), LBSU(0,26,6), LHSU(0,27,6), DSE0(1,9,6), LKSU(1,10,6), DSE0(1,12,6), LKSU(1,13,6), DSE1(1,15,6), LKSU(1,16,6) } } }
(LockRod *)(0x1110240) fBlked at LKSU(1,10,6) by Wall(1,11,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,13,6) by Wall(1,14,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,16,6) by Wall(1,17,6)
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,0,6), { tcELEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=Slot, area={ Wall, LTSU, Wall, Wall, Wall, Wall } } = LTSL
(LockRod *)(0x1110240)->AttemptToMove(): At LTSU(0,1,6), { tcELEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LTSU, area={ Wall, LBSU, Wall, Wall, Slot, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,2,6), { tcELEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LTSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,3,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,4,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,5,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,6,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,7,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,8,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,9,6), { tcELEL, LBSU, DSE0, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE0 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,10,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,11,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,12,6), { tcELEL, LBSU, DSE0, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE0 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,13,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,14,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,15,6), { tcELEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE1 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,16,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,17,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,18,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,19,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,20,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,21,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,22,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,23,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,24,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,25,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,26,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LHSU, Wall, Wall, LBSU, Wall } } = LHSL
(LockRod *)(0x1110240)->AttemptToMove(): At LHSU(0,27,6), { tcELEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LHSU, area={ Wall, Wall, Wall, Wall, LBSU, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE0(1,9,6), { tcELEL, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DKE0
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,10,6), { tcELEL, DSE0, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE0, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE0(1,12,6), { tcELEL, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DKE0
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,13,6), { tcELEL, DSE0, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE0, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE1(1,15,6), { tcELEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE1, area={ DSE1, LKSU, LBSU, Slot, Wall, DPE1 } } = DKE1
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,16,6), { tcELEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE1, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 8, tick tcSUWL (cycle: 0, phase: S, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSUWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(0,0,18), LHNL(0,1,18), LBNL(0,2,18), LBNL(0,3,18), LBNL(0,4,18), LBNL(0,5,18), LBNL(0,6,18), LBNL(0,7,18), LBNL(0,8,18), LBNL(0,9,18), LBNL(0,10,18), LBNL(0,11,18), LBNL(0,12,18), LBNL(0,13,18), LBNL(0,14,18), LBNL(0,15,18), LBNL(0,16,18), LBNL(0,17,18), LPNL(0,18,18), LBNL(0,19,18), LBNL(0,20,18), LBNL(0,21,18), LBNL(0,22,18), LBNL(0,23,18), LBNL(0,24,18), LBNL(0,25,18), LBNL(0,26,18), LTNL(0,27,18), Slot(1,17,18), DKWR(1,18,18) } } }
(LockRod *)(0x11113d0) rBlked by DKWR(1,18,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,0,18), { tcSUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=Slot, area={ Wall, LHNL, Wall, Wall, Wall, Wall } } = LHNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNL(0,1,18), { tcSUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LHNL, area={ Wall, LBNL, Wall, Wall, Slot, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,2,18), { tcSUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LHNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,3,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,4,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,5,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,6,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,7,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,8,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,9,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,10,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,11,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,12,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,13,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,14,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,15,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,16,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,17,18), { tcSUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LPNL, Wall, Wall, LBNL, Slot } } = LPNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNL(0,18,18), { tcSUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LPNL, area={ Wall, LBNL, Wall, Wall, LBNL, DKWR } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,19,18), { tcSUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LPNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,20,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,21,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,22,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,23,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,24,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,25,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,26,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LTNL, Wall, Wall, LBNL, Wall } } = LTNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNL(0,27,18), { tcSUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LTNL, area={ Wall, Wall, Wall, Wall, LBNL, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(1,17,18), { tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=Slot, area={ Wall, DKWR, LBNL, Wall, Wall, Wall } } = LKNU
(LockRod *)(0x11113d0)->AttemptToMove(): At DKWR(1,18,18), { tcSUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=DKWR, area={ DSWR, Wall, LPNL, Slot, Slot, DPWR } } = DSWR
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..v...... 17
18 ......| <|-G|Q-|Q-vvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 9, tick tcSRW1 (cycle: 0, phase: S, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSRW1, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1115750)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), Slot(1,18,17), DSWR(1,18,18), DSWR(1,18,19), DSWR(1,18,20), Slot(2,18,6), Slot(2,18,7), DHWR(2,18,8), DBWR(2,18,9), DBWR(2,18,10), DPWR(2,18,11), DBWR(2,18,12), DPWR(2,18,13), DBWR(2,18,14), DBWR(2,18,15), DPWR(2,18,16), DBWR(2,18,17), DPWR(2,18,18), DPWR(2,18,19), DPWR(2,18,20), Slot(3,18,8), Slot(3,18,9), Slot(3,18,10), DGWR(3,18,11), Slot(3,18,12), DQWR(3,18,13), Slot(3,18,14), Slot(3,18,15), DQWR(3,18,16) } } }
(DataRod *)(0x1115750) rBlked at DSWR(1,18,20) by Wall(1,18,21)
(DataRod *)(0x1115750) rBlked at DPWR(2,18,20) by Wall(2,18,21)
(DataRod *)(0x1115750) rBlked at DQWR(3,18,16) by Wall(3,18,17)
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..v...... 17
18 ......| <|-G|Q-|Q-vvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 10, tick tcSRW0 (cycle: 0, phase: S, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSRW0, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), Slot(1,18,17), DSWR(1,18,18), DSWR(1,18,19), DSWR(1,18,20), Slot(2,18,6), Slot(2,18,7), DHWR(2,18,8), DBWR(2,18,9), DBWR(2,18,10), DPWR(2,18,11), DBWR(2,18,12), DPWR(2,18,13), DBWR(2,18,14), DBWR(2,18,15), DPWR(2,18,16), DBWR(2,18,17), DPWR(2,18,18), DPWR(2,18,19), DPWR(2,18,20), Slot(3,18,8), Slot(3,18,9), Slot(3,18,10), DGWR(3,18,11), Slot(3,18,12), DQWR(3,18,13), Slot(3,18,14), Slot(3,18,15), DQWR(3,18,16) } } }
(DataRod *)(0x1115750) rBlked at DSWR(1,18,20) by Wall(1,18,21)
(DataRod *)(0x1115750) rBlked at DPWR(2,18,20) by Wall(2,18,21)
(DataRod *)(0x1115750) rBlked at DQWR(3,18,16) by Wall(3,18,17)
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..v...... 17
18 ......| <|-G|Q-|Q-vvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 11, tick tcSLWL (cycle: 0, phase: S, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSLWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LHNU(0,0,18), LBNU(0,1,18), LBNU(0,2,18), LBNU(0,3,18), LBNU(0,4,18), LBNU(0,5,18), LBNU(0,6,18), LBNU(0,7,18), LBNU(0,8,18), LBNU(0,9,18), LBNU(0,10,18), LBNU(0,11,18), LBNU(0,12,18), LBNU(0,13,18), LBNU(0,14,18), LBNU(0,15,18), LBNU(0,16,18), LPNU(0,17,18), LBNU(0,18,18), LBNU(0,19,18), LBNU(0,20,18), LBNU(0,21,18), LBNU(0,22,18), LBNU(0,23,18), LBNU(0,24,18), LBNU(0,25,18), LTNU(0,26,18), Slot(0,27,18), LKNU(1,17,18), DSWR(1,18,18) } } }
(LockRod *)(0x11113d0) fBlked at LKNU(1,17,18) by Wall(1,16,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNU(0,0,18), { tcSLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LHNU, area={ Wall, LBNU, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,1,18), { tcSLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LHNU, Wall } } = LHNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,2,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,3,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,4,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,5,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,6,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,7,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,8,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,9,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,10,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,11,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,12,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,13,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,14,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,15,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,16,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LPNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNU(0,17,18), { tcSLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LPNU, area={ Wall, LBNU, Wall, Wall, LBNU, LKNU } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,18,18), { tcSLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LPNU, DSWR } } = LPNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,19,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,20,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,21,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,22,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,23,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,24,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,25,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LTNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNU(0,26,18), { tcSLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LTNU, area={ Wall, Slot, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,27,18), { tcSLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=Slot, area={ Wall, Wall, Wall, Wall, LTNU, Wall } } = LTNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LKNU(1,17,18), { tcSLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LKNU, area={ Wall, DSWR, LPNU, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At DSWR(1,18,18), { tcSLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=DSWR, area={ DSWR, Wall, LBNU, Slot, LKNU, DPWR } } = DKWR
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 12, tick tcSUSL (cycle: 0, phase: S, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSUSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->{  lockState=lsUnlk, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(5,6,11), DKSR(5,6,12), Slot(5,6,14), DKSR(5,6,15), Slot(6,6,0), LHWL(6,6,1), LBWL(6,6,2), LBWL(6,6,3), LBWL(6,6,4), LBWL(6,6,5), LBWL(6,6,6), LBWL(6,6,7), LBWL(6,6,8), LBWL(6,6,9), LBWL(6,6,10), LBWL(6,6,11), LPWL(6,6,12), LBWL(6,6,13), LBWL(6,6,14), LPWL(6,6,15), LBWL(6,6,16), LBWL(6,6,17), LBWL(6,6,18), LBWL(6,6,19), LBWL(6,6,20), LBWL(6,6,21), LBWL(6,6,22), LBWL(6,6,23), LTWL(6,6,24) } } }
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,12)
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,15)
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,11), { tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,12), { tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,14), { tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,15), { tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,0), { tcSUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ LHWL, Wall, Wall, Wall, Wall, Wall } } = LHWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWL(6,6,1), { tcSUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LHWL, area={ LBWL, Wall, Wall, Slot, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,2), { tcSUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LHWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,3), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,4), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,5), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,6), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,7), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,8), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,9), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,10), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,11), { tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,12), { tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,13), { tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,14), { tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,15), { tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,16), { tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,17), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,18), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,19), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,20), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,21), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,22), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,23), { tcSUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LTWL, Wall, Wall, LBWL, Wall, Wall } } = LTWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWL(6,6,24), { tcSUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LTWL, area={ Wall, Wall, Wall, LBWL, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^X^----|--G-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..G..G..|...... 16
17 ......|..|..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..v..v..|...... 19
20 ......|..|.. .. ..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 13, tick tcSSS0 (cycle: 0, phase: S, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSSS0, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,12), Slot(3,9,12), Slot(3,10,12), DQSR(3,14,12), Slot(3,15,12), DGSR(3,16,12), Slot(3,17,12), Slot(3,18,12), Slot(3,19,12), DPSR(4,4,12), DPSR(4,5,12), DPSR(4,6,12), DBSR(4,7,12), DPSR(4,8,12), DBSR(4,9,12), DBSR(4,10,12), DBSR(4,11,12), DBSR(4,12,12), DBSR(4,13,12), DPSR(4,14,12), DBSR(4,15,12), DPSR(4,16,12), DBSR(4,17,12), DBSR(4,18,12), DHSR(4,19,12), Slot(4,20,12), Slot(4,21,12), DSSR(5,4,12), DSSR(5,5,12), DSSR(5,6,12), Slot(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620) rBlked at DQSR(3,8,12) by Wall(3,7,12)
(DataRod *)(0x1116620) rBlked at DQSR(3,14,12) by Wall(3,13,12)
(DataRod *)(0x1116620) rBlked at DPSR(4,4,12) by Wall(4,3,12)
(DataRod *)(0x1116620) rBlked at DSSR(5,4,12) by Wall(5,3,12)
(DataRod *)(0x1116620)->AttemptToMove(): At DQSR(3,8,12), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,9,12), { tcSSS0, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBE0, DGE0, DQSR, DBSR } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,10,12), { tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DBSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQSR(3,14,12), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,15,12), { tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, DGSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DGE1, DGSR, DBE1, Slot, DQSR, DBSR } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At DGSR(3,16,12), { tcSSS0, Slot, DPSR, Wall, DGSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGSR, area={ Wall, Slot, Wall, Wall, Slot, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,17,12), { tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DGSR, DBSR } } = DGS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,18,12), { tcSSS0, Slot, DBSR, DGWR, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DQWR, Slot, DBWR, DGWR, Slot, DBSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DHSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,4,12), { tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, Wall, DSSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,5,12), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,6,12), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,7,12), { tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DPSR, Slot } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,8,12), { tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Slot } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,9,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,10,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,11,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,12,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,13,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,14,12), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,15,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,16,12), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DGSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,17,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,18,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DHSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DHSR(4,19,12), { tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DHSR, area={ Wall, Slot, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,20,12), { tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DHSR, Wall } } = DHS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,21,12), { tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,4,12), { tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,5,12), { tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,6,12), { tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,7,12), { tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,8,12), { tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, DPSR, Wall, Slot, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DQSR(3,8,15), DGE0(3,9,15), Slot(3,10,15), DQSR(3,11,15), DGE0(3,12,15), Slot(3,13,15), DGSR(3,16,15), Slot(3,17,15), Slot(3,18,15), Slot(3,19,15), DPSR(4,4,15), DPSR(4,5,15), DPSR(4,6,15), DBSR(4,7,15), DPSR(4,8,15), DBSR(4,9,15), DBSR(4,10,15), DPSR(4,11,15), DBSR(4,12,15), DBSR(4,13,15), DBSR(4,14,15), DBSR(4,15,15), DPSR(4,16,15), DBSR(4,17,15), DBSR(4,18,15), DHSR(4,19,15), Slot(4,20,15), Slot(4,21,15), DSSR(5,4,15), DSSR(5,5,15), DSSR(5,6,15), Slot(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) rBlked at DQSR(3,8,15) by Wall(3,7,15)
(DataRod *)(0x11175f0) rBlked at DGSR(3,16,15) by Wall(3,15,15)
(DataRod *)(0x11175f0) rBlked at DPSR(4,4,15) by Wall(4,3,15)
(DataRod *)(0x11175f0) rBlked at DSSR(5,4,15) by Wall(5,3,15)
(DataRod *)(0x11175f0)->AttemptToMove(): At DQSR(3,8,15), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, DGE0, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGE0(3,9,15), { tcSSS0, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGE0, area={ Slot, Slot, DPE0, Slot, DQSR, DBSR } } = DJE0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,10,15), { tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, DQSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, DQSR, Wall, Wall, DGE0, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DQSR(3,11,15), { tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, DGE0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, DGE0, Wall, Wall, Slot, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGE0(3,12,15), { tcSSS0, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGE0, area={ Slot, Slot, DPE0, Slot, DQSR, DBSR } } = DJE0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,13,15), { tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, DGE0, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGSR(3,16,15), { tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,17,15), { tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DGSR, DBSR } } = DGS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,18,15), { tcSSS0, Slot, DBSR, Slot, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DQWR, Slot, DBWR, Slot, Slot, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,19,15), { tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DHSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,4,15), { tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, Wall, DSSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,5,15), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,6,15), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,7,15), { tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DPSR, Slot } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,8,15), { tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Slot } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,9,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE0, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, DGE0, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,10,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,11,15), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,12,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE0, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, DGE0, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,13,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,14,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,15,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,16,15), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DGSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,17,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,18,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DHSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DHSR(4,19,15), { tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DHSR, area={ Wall, Slot, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,20,15), { tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DHSR, Wall } } = DHS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,21,15), { tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,4,15), { tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,5,15), { tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,6,15), { tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,7,15), { tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,8,15), { tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, DPSR, Wall, Slot, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....|..|..|......  8
 9 0----^X^---GQ--X-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-QG-|--------1 15
16 ......|..G..|..|..|...... 16
17 ......|..|..G..G..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..0..0..|...... 20
21 >--------X------------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 14, tick tcSSS1 (cycle: 0, phase: S, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSSS1, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,8,12), DQS0(3,9,12), Slot(3,10,12), Slot(3,14,12), DQS0(3,15,12), Slot(3,16,12), DGS0(3,17,12), Slot(3,18,12), Slot(3,19,12), Slot(4,4,12), DPS0(4,5,12), DPS0(4,6,12), DPS0(4,7,12), DBS0(4,8,12), DPS0(4,9,12), DBS0(4,10,12), DBS0(4,11,12), DBS0(4,12,12), DBS0(4,13,12), DBS0(4,14,12), DPS0(4,15,12), DBS0(4,16,12), DPS0(4,17,12), DBS0(4,18,12), DBS0(4,19,12), DHS0(4,20,12), Slot(4,21,12), Slot(5,4,12), DSS0(5,5,12), DSS0(5,6,12), DSS0(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,8,12), { tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,9,12), { tcSSS1, Slot, DPS0, DGE0, DQS0, Wall, DBE0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DQS0, area={ Wall, Slot, DBE0, DGE0, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,10,12), { tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, DQS0, DBS0 } } = DQS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,14,12), { tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,15,12), { tcSSS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DQS0, area={ DGE1, Slot, DBE1, Slot, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,16,12), { tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DGS0, Wall, Wall, DQS0, DBS0 } } = DQS1
(DataRod *)(0x1116620)->AttemptToMove(): At DGS0(3,17,12), { tcSSS1, Slot, DPS0, Wall, DGS0, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DGS0, area={ Wall, Slot, Wall, Wall, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,18,12), { tcSSS1, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ DQWR, Slot, DBWR, DGWR, DGS0, DBS0 } } = DGS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,4,12), { tcSSS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DPS0, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,5,12), { tcSSS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, Slot, DSS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,6,12), { tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, DPS0, DSS0 } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,7,12), { tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, Wall, Wall, DPS0, DSS0 } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,8,12), { tcSSS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Slot } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,9,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,10,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,11,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,12,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,13,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,14,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,15,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,16,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,17,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DGS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,18,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,19,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DHS0, Slot, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DHS0(4,20,12), { tcSSS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DHS0, area={ Wall, Slot, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,21,12), { tcSSS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, DHS0, Wall } } = DHS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,4,12), { tcSSS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DSS0, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,5,12), { tcSSS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, DSS0, DPS0, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,6,12), { tcSSS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DSS1
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,7,12), { tcSSS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, Slot, DPS0, Wall, DSS0, Wall } } = DSS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,8,12), { tcSSS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, DBS0, Wall, DSS0, Wall } } = DSS1
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,8,15), DJE0(3,9,15), Slot(3,10,15), Slot(3,11,15), DJE0(3,12,15), Slot(3,13,15), Slot(3,16,15), DGS0(3,17,15), Slot(3,18,15), Slot(3,19,15), Slot(4,4,15), DPS0(4,5,15), DPS0(4,6,15), DPS0(4,7,15), DBS0(4,8,15), DPS0(4,9,15), DBS0(4,10,15), DBS0(4,11,15), DPS0(4,12,15), DBS0(4,13,15), DBS0(4,14,15), DBS0(4,15,15), DBS0(4,16,15), DPS0(4,17,15), DBS0(4,18,15), DBS0(4,19,15), DHS0(4,20,15), Slot(4,21,15), Slot(5,4,15), DSS0(5,5,15), DSS0(5,6,15), DSS0(5,7,15), Slot(5,8,15) } } }
(LockRod *)(0x11175f0) fBlked by DJE0(3,9,15)
(LockRod *)(0x11175f0) fBlked by DJE0(3,12,15)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 15, tick tcSLSL (cycle: 0, phase: S, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSLSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LKWU(5,6,11), DSS1(5,6,12), LKWU(5,6,14), DSS0(5,6,15), LHWU(6,6,0), LBWU(6,6,1), LBWU(6,6,2), LBWU(6,6,3), LBWU(6,6,4), LBWU(6,6,5), LBWU(6,6,6), LBWU(6,6,7), LBWU(6,6,8), LBWU(6,6,9), LBWU(6,6,10), LPWU(6,6,11), LBWU(6,6,12), LBWU(6,6,13), LPWU(6,6,14), LBWU(6,6,15), LBWU(6,6,16), LBWU(6,6,17), LBWU(6,6,18), LBWU(6,6,19), LBWU(6,6,20), LBWU(6,6,21), LBWU(6,6,22), LTWU(6,6,23), Slot(6,6,24) } } }
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,11) by Wall(5,6,10)
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,14) by Wall(5,6,13)
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,11), { tcSLSL, Wall, LPWU, Wall, LKWU, DSS1, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LKWU, area={ DSS1, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSS1(5,6,12), { tcSLSL, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=DSS1, area={ Wall, DSS1, DPS1, LKWU, Slot, LBWU } } = DKS1
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,14), { tcSLSL, Wall, LPWU, Wall, LKWU, DSS0, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LKWU, area={ DSS0, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSS0(5,6,15), { tcSLSL, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DKS0
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWU(6,6,0), { tcSLSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LHWU, area={ LBWU, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,1), { tcSLSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LHWU, Wall, Wall } } = LHWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,2), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,3), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,4), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,5), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,6), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,7), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,8), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,9), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,10), { tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,11), { tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,12), { tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS1, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, DSS1, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,13), { tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,14), { tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,15), { tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS0, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, DSS0, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,16), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,17), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,18), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,19), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,20), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,21), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,22), { tcSLSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LTWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWU(6,6,23), { tcSLSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LTWU, area={ Slot, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,24), { tcSLSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=Slot, area={ Wall, Wall, Wall, LTWU, Wall, Wall } } = LTWL
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 16, tick tcDUWL (cycle: 0, phase: D, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDUWL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 17, tick tcDRW1 (cycle: 0, phase: D, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDRW1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 18, tick tcDRW0 (cycle: 0, phase: D, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDRW0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 19, tick tcDLWL (cycle: 0, phase: D, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDLWL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 20, tick tcDUSL (cycle: 0, phase: D, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDUSL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 21, tick tcDSS0 (cycle: 0, phase: D, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDSS0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 22, tick tcDSS1 (cycle: 0, phase: D, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDSS1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 23, tick tcDLSL (cycle: 0, phase: D, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDLSL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 24, tick tcWUNL (cycle: 0, phase: W, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWUNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x111a060)->{  lockState=lsLckd, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DKNR(5,21,9), Slot(5,21,10), LTEL(6,21,0), LBEL(6,21,1), LBEL(6,21,2), LBEL(6,21,3), LBEL(6,21,4), LBEL(6,21,5), LBEL(6,21,6), LBEL(6,21,7), LBEL(6,21,8), LPEL(6,21,9), LBEL(6,21,10), LBEL(6,21,11), LBEL(6,21,12), LBEL(6,21,13), LBEL(6,21,14), LBEL(6,21,15), LBEL(6,21,16), LBEL(6,21,17), LBEL(6,21,18), LBEL(6,21,19), LBEL(6,21,20), LBEL(6,21,21), LBEL(6,21,22), LHEL(6,21,23), Slot(6,21,24) } } }
(LockRod *)(0x111a060) rBlked by DKNR(5,21,9)
(LockRod *)(0x111a060)->AttemptToMove(): At DKNR(5,21,9), { tcWUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=DKNR, area={ Slot, DSNR, DPNR, Wall, Slot, LPEL } } = DSNR
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(5,21,10), { tcWUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=Slot, area={ Wall, Wall, Wall, DKNR, Wall, LBEL } } = LKEU
(LockRod *)(0x111a060)->AttemptToMove(): At LTEL(6,21,0), { tcWUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LTEL, area={ LBEL, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,1), { tcWUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LTEL, Wall, Wall } } = LTEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,2), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,3), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,4), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,5), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,6), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,7), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,8), { tcWUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LPEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LPEL(6,21,9), { tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LPEL, area={ LBEL, Wall, DKNR, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,10), { tcWUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Slot, LPEL, Wall, Wall } } = LPEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,11), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,12), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,13), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,14), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,15), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,16), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,17), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,18), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,19), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,20), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,21), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,22), { tcWUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LHEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LHEL(6,21,23), { tcWUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LHEL, area={ Slot, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,24), { tcWUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=Slot, area={ Wall, Wall, Wall, LHEL, Wall, Wall } } = LHEU
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 25, tick tcWRN1 (cycle: 0, phase: W, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWRN1, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1118640)->{ lockState=lsLckd,  dataState=dsRset, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,14,9), Slot(3,15,9), DGNR(3,16,9), Slot(3,17,9), Slot(3,18,9), DQNR(3,19,9), Slot(4,12,9), Slot(4,13,9), DHNR(4,14,9), DBNR(4,15,9), DPNR(4,16,9), DBNR(4,17,9), DBNR(4,18,9), DPNR(4,19,9), DBNR(4,20,9), DPNR(4,21,9), DPNR(4,22,9), DPNR(4,23,9), Slot(5,19,9), Slot(5,20,9), DSNR(5,21,9), DSNR(5,22,9), DSNR(5,23,9) } } }
(DataRod *)(0x1118640) rBlked at DQNR(3,19,9) by Wall(3,20,9)
(DataRod *)(0x1118640) rBlked at DPNR(4,23,9) by Wall(4,24,9)
(DataRod *)(0x1118640) rBlked at DSNR(5,23,9) by Wall(5,24,9)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 26, tick tcWRN0 (cycle: 0, phase: W, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWRN0, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1118640)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,14,9), Slot(3,15,9), DGNR(3,16,9), Slot(3,17,9), Slot(3,18,9), DQNR(3,19,9), Slot(4,12,9), Slot(4,13,9), DHNR(4,14,9), DBNR(4,15,9), DPNR(4,16,9), DBNR(4,17,9), DBNR(4,18,9), DPNR(4,19,9), DBNR(4,20,9), DPNR(4,21,9), DPNR(4,22,9), DPNR(4,23,9), Slot(5,19,9), Slot(5,20,9), DSNR(5,21,9), DSNR(5,22,9), DSNR(5,23,9) } } }
(DataRod *)(0x1118640) rBlked at DQNR(3,19,9) by Wall(3,20,9)
(DataRod *)(0x1118640) rBlked at DPNR(4,23,9) by Wall(4,24,9)
(DataRod *)(0x1118640) rBlked at DSNR(5,23,9) by Wall(5,24,9)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 27, tick tcWLNL (cycle: 0, phase: W, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWLNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x111a060)->{  lockState=lsLckd, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSNR(5,21,9), LKEU(5,21,10), Slot(6,21,0), LTEU(6,21,1), LBEU(6,21,2), LBEU(6,21,3), LBEU(6,21,4), LBEU(6,21,5), LBEU(6,21,6), LBEU(6,21,7), LBEU(6,21,8), LBEU(6,21,9), LPEU(6,21,10), LBEU(6,21,11), LBEU(6,21,12), LBEU(6,21,13), LBEU(6,21,14), LBEU(6,21,15), LBEU(6,21,16), LBEU(6,21,17), LBEU(6,21,18), LBEU(6,21,19), LBEU(6,21,20), LBEU(6,21,21), LBEU(6,21,22), LBEU(6,21,23), LHEU(6,21,24) } } }
(LockRod *)(0x111a060) fBlked at LKEU(5,21,10) by Wall(5,21,11)
(LockRod *)(0x111a060)->AttemptToMove(): At DSNR(5,21,9), { tcWLNL, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=DSNR, area={ LKEU, DSNR, DPNR, Wall, Slot, LBEU } } = DKNR
(LockRod *)(0x111a060)->AttemptToMove(): At LKEU(5,21,10), { tcWLNL, Wall, LPEU, DSNR, LKEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LKEU, area={ Wall, Wall, Wall, DSNR, Wall, LPEU } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,0), { tcWLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=Slot, area={ LTEU, Wall, Wall, Wall, Wall, Wall } } = LTEL
(LockRod *)(0x111a060)->AttemptToMove(): At LTEU(6,21,1), { tcWLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LTEU, area={ LBEU, Wall, Wall, Slot, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,2), { tcWLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LTEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,3), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,4), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,5), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,6), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,7), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,8), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,9), { tcWLNL, Wall, Wall, LBEU, LBEU, LPEU, DSNR, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LPEU, Wall, DSNR, LBEU, Wall, Wall } } = LPEL
(LockRod *)(0x111a060)->AttemptToMove(): At LPEU(6,21,10), { tcWLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LPEU, area={ LBEU, Wall, LKEU, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,11), { tcWLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LPEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,12), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,13), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,14), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,15), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,16), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,17), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,18), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,19), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,20), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,21), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,22), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,23), { tcWLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LHEU, Wall, Wall, LBEU, Wall, Wall } } = LHEL
(LockRod *)(0x111a060)->AttemptToMove(): At LHEU(6,21,24), { tcWLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LHEU, area={ Wall, Wall, Wall, LBEU, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 28, tick tcWUWL (cycle: 0, phase: W, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWUWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->{  lockState=lsUnlk, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(0,0,18), LHNL(0,1,18), LBNL(0,2,18), LBNL(0,3,18), LBNL(0,4,18), LBNL(0,5,18), LBNL(0,6,18), LBNL(0,7,18), LBNL(0,8,18), LBNL(0,9,18), LBNL(0,10,18), LBNL(0,11,18), LBNL(0,12,18), LBNL(0,13,18), LBNL(0,14,18), LBNL(0,15,18), LBNL(0,16,18), LBNL(0,17,18), LPNL(0,18,18), LBNL(0,19,18), LBNL(0,20,18), LBNL(0,21,18), LBNL(0,22,18), LBNL(0,23,18), LBNL(0,24,18), LBNL(0,25,18), LBNL(0,26,18), LTNL(0,27,18), Slot(1,17,18), DKWR(1,18,18) } } }
(LockRod *)(0x11113d0) rBlked by DKWR(1,18,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,0,18), { tcWUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=Slot, area={ Wall, LHNL, Wall, Wall, Wall, Wall } } = LHNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNL(0,1,18), { tcWUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LHNL, area={ Wall, LBNL, Wall, Wall, Slot, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,2,18), { tcWUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LHNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,3,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,4,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,5,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,6,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,7,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,8,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,9,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,10,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,11,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,12,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,13,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,14,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,15,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,16,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,17,18), { tcWUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LPNL, Wall, Wall, LBNL, Slot } } = LPNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNL(0,18,18), { tcWUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LPNL, area={ Wall, LBNL, Wall, Wall, LBNL, DKWR } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,19,18), { tcWUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LPNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,20,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,21,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,22,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,23,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,24,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,25,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,26,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LTNL, Wall, Wall, LBNL, Wall } } = LTNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNL(0,27,18), { tcWUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LTNL, area={ Wall, Wall, Wall, Wall, LBNL, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(1,17,18), { tcWUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=Slot, area={ Wall, DKWR, LBNL, Wall, Wall, Wall } } = LKNU
(LockRod *)(0x11113d0)->AttemptToMove(): At DKWR(1,18,18), { tcWUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=DKWR, area={ DSWR, Wall, LPNL, Slot, Slot, DPWR } } = DSWR
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......| <|-GGQ-|Q-vvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 29, tick tcWSW0 (cycle: 0, phase: W, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWSW0, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), Slot(1,18,17), DSWR(1,18,18), DSWR(1,18,19), DSWR(1,18,20), Slot(2,18,6), Slot(2,18,7), DHWR(2,18,8), DBWR(2,18,9), DBWR(2,18,10), DPWR(2,18,11), DBWR(2,18,12), DPWR(2,18,13), DBWR(2,18,14), DBWR(2,18,15), DPWR(2,18,16), DBWR(2,18,17), DPWR(2,18,18), DPWR(2,18,19), DPWR(2,18,20), Slot(3,18,8), Slot(3,18,9), Slot(3,18,10), DGWR(3,18,11), DGS1(3,18,12), DQWR(3,18,13), Slot(3,18,14), Slot(3,18,15), DQWR(3,18,16) } } }
(DataRod *)(0x1115750) rBlked at DSWR(1,18,20) by Wall(1,18,21)
(DataRod *)(0x1115750) rBlked at DPWR(2,18,20) by Wall(2,18,21)
(DataRod *)(0x1115750) rBlked at DQWR(3,18,16) by Wall(3,18,17)
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,16), { tcWSW0, Wall, DPWR, Wall, Slot, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, Wall, Wall, Wall, DPWR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,17), { tcWSW0, Wall, DBWR, Slot, Slot, DSWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DSWR, Wall, Wall, Slot, Wall, DBWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,18), { tcWSW0, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ DSWR, Wall, LBNU, Slot, LKNU, DPWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,19), { tcWSW0, Wall, DPWR, DSWR, DSWR, DSWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ DSWR, Wall, Wall, DSWR, Wall, DPWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,20), { tcWSW0, Wall, DPWR, DSWR, DSWR, Wall, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ Wall, Wall, Wall, DSWR, Wall, DPWR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,6), { tcWSW0, Wall, Wall, Wall, Slot, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,7), { tcWSW0, Wall, Wall, Slot, Slot, DHWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DHWR, Wall, Wall, Slot, Wall, Wall } } = DHW0
(DataRod *)(0x1115750)->AttemptToMove(): At DHWR(2,18,8), { tcWSW0, Wall, Slot, Slot, DHWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DHWR, area={ DBWR, Wall, Wall, Slot, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,9), { tcWSW0, Wall, Slot, DHWR, DBWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DBWR, Wall, Wall, DHWR, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,10), { tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DBWR, Wall, Slot } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,11), { tcWSW0, Wall, DGWR, DBWR, DPWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Wall, DBWR, Wall, DGWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,12), { tcWSW0, Wall, DGS1, DPWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DPWR, Wall, DGS1 } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,13), { tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Wall, DBWR, Wall, DQWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,14), { tcWSW0, Wall, Slot, DPWR, DBWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DBWR, Wall, Wall, DPWR, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,15), { tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DBWR, Wall, Slot } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,16), { tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Slot, DBWR, Wall, DQWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,17), { tcWSW0, Wall, Wall, DPWR, DBWR, DPWR, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Slot, DPWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,18), { tcWSW0, Wall, Wall, DBWR, DPWR, DPWR, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DPWR, Wall, DSWR, DBWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,19), { tcWSW0, Wall, Wall, DPWR, DPWR, DPWR, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DPWR, Wall, DSWR, DPWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,20), { tcWSW0, Wall, Wall, DPWR, DPWR, Wall, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ Wall, Wall, DSWR, DPWR, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,8), { tcWSW0, Wall, Wall, Wall, Slot, Slot, DHWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, DHWR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,9), { tcWSW0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, DQNR, DBWR, Slot, Slot, DBNR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,10), { tcWSW0, Wall, Wall, Slot, Slot, DGWR, DBWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DGWR, Wall, DBWR, Slot, Wall, Wall } } = DGW0
(DataRod *)(0x1115750)->AttemptToMove(): At DGWR(3,18,11), { tcWSW0, Wall, Wall, Slot, DGWR, DGS1, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DGWR, area={ DGS1, Wall, DPWR, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DGS1(3,18,12), { tcWSW0, Slot, DPS1, DGWR, DGS1, DQWR, DBWR, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DGS1, area={ DQWR, Slot, DBWR, DGWR, Slot, DPS1 } } = DJS1
(DataRod *)(0x1115750)->AttemptToMove(): At DQWR(3,18,13), { tcWSW0, Wall, Wall, DGS1, DQWR, Slot, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DQWR, area={ Slot, Wall, DPWR, DGS1, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,14), { tcWSW0, Wall, Wall, DQWR, Slot, Slot, DBWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, DBWR, DQWR, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,15), { tcWSW0, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DQWR, Slot, DBWR, Slot, DGS0, DBS0 } } = DQW0
(DataRod *)(0x1115750)->AttemptToMove(): At DQWR(3,18,16), { tcWSW0, Wall, Wall, Slot, DQWR, Wall, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DQWR, area={ Wall, Wall, DPWR, Slot, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......|0-|G-X--Q-vvv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 30, tick tcWSW1 (cycle: 0, phase: W, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWSW1, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), DSW0(1,18,17), DSW0(1,18,18), DSW0(1,18,19), Slot(1,18,20), Slot(2,18,6), DHW0(2,18,7), DBW0(2,18,8), DBW0(2,18,9), DPW0(2,18,10), DBW0(2,18,11), DPW0(2,18,12), DBW0(2,18,13), DBW0(2,18,14), DPW0(2,18,15), DBW0(2,18,16), DPW0(2,18,17), DPW0(2,18,18), DPW0(2,18,19), Slot(2,18,20), Slot(3,18,8), Slot(3,18,9), DGW0(3,18,10), Slot(3,18,11), DJS1(3,18,12), Slot(3,18,13), Slot(3,18,14), DQW0(3,18,15), Slot(3,18,16) } } }
(LockRod *)(0x1115750) fBlked by DJS1(3,18,12)
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......|0-|G-X--Q-vvv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 31, tick tcWLWL (cycle: 0, phase: W, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWLWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LHNU(0,0,18), LBNU(0,1,18), LBNU(0,2,18), LBNU(0,3,18), LBNU(0,4,18), LBNU(0,5,18), LBNU(0,6,18), LBNU(0,7,18), LBNU(0,8,18), LBNU(0,9,18), LBNU(0,10,18), LBNU(0,11,18), LBNU(0,12,18), LBNU(0,13,18), LBNU(0,14,18), LBNU(0,15,18), LBNU(0,16,18), LPNU(0,17,18), LBNU(0,18,18), LBNU(0,19,18), LBNU(0,20,18), LBNU(0,21,18), LBNU(0,22,18), LBNU(0,23,18), LBNU(0,24,18), LBNU(0,25,18), LTNU(0,26,18), Slot(0,27,18), LKNU(1,17,18), DSW0(1,18,18) } } }
(LockRod *)(0x11113d0) fBlked at LKNU(1,17,18) by Wall(1,16,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNU(0,0,18), { tcWLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LHNU, area={ Wall, LBNU, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,1,18), { tcWLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LHNU, Wall } } = LHNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,2,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,3,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,4,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,5,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,6,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,7,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,8,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,9,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,10,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,11,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,12,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,13,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,14,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,15,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,16,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LPNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNU(0,17,18), { tcWLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LPNU, area={ Wall, LBNU, Wall, Wall, LBNU, LKNU } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,18,18), { tcWLWL, LPNU, DSW0, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LPNU, DSW0 } } = LPNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,19,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,20,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,21,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,22,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,23,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,24,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,25,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LTNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNU(0,26,18), { tcWLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LTNU, area={ Wall, Slot, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,27,18), { tcWLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=Slot, area={ Wall, Wall, Wall, Wall, LTNU, Wall } } = LTNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LKNU(1,17,18), { tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSW0 }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LKNU, area={ Wall, DSW0, LPNU, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At DSW0(1,18,18), { tcWLWL, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=DSW0, area={ DSW0, Wall, LBNU, DSW0, LKNU, DPW0 } } = DKS0
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^X^----|--X-0|...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 32, tick tcNUEL (cycle: 0, phase: N, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNUEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x1110240)->{  lockState=lsUnlk, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { LTSL(0,0,6), LBSL(0,1,6), LBSL(0,2,6), LBSL(0,3,6), LBSL(0,4,6), LBSL(0,5,6), LBSL(0,6,6), LBSL(0,7,6), LBSL(0,8,6), LPSL(0,9,6), LBSL(0,10,6), LBSL(0,11,6), LPSL(0,12,6), LBSL(0,13,6), LBSL(0,14,6), LPSL(0,15,6), LBSL(0,16,6), LBSL(0,17,6), LBSL(0,18,6), LBSL(0,19,6), LBSL(0,20,6), LBSL(0,21,6), LBSL(0,22,6), LBSL(0,23,6), LBSL(0,24,6), LBSL(0,25,6), LHSL(0,26,6), Slot(0,27,6), DKE0(1,9,6), Slot(1,10,6), DKE0(1,12,6), Slot(1,13,6), DKE1(1,15,6), Slot(1,16,6) } } }
(LockRod *)(0x1110240) rBlked by DKE0(1,9,6)
(LockRod *)(0x1110240) rBlked by DKE0(1,12,6)
(LockRod *)(0x1110240) rBlked by DKE1(1,15,6)
(LockRod *)(0x1110240)->AttemptToMove(): At LTSL(0,0,6), { tcNUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LTSL, area={ Wall, LBSL, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,1,6), { tcNUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LTSL, Wall } } = LTSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,2,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,3,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,4,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,5,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,6,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,7,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,8,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,9,6), { tcNUEL, LBSL, DKE0, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE0 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,10,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,11,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,12,6), { tcNUEL, LBSL, DKE0, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE0 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,13,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,14,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,15,6), { tcNUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE1 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,16,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,17,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,18,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,19,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,20,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,21,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,22,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,23,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,24,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,25,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LHSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LHSL(0,26,6), { tcNUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LHSL, area={ Wall, Slot, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,27,6), { tcNUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, Wall, Wall, LHSL, Wall } } = LHSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE0(1,9,6), { tcNUEL, Wall, DPE0, DSE0, DKE0, DSE0, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE0, area={ DSE0, Slot, LPSL, DSE0, Wall, DPE0 } } = DSE0
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,10,6), { tcNUEL, DKE0, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE0, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE0(1,12,6), { tcNUEL, Wall, DPE0, DSE0, DKE0, DSE0, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE0, area={ DSE0, Slot, LPSL, DSE0, Wall, DPE0 } } = DSE0
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,13,6), { tcNUEL, DKE0, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE0, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE1(1,15,6), { tcNUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE1, area={ DSE1, Slot, LPSL, Slot, Wall, DPE1 } } = DSE1
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,16,6), { tcNUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE1, Wall } } = LKSU
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^^^---G|--X-0|......  9
10 ......^.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^^^----|--X-0|...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  ^^^|Q-|G-|--------1 15
16 ......^..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 33, tick tcNRE1 (cycle: 0, phase: N, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNRE1, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(1,9,4), DSE0(1,9,5), DSE0(1,9,6), DSE0(1,9,7), Slot(1,9,8), DIE0(2,9,0), DBE0(2,9,1), DBE0(2,9,2), DBE0(2,9,3), DBE0(2,9,4), DPE0(2,9,5), DPE0(2,9,6), DPE0(2,9,7), DBE0(2,9,8), DBE0(2,9,9), DBE0(2,9,10), DPE0(2,9,11), DBE0(2,9,12), DBE0(2,9,13), DBE0(2,9,14), DPE0(2,9,15), DBE0(2,9,16), DHE0(2,9,17), Slot(2,9,18), Slot(3,9,10), DGE0(3,9,11), Slot(3,9,12), Slot(3,9,14), DJE0(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,4), { tcNRE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,5), { tcNRE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,6), { tcNRE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,7), { tcNRE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,8), { tcNRE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DIE0(2,9,0), { tcNRE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,1), { tcNRE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,2), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,3), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,4), { tcNRE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,5), { tcNRE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,6), { tcNRE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,7), { tcNRE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,8), { tcNRE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,9), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,10), { tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,11), { tcNRE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,12), { tcNRE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,13), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,14), { tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,15), { tcNRE1, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DJE0 } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,16), { tcNRE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DHE0(2,9,17), { tcNRE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = DHE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,18), { tcNRE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,10), { tcNRE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DGE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGE0(3,9,11), { tcNRE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DGE0, area={ Slot, Wall, DPE0, Slot, Wall, Wall } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,12), { tcNRE1, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1 }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, DQS1, DBE0, DGE0, Slot, DBS1 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,14), { tcNRE1, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DJE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DJE0(3,9,15), { tcNRE1, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DJE0, area={ Slot, Slot, DPE0, Slot, Slot, DPS0 } } = DJE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,16), { tcNRE1, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, DBE0, DJE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(1,12,4), DSE0(1,12,5), DSE0(1,12,6), DSE0(1,12,7), Slot(1,12,8), DIE0(2,12,0), DBE0(2,12,1), DBE0(2,12,2), DBE0(2,12,3), DBE0(2,12,4), DPE0(2,12,5), DPE0(2,12,6), DPE0(2,12,7), DBE0(2,12,8), DBE0(2,12,9), DBE0(2,12,10), DBE0(2,12,11), DBE0(2,12,12), DBE0(2,12,13), DBE0(2,12,14), DPE0(2,12,15), DBE0(2,12,16), DHE0(2,12,17), Slot(2,12,18), Slot(3,12,14), DJE0(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,4), { tcNRE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,5), { tcNRE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,6), { tcNRE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,7), { tcNRE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,8), { tcNRE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DIE0(2,12,0), { tcNRE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,1), { tcNRE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,2), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,3), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,4), { tcNRE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,5), { tcNRE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,6), { tcNRE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,7), { tcNRE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,8), { tcNRE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,9), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,10), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,11), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,12), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,13), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,14), { tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,15), { tcNRE1, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DJE0 } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,16), { tcNRE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DHE0(2,12,17), { tcNRE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = DHE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,18), { tcNRE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,14), { tcNRE1, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DJE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DJE0(3,12,15), { tcNRE1, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DJE0, area={ Slot, Slot, DPE0, Slot, Slot, DPS0 } } = DJE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,16), { tcNRE1, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, DBE0, DJE0, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1114620)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,15,4), Slot(1,15,5), DSE1(1,15,6), DSE1(1,15,7), DSE1(1,15,8), Slot(2,15,4), Slot(2,15,5), DPE1(2,15,6), DPE1(2,15,7), DPE1(2,15,8), DBE1(2,15,9), DPE1(2,15,10), DBE1(2,15,11), DBE1(2,15,12), DPE1(2,15,13), DBE1(2,15,14), DBE1(2,15,15), DBE1(2,15,16), DBE1(2,15,17), DBE1(2,15,18), DBE1(2,15,19), DBE1(2,15,20), DBE1(2,15,21), DBE1(2,15,22), DBE1(2,15,23), DOE1(2,15,24), Slot(3,15,8), Slot(3,15,9), DQE1(3,15,10), Slot(3,15,11), Slot(3,15,12), DGE1(3,15,13) } } }
(DataRod *)(0x1114620) fBlked at DSE1(1,15,8) by Wall(1,15,9)
(DataRod *)(0x1114620) fBlked at DGE1(3,15,13) by Wall(3,15,14)
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,4), { tcNRE1, Wall, Slot, Wall, Slot, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Slot, Wall, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,5), { tcNRE1, Wall, Slot, Slot, Slot, DSE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DSE1, Wall, Wall, Slot, Wall, Slot } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At DSE1(1,15,6), { tcNRE1, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE1, area={ DSE1, LKSU, LBSU, Slot, Wall, DPE1 } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At DSE1(1,15,7), { tcNRE1, Wall, DPE1, DSE1, DSE1, DSE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE1, area={ DSE1, Wall, Wall, DSE1, Wall, DPE1 } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At DSE1(1,15,8), { tcNRE1, Wall, DPE1, DSE1, DSE1, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE1, area={ Wall, Wall, Wall, DSE1, Wall, DPE1 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,4), { tcNRE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Slot, Wall, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,5), { tcNRE1, Wall, Wall, Slot, Slot, DPE1, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DPE1, Wall, Slot, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPE1(2,15,6), { tcNRE1, Wall, Wall, Slot, DPE1, DPE1, DSE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE1, area={ DPE1, Wall, DSE1, Slot, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPE1(2,15,7), { tcNRE1, Wall, Wall, DPE1, DPE1, DPE1, DSE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE1, area={ DPE1, Wall, DSE1, DPE1, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPE1(2,15,8), { tcNRE1, Wall, Slot, DPE1, DPE1, DBE1, DSE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE1, area={ DBE1, Wall, DSE1, DPE1, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,9), { tcNRE1, Wall, Slot, DPE1, DBE1, DPE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DPE1, Wall, Wall, DPE1, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPE1(2,15,10), { tcNRE1, Wall, DQE1, DBE1, DPE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE1, area={ DBE1, Wall, Wall, DBE1, Wall, DQE1 } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,11), { tcNRE1, Wall, Slot, DPE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DPE1, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,12), { tcNRE1, Wall, Slot, DBE1, DBE1, DPE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DPE1, Wall, Wall, DBE1, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPE1(2,15,13), { tcNRE1, Wall, DGE1, DBE1, DPE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE1, area={ DBE1, Wall, Wall, DBE1, Wall, DGE1 } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,14), { tcNRE1, Wall, Wall, DPE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DPE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,15), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,16), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,17), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,18), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,19), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,20), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,21), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,22), { tcNRE1, Wall, Wall, DBE1, DBE1, DBE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DBE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBE1(2,15,23), { tcNRE1, Wall, Wall, DBE1, DBE1, DOE1, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE1, area={ DOE1, Wall, Wall, DBE1, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DOE1(2,15,24), { tcNRE1, Wall, Wall, DBE1, DOE1, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DOE1, area={ Wall, Wall, Wall, DBE1, Wall, Wall } } = DOE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,8), { tcNRE1, Wall, Wall, Wall, Slot, Slot, DPE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Slot, Wall, DPE1, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,9), { tcNRE1, Slot, DBNR, Slot, Slot, DQE1, DBE1, DGNR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DQE1, DGNR, DBE1, Slot, Slot, DBNR } } = DQE0
(DataRod *)(0x1114620)->AttemptToMove(): At DQE1(3,15,10), { tcNRE1, Wall, Wall, Slot, DQE1, Slot, DPE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DQE1, area={ Slot, Wall, DPE1, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,11), { tcNRE1, Wall, Wall, DQE1, Slot, Slot, DBE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Slot, Wall, DBE1, DQE1, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,12), { tcNRE1, Slot, DBS1, Slot, Slot, DGE1, DBE1, DQS1 }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DGE1, DQS1, DBE1, Slot, Slot, DBS1 } } = DGE0
(DataRod *)(0x1114620)->AttemptToMove(): At DGE1(3,15,13), { tcNRE1, Wall, Wall, Slot, DGE1, Wall, DPE1, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DGE1, area={ Wall, Wall, DPE1, Slot, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^^^---G|--X-0|......  9
10 ......^.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 0----^^^----|--X-0|...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 .... ^^^-Q--G--|--------0 15
16 ......^..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 34, tick tcNRE0 (cycle: 0, phase: N, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNRE0, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,9,4), DSE0(1,9,5), DSE0(1,9,6), DSE0(1,9,7), Slot(1,9,8), DIE0(2,9,0), DBE0(2,9,1), DBE0(2,9,2), DBE0(2,9,3), DBE0(2,9,4), DPE0(2,9,5), DPE0(2,9,6), DPE0(2,9,7), DBE0(2,9,8), DBE0(2,9,9), DBE0(2,9,10), DPE0(2,9,11), DBE0(2,9,12), DBE0(2,9,13), DBE0(2,9,14), DPE0(2,9,15), DBE0(2,9,16), DHE0(2,9,17), Slot(2,9,18), Slot(3,9,10), DGE0(3,9,11), Slot(3,9,12), Slot(3,9,14), DJE0(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,4), { tcNRE0, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = DSER
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,5), { tcNRE0, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = DSER
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,6), { tcNRE0, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSER
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,7), { tcNRE0, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,8), { tcNRE0, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DIE0(2,9,0), { tcNRE0, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,1), { tcNRE0, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,2), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,3), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,4), { tcNRE0, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DPER
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,5), { tcNRE0, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DPER
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,6), { tcNRE0, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPER
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,7), { tcNRE0, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,8), { tcNRE0, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,9), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,10), { tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DPER
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,11), { tcNRE0, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,12), { tcNRE0, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,13), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,14), { tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DPER
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,15), { tcNRE0, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DJE0 } } = DBER
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,16), { tcNRE0, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DHER
(DataRod *)(0x1112360)->AttemptToMove(): At DHE0(2,9,17), { tcNRE0, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,18), { tcNRE0, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,10), { tcNRE0, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DGE0, Wall, DBE0, Wall, Wall, Wall } } = DGER
(DataRod *)(0x1112360)->AttemptToMove(): At DGE0(3,9,11), { tcNRE0, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DGE0, area={ Slot, Wall, DPE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,12), { tcNRE0, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1 }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, DQS1, DBE0, DGE0, Slot, DBS1 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,14), { tcNRE0, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DJE0, Wall, DBE0, Wall, Wall, Wall } } = DGER
(DataRod *)(0x1112360)->AttemptToMove(): At DJE0(3,9,15), { tcNRE0, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DJE0, area={ Slot, Slot, DPE0, Slot, Slot, DPS0 } } = DQS0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,16), { tcNRE0, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, DBE0, DJE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,12,4), DSE0(1,12,5), DSE0(1,12,6), DSE0(1,12,7), Slot(1,12,8), DIE0(2,12,0), DBE0(2,12,1), DBE0(2,12,2), DBE0(2,12,3), DBE0(2,12,4), DPE0(2,12,5), DPE0(2,12,6), DPE0(2,12,7), DBE0(2,12,8), DBE0(2,12,9), DBE0(2,12,10), DBE0(2,12,11), DBE0(2,12,12), DBE0(2,12,13), DBE0(2,12,14), DPE0(2,12,15), DBE0(2,12,16), DHE0(2,12,17), Slot(2,12,18), Slot(3,12,14), DJE0(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,4), { tcNRE0, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = DSER
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,5), { tcNRE0, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = DSER
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,6), { tcNRE0, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSER
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,7), { tcNRE0, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,8), { tcNRE0, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DIE0(2,12,0), { tcNRE0, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,1), { tcNRE0, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,2), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,3), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,4), { tcNRE0, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DPER
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,5), { tcNRE0, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DPER
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,6), { tcNRE0, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPER
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,7), { tcNRE0, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,8), { tcNRE0, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,9), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,10), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,11), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,12), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,13), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,14), { tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DPER
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,15), { tcNRE0, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DJE0 } } = DBER
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,16), { tcNRE0, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DHER
(DataRod *)(0x1113560)->AttemptToMove(): At DHE0(2,12,17), { tcNRE0, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,18), { tcNRE0, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,14), { tcNRE0, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DJE0, Wall, DBE0, Wall, Wall, Wall } } = DGER
(DataRod *)(0x1113560)->AttemptToMove(): At DJE0(3,12,15), { tcNRE0, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DJE0, area={ Slot, Slot, DPE0, Slot, Slot, DPS0 } } = DQS0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,16), { tcNRE0, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, DBE0, DJE0, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1114620)->{ lockState=lsUnlk,  dataState=dsSet1, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(1,15,4), DSE0(1,15,5), DSE0(1,15,6), DSE0(1,15,7), Slot(1,15,8), Slot(2,15,4), Slot(2,15,5), DPE0(2,15,6), DPE0(2,15,7), DBE0(2,15,8), DPE0(2,15,9), DBE0(2,15,10), DBE0(2,15,11), DPE0(2,15,12), DBE0(2,15,13), DBE0(2,15,14), DBE0(2,15,15), DBE0(2,15,16), DBE0(2,15,17), DBE0(2,15,18), DBE0(2,15,19), DBE0(2,15,20), DBE0(2,15,21), DBE0(2,15,22), DBE0(2,15,23), DOE0(2,15,24), Slot(3,15,8), DQE0(3,15,9), Slot(3,15,10), Slot(3,15,11), DGE0(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,4), { tcNRE0, Wall, Slot, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, Slot } } = DSER
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,5), { tcNRE0, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, Slot } } = DSER
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,6), { tcNRE0, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSER
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,7), { tcNRE0, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,8), { tcNRE0, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,4), { tcNRE0, Wall, Wall, Wall, Slot, Slot, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Slot, Wall, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,5), { tcNRE0, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DPE0, Wall, DSE0, Slot, Wall, Wall } } = DPER
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,6), { tcNRE0, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DPE0, Wall, DSE0, Slot, Wall, Wall } } = DPER
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,7), { tcNRE0, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,8), { tcNRE0, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Slot, DPE0, Wall, Slot } } = DPER
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,9), { tcNRE0, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DQE0 } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,10), { tcNRE0, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,11), { tcNRE0, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DPER
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,12), { tcNRE0, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,13), { tcNRE0, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,14), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,15), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,16), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,17), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,18), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,19), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,20), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,21), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,22), { tcNRE0, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,23), { tcNRE0, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DBE0, area={ DOE0, Wall, Wall, DBE0, Wall, Wall } } = DBER
(DataRod *)(0x1114620)->AttemptToMove(): At DOE0(2,15,24), { tcNRE0, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DOE0, area={ Wall, Wall, Wall, DBE0, Wall, Wall } } = DOER
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,8), { tcNRE0, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DQE0, Wall, DBE0, Wall, Wall, Wall } } = DQER
(DataRod *)(0x1114620)->AttemptToMove(): At DQE0(3,15,9), { tcNRE0, Slot, DBNR, Slot, DQE0, Slot, DPE0, DGNR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DQE0, area={ Slot, DGNR, DPE0, Slot, Slot, DBNR } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,10), { tcNRE0, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Slot, Wall, DBE0, DQE0, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,11), { tcNRE0, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ DGE0, Wall, DBE0, Slot, Wall, Wall } } = DGER
(DataRod *)(0x1114620)->AttemptToMove(): At DGE0(3,15,12), { tcNRE0, Slot, DBS1, Slot, DGE0, Slot, DPE0, DQS1 }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=DGE0, area={ Slot, DQS1, DPE0, Slot, Slot, DBS1 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,13), { tcNRE0, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE0, self=Slot, area={ Wall, Wall, DBE0, DGE0, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^^---G-|-GQ> |......  9
10 ......^.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^^-----|-GQ> |...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....^^^-Q|-G|--|--------O 15
16 ......^..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 35, tick tcNLEL (cycle: 0, phase: N, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNLEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x1110240)->{  lockState=lsLckd, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(0,0,6), LTSU(0,1,6), LBSU(0,2,6), LBSU(0,3,6), LBSU(0,4,6), LBSU(0,5,6), LBSU(0,6,6), LBSU(0,7,6), LBSU(0,8,6), LBSU(0,9,6), LPSU(0,10,6), LBSU(0,11,6), LBSU(0,12,6), LPSU(0,13,6), LBSU(0,14,6), LBSU(0,15,6), LPSU(0,16,6), LBSU(0,17,6), LBSU(0,18,6), LBSU(0,19,6), LBSU(0,20,6), LBSU(0,21,6), LBSU(0,22,6), LBSU(0,23,6), LBSU(0,24,6), LBSU(0,25,6), LBSU(0,26,6), LHSU(0,27,6), DSER(1,9,6), LKSU(1,10,6), DSER(1,12,6), LKSU(1,13,6), DSER(1,15,6), LKSU(1,16,6) } } }
(LockRod *)(0x1110240) fBlked at LKSU(1,10,6) by Wall(1,11,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,13,6) by Wall(1,14,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,16,6) by Wall(1,17,6)
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,0,6), { tcNLEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=Slot, area={ Wall, LTSU, Wall, Wall, Wall, Wall } } = LTSL
(LockRod *)(0x1110240)->AttemptToMove(): At LTSU(0,1,6), { tcNLEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LTSU, area={ Wall, LBSU, Wall, Wall, Slot, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,2,6), { tcNLEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LTSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,3,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,4,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,5,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,6,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,7,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,8,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,9,6), { tcNLEL, LBSU, DSER, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSER } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,10,6), { tcNLEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,11,6), { tcNLEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,12,6), { tcNLEL, LBSU, DSER, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSER } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,13,6), { tcNLEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,14,6), { tcNLEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,15,6), { tcNLEL, LBSU, DSER, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSER } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,16,6), { tcNLEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,17,6), { tcNLEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,18,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,19,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,20,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,21,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,22,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,23,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,24,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,25,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,26,6), { tcNLEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LBSU, area={ Wall, LHSU, Wall, Wall, LBSU, Wall } } = LHSL
(LockRod *)(0x1110240)->AttemptToMove(): At LHSU(0,27,6), { tcNLEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LHSU, area={ Wall, Wall, Wall, Wall, LBSU, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSER(1,9,6), { tcNLEL, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DKER
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,10,6), { tcNLEL, DSER, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSER, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSER(1,12,6), { tcNLEL, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DKER
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,13,6), { tcNLEL, DSER, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSER, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSER(1,15,6), { tcNLEL, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DKER
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,16,6), { tcNLEL, DSER, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSER, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X-----|-GQ> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 36, tick tcNUNL (cycle: 0, phase: N, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNUNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x111a060)->{  lockState=lsUnlk, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { DKNR(5,21,9), Slot(5,21,10), LTEL(6,21,0), LBEL(6,21,1), LBEL(6,21,2), LBEL(6,21,3), LBEL(6,21,4), LBEL(6,21,5), LBEL(6,21,6), LBEL(6,21,7), LBEL(6,21,8), LPEL(6,21,9), LBEL(6,21,10), LBEL(6,21,11), LBEL(6,21,12), LBEL(6,21,13), LBEL(6,21,14), LBEL(6,21,15), LBEL(6,21,16), LBEL(6,21,17), LBEL(6,21,18), LBEL(6,21,19), LBEL(6,21,20), LBEL(6,21,21), LBEL(6,21,22), LHEL(6,21,23), Slot(6,21,24) } } }
(LockRod *)(0x111a060) rBlked by DKNR(5,21,9)
(LockRod *)(0x111a060)->AttemptToMove(): At DKNR(5,21,9), { tcNUNL, Slot, LPEL, Wall, DKNR, Slot, DPNR, DSNR }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=DKNR, area={ Slot, DSNR, DPNR, Wall, Slot, LPEL } } = DSNR
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(5,21,10), { tcNUNL, Wall, LBEL, DKNR, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=Slot, area={ Wall, Wall, Wall, DKNR, Wall, LBEL } } = LKEU
(LockRod *)(0x111a060)->AttemptToMove(): At LTEL(6,21,0), { tcNUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LTEL, area={ LBEL, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,1), { tcNUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LTEL, Wall, Wall } } = LTEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,2), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,3), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,4), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,5), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,6), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,7), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,8), { tcNUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LPEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LPEL(6,21,9), { tcNUNL, Wall, Wall, LBEL, LPEL, LBEL, DKNR, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LPEL, area={ LBEL, Wall, DKNR, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,10), { tcNUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Slot, LPEL, Wall, Wall } } = LPEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,11), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,12), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,13), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,14), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,15), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,16), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,17), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,18), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,19), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,20), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,21), { tcNUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,22), { tcNUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LBEL, area={ LHEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LHEL(6,21,23), { tcNUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=LHEL, area={ Slot, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,24), { tcNUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUNL, self=Slot, area={ Wall, Wall, Wall, LHEL, Wall, Wall } } = LHEU
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X-----|-GQ> |...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 37, tick tcNSN0 (cycle: 0, phase: N, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNSN0, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1118640)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,14,9), Slot(3,15,9), DGNR(3,16,9), Slot(3,17,9), Slot(3,18,9), DQNR(3,19,9), Slot(4,12,9), Slot(4,13,9), DHNR(4,14,9), DBNR(4,15,9), DPNR(4,16,9), DBNR(4,17,9), DBNR(4,18,9), DPNR(4,19,9), DBNR(4,20,9), DPNR(4,21,9), DPNR(4,22,9), DPNR(4,23,9), Slot(5,19,9), Slot(5,20,9), DSNR(5,21,9), DSNR(5,22,9), DSNR(5,23,9) } } }
(DataRod *)(0x1118640) rBlked at DQNR(3,19,9) by Wall(3,20,9)
(DataRod *)(0x1118640) rBlked at DPNR(4,23,9) by Wall(4,24,9)
(DataRod *)(0x1118640) rBlked at DSNR(5,23,9) by Wall(5,24,9)
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,14,9), { tcNSN0, Wall, DHNR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, Slot, Wall, Wall, Wall, DHNR } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,15,9), { tcNSN0, Slot, DBNR, DQER, Slot, Slot, DBER, DGNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Slot, DGNR, DBER, DQER, Slot, DBNR } } = DGN0
(DataRod *)(0x1118640)->AttemptToMove(): At DGNR(3,16,9), { tcNSN0, Slot, DPNR, Wall, DGNR, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DGNR, area={ Wall, Slot, Wall, Wall, Slot, DPNR } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,17,9), { tcNSN0, DGNR, DBNR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, Slot, Wall, Wall, DGNR, DBNR } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,18,9), { tcNSN0, Slot, DBNR, Slot, Slot, DGW0, DBW0, DQNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ DGW0, DQNR, DBW0, Slot, Slot, DBNR } } = DQN0
(DataRod *)(0x1118640)->AttemptToMove(): At DQNR(3,19,9), { tcNSN0, Slot, DPNR, Wall, DQNR, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DQNR, area={ Wall, Wall, Wall, Wall, Slot, DPNR } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,12,9), { tcNSN0, Wall, Wall, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, Slot, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,13,9), { tcNSN0, Slot, Wall, Wall, Slot, Wall, Wall, DHNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, DHNR, Wall, Wall, Slot, Wall } } = DHN0
(DataRod *)(0x1118640)->AttemptToMove(): At DHNR(4,14,9), { tcNSN0, Slot, Wall, Wall, DHNR, Wall, Slot, DBNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DHNR, area={ Wall, DBNR, Slot, Wall, Slot, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBNR(4,15,9), { tcNSN0, DHNR, Wall, Wall, DBNR, Wall, Slot, DPNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DBNR, area={ Wall, DPNR, Slot, Wall, DHNR, Wall } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPNR(4,16,9), { tcNSN0, DBNR, Wall, Wall, DPNR, Wall, DGNR, DBNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DPNR, area={ Wall, DBNR, DGNR, Wall, DBNR, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBNR(4,17,9), { tcNSN0, DPNR, Wall, Wall, DBNR, Wall, Slot, DBNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DBNR, area={ Wall, DBNR, Slot, Wall, DPNR, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBNR(4,18,9), { tcNSN0, DBNR, Wall, Wall, DBNR, Wall, Slot, DPNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DBNR, area={ Wall, DPNR, Slot, Wall, DBNR, Wall } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPNR(4,19,9), { tcNSN0, DBNR, Slot, Wall, DPNR, Wall, DQNR, DBNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DPNR, area={ Wall, DBNR, DQNR, Wall, DBNR, Slot } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBNR(4,20,9), { tcNSN0, DPNR, Slot, Wall, DBNR, Wall, Wall, DPNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DBNR, area={ Wall, DPNR, Wall, Wall, DPNR, Slot } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPNR(4,21,9), { tcNSN0, DBNR, DSNR, Wall, DPNR, Wall, Wall, DPNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DPNR, area={ Wall, DPNR, Wall, Wall, DBNR, DSNR } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPNR(4,22,9), { tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, DPNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DPNR, area={ Wall, DPNR, Wall, Wall, DPNR, DSNR } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPNR(4,23,9), { tcNSN0, DPNR, DSNR, Wall, DPNR, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DPNR, area={ Wall, Wall, Wall, Wall, DPNR, DSNR } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,19,9), { tcNSN0, Wall, Wall, Wall, Slot, Wall, DPNR, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, Slot, DPNR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,20,9), { tcNSN0, Slot, Wall, Wall, Slot, Wall, DBNR, DSNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=Slot, area={ Wall, DSNR, DBNR, Wall, Slot, Wall } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At DSNR(5,21,9), { tcNSN0, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DSNR, area={ LKEU, DSNR, DPNR, Wall, Slot, LBEU } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At DSNR(5,22,9), { tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, DSNR }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DSNR, area={ Wall, DSNR, DPNR, Wall, DSNR, Wall } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At DSNR(5,23,9), { tcNSN0, DSNR, Wall, Wall, DSNR, Wall, DPNR, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN0, self=DSNR, area={ Wall, Wall, DPNR, Wall, DSNR, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X-----|-GQ> |...... 12
13 ......|..0..|..|..|...... 13
14 ......|..|..|..|..|...... 14
15 ....^^X-QG-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-QG-X--Q-vXv .... 18
19 ......|..|..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 38, tick tcNSN1 (cycle: 0, phase: N, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNSN1, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1118640)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,14,9), DGN0(3,15,9), Slot(3,16,9), Slot(3,17,9), DQN0(3,18,9), Slot(3,19,9), Slot(4,12,9), DHN0(4,13,9), DBN0(4,14,9), DPN0(4,15,9), DBN0(4,16,9), DBN0(4,17,9), DPN0(4,18,9), DBN0(4,19,9), DPN0(4,20,9), DPN0(4,21,9), DPN0(4,22,9), Slot(4,23,9), Slot(5,19,9), DSN0(5,20,9), DSN0(5,21,9), DSN0(5,22,9), Slot(5,23,9) } } }
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,14,9), { tcNSN1, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, DGN0, Wall, Wall, Wall, DBN0 } } = DGN1
(DataRod *)(0x1118640)->AttemptToMove(): At DGN0(3,15,9), { tcNSN1, Slot, DPN0, DQER, DGN0, Slot, DBER, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DGN0, area={ Slot, Slot, DBER, DQER, Slot, DPN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,16,9), { tcNSN1, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, Slot, Wall, Wall, DGN0, DBN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,17,9), { tcNSN1, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, DQN0, Wall, Wall, Slot, DBN0 } } = DQN1
(DataRod *)(0x1118640)->AttemptToMove(): At DQN0(3,18,9), { tcNSN1, Slot, DPN0, Slot, DQN0, DGW0, DBW0, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DQN0, area={ DGW0, Slot, DBW0, Slot, Slot, DPN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,19,9), { tcNSN1, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, Wall, Wall, Wall, DQN0, DBN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,12,9), { tcNSN1, Wall, Wall, Wall, Slot, Wall, Wall, DHN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, DHN0, Wall, Wall, Wall, Wall } } = DHN1
(DataRod *)(0x1118640)->AttemptToMove(): At DHN0(4,13,9), { tcNSN1, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DHN0, area={ Wall, DBN0, Wall, Wall, Slot, Wall } } = DBN1
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,14,9), { tcNSN1, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DBN0, area={ Wall, DPN0, Slot, Wall, DHN0, Wall } } = DPN1
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,15,9), { tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DPN0, area={ Wall, DBN0, DGN0, Wall, DBN0, Wall } } = DBN1
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,16,9), { tcNSN1, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DBN0, area={ Wall, DBN0, Slot, Wall, DPN0, Wall } } = DBN1
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,17,9), { tcNSN1, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DBN0, area={ Wall, DPN0, Slot, Wall, DBN0, Wall } } = DPN1
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,18,9), { tcNSN1, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DPN0, area={ Wall, DBN0, DQN0, Wall, DBN0, Wall } } = DBN1
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,19,9), { tcNSN1, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DBN0, area={ Wall, DPN0, Slot, Wall, DPN0, Slot } } = DPN1
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,20,9), { tcNSN1, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DPN0, area={ Wall, DPN0, Wall, Wall, DBN0, DSN0 } } = DPN1
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,21,9), { tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DPN0, area={ Wall, DPN0, Wall, Wall, DPN0, DSN0 } } = DPN1
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,22,9), { tcNSN1, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DPN0, area={ Wall, Slot, Wall, Wall, DPN0, DSN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,23,9), { tcNSN1, DPN0, Slot, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, Wall, Wall, Wall, DPN0, Slot } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,19,9), { tcNSN1, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, DSN0, DBN0, Wall, Wall, Wall } } = DSN1
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,20,9), { tcNSN1, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DSN0, area={ Wall, DSN0, DPN0, Wall, Slot, Wall } } = DSN1
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,21,9), { tcNSN1, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DSN0, area={ LKEU, DSN0, DPN0, Wall, DSN0, LBEU } } = DSN1
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,22,9), { tcNSN1, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=DSN0, area={ Wall, Slot, DPN0, Wall, DSN0, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,23,9), { tcNSN1, DSN0, Wall, Wall, Slot, Wall, Slot, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNSN1, self=Slot, area={ Wall, Wall, Slot, Wall, DSN0, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 39, tick tcNLNL (cycle: 0, phase: N, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNLNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x111a060)->{  lockState=lsLckd, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSN1(5,21,9), LKEU(5,21,10), Slot(6,21,0), LTEU(6,21,1), LBEU(6,21,2), LBEU(6,21,3), LBEU(6,21,4), LBEU(6,21,5), LBEU(6,21,6), LBEU(6,21,7), LBEU(6,21,8), LBEU(6,21,9), LPEU(6,21,10), LBEU(6,21,11), LBEU(6,21,12), LBEU(6,21,13), LBEU(6,21,14), LBEU(6,21,15), LBEU(6,21,16), LBEU(6,21,17), LBEU(6,21,18), LBEU(6,21,19), LBEU(6,21,20), LBEU(6,21,21), LBEU(6,21,22), LBEU(6,21,23), LHEU(6,21,24) } } }
(LockRod *)(0x111a060) fBlked at LKEU(5,21,10) by Wall(5,21,11)
(LockRod *)(0x111a060)->AttemptToMove(): At DSN1(5,21,9), { tcNLNL, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=DSN1, area={ LKEU, Slot, DPN1, Wall, DSN1, LBEU } } = DKN1
(LockRod *)(0x111a060)->AttemptToMove(): At LKEU(5,21,10), { tcNLNL, Wall, LPEU, DSN1, LKEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LKEU, area={ Wall, Wall, Wall, DSN1, Wall, LPEU } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,0), { tcNLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=Slot, area={ LTEU, Wall, Wall, Wall, Wall, Wall } } = LTEL
(LockRod *)(0x111a060)->AttemptToMove(): At LTEU(6,21,1), { tcNLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LTEU, area={ LBEU, Wall, Wall, Slot, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,2), { tcNLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LTEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,3), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,4), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,5), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,6), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,7), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,8), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,9), { tcNLNL, Wall, Wall, LBEU, LBEU, LPEU, DSN1, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LPEU, Wall, DSN1, LBEU, Wall, Wall } } = LPEL
(LockRod *)(0x111a060)->AttemptToMove(): At LPEU(6,21,10), { tcNLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LPEU, area={ LBEU, Wall, LKEU, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,11), { tcNLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LPEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,12), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,13), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,14), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,15), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,16), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,17), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,18), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,19), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,20), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,21), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,22), { tcNLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,23), { tcNLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LBEU, area={ LHEU, Wall, Wall, LBEU, Wall, Wall } } = LHEL
(LockRod *)(0x111a060)->AttemptToMove(): At LHEU(6,21,24), { tcNLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNLNL, self=LHEU, area={ Wall, Wall, Wall, LBEU, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 40, tick tcUUEL (cycle: 0, phase: U, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcUUEL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 41, tick tcURE1 (cycle: 0, phase: U, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcURE1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 42, tick tcURE0 (cycle: 0, phase: U, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcURE0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 43, tick tcULEL (cycle: 0, phase: U, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcULEL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 44, tick tcUUNL (cycle: 0, phase: U, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcUUNL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 45, tick tcUSN0 (cycle: 0, phase: U, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcUSN0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 46, tick tcUSN1 (cycle: 0, phase: U, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcUSN1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 47, tick tcULNL (cycle: 0, phase: U, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcULNL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 48, tick tcEUSL (cycle: 1, phase: E, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcEUSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->{  lockState=lsUnlk, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(5,6,11), DKS1(5,6,12), Slot(5,6,14), DKS0(5,6,15), Slot(6,6,0), LHWL(6,6,1), LBWL(6,6,2), LBWL(6,6,3), LBWL(6,6,4), LBWL(6,6,5), LBWL(6,6,6), LBWL(6,6,7), LBWL(6,6,8), LBWL(6,6,9), LBWL(6,6,10), LBWL(6,6,11), LPWL(6,6,12), LBWL(6,6,13), LBWL(6,6,14), LPWL(6,6,15), LBWL(6,6,16), LBWL(6,6,17), LBWL(6,6,18), LBWL(6,6,19), LBWL(6,6,20), LBWL(6,6,21), LBWL(6,6,22), LBWL(6,6,23), LTWL(6,6,24) } } }
(LockRod *)(0x11191d0) rBlked by DKS1(5,6,12)
(LockRod *)(0x11191d0) rBlked by DKS0(5,6,15)
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,11), { tcEUSL, Wall, LBWL, Wall, Slot, DKS1, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ DKS1, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKS1(5,6,12), { tcEUSL, Slot, LPWL, Slot, DKS1, Wall, DPS1, DSS1 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=DKS1, area={ Wall, DSS1, DPS1, Slot, Slot, LPWL } } = DSS1
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,14), { tcEUSL, Wall, LBWL, Wall, Slot, DKS0, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ DKS0, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKS0(5,6,15), { tcEUSL, DSS0, LPWL, Slot, DKS0, Wall, DPS0, DSS0 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=DKS0, area={ Wall, DSS0, DPS0, Slot, DSS0, LPWL } } = DSS0
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,0), { tcEUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=Slot, area={ LHWL, Wall, Wall, Wall, Wall, Wall } } = LHWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWL(6,6,1), { tcEUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LHWL, area={ LBWL, Wall, Wall, Slot, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,2), { tcEUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LHWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,3), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,4), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,5), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,6), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,7), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,8), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,9), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,10), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,11), { tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,12), { tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS1, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LPWL, area={ LBWL, Wall, DKS1, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,13), { tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,14), { tcEUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,15), { tcEUSL, Wall, Wall, LBWL, LPWL, LBWL, DKS0, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LPWL, area={ LBWL, Wall, DKS0, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,16), { tcEUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,17), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,18), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,19), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,20), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,21), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,22), { tcEUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,23), { tcEUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LBWL, area={ LTWL, Wall, Wall, LBWL, Wall, Wall } } = LTWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWL(6,6,24), { tcEUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUSL, self=LTWL, area={ Wall, Wall, Wall, LBWL, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 I---^^X---G-|-GQ> |......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 49, tick tcERS1 (cycle: 1, phase: E, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcERS1, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(3,8,12), Slot(3,9,12), DQS1(3,10,12), Slot(3,14,12), Slot(3,15,12), DQS1(3,16,12), Slot(3,17,12), DJS1(3,18,12), Slot(3,19,12), Slot(4,4,12), Slot(4,5,12), DPS1(4,6,12), DPS1(4,7,12), DPS1(4,8,12), DBS1(4,9,12), DPS1(4,10,12), DBS1(4,11,12), DBS1(4,12,12), DBS1(4,13,12), DBS1(4,14,12), DBS1(4,15,12), DPS1(4,16,12), DBS1(4,17,12), DPS1(4,18,12), DBS1(4,19,12), DBS1(4,20,12), DHS1(4,21,12), Slot(5,4,12), Slot(5,5,12), DSS1(5,6,12), DSS1(5,7,12), DSS1(5,8,12) } } }
(DataRod *)(0x1116620) fBlked at DQS1(3,10,12) by Wall(3,11,12)
(DataRod *)(0x1116620) fBlked at DHS1(4,21,12) by Wall(4,22,12)
(DataRod *)(0x1116620) fBlked at DSS1(5,8,12) by Wall(5,9,12)
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,8,12), { tcERS1, Wall, DPS1, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Slot, Wall, Wall, Wall, DPS1 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,9,12), { tcERS1, Slot, DBS1, Slot, Slot, Wall, DBER, DQS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DQS1, DBER, Slot, Slot, DBS1 } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At DQS1(3,10,12), { tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DQS1, area={ Wall, Wall, Wall, Wall, Slot, DPS1 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,14,12), { tcERS1, Wall, DBS1, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Slot, Wall, Wall, Wall, DBS1 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,15,12), { tcERS1, Slot, DBS1, DGER, Slot, Slot, DBER, DQS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Slot, DQS1, DBER, DGER, Slot, DBS1 } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At DQS1(3,16,12), { tcERS1, Slot, DPS1, Wall, DQS1, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DQS1, area={ Wall, Slot, Wall, Wall, Slot, DPS1 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,17,12), { tcERS1, DQS1, DBS1, Wall, Slot, Wall, Wall, DJS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DJS1, Wall, Wall, DQS1, DBS1 } } = DGS0
(DataRod *)(0x1116620)->AttemptToMove(): At DJS1(3,18,12), { tcERS1, Slot, DPS1, Slot, DJS1, Slot, DPW0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DJS1, area={ Slot, Slot, DPW0, Slot, Slot, DPS1 } } = DQW0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcERS1, DJS1, DBS1, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Wall, Wall, Wall, DJS1, DBS1 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,4,12), { tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Slot, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,5,12), { tcERS1, Slot, Slot, Wall, Slot, Wall, Wall, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DPS1, Wall, Wall, Slot, Slot } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,6,12), { tcERS1, Slot, DSS1, Wall, DPS1, Wall, Wall, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DPS1, Wall, Wall, Slot, DSS1 } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,7,12), { tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Wall, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DPS1, Wall, Wall, DPS1, DSS1 } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,8,12), { tcERS1, DPS1, DSS1, Wall, DPS1, Wall, Slot, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DBS1, Slot, Wall, DPS1, DSS1 } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,9,12), { tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DPS1, Slot, Wall, DPS1, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,10,12), { tcERS1, DBS1, Wall, Wall, DPS1, Wall, DQS1, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DBS1, DQS1, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,11,12), { tcERS1, DPS1, Wall, Wall, DBS1, Wall, Wall, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DBS1, Wall, Wall, DPS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,12,12), { tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DBS1, Wall, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,13,12), { tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DBS1, Wall, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,14,12), { tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DBS1, Slot, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,15,12), { tcERS1, DBS1, Wall, Wall, DBS1, Wall, Slot, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DPS1, Slot, Wall, DBS1, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,16,12), { tcERS1, DBS1, Wall, Wall, DPS1, Wall, DQS1, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DBS1, DQS1, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,17,12), { tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DPS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DPS1, Slot, Wall, DPS1, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPS1(4,18,12), { tcERS1, DBS1, Wall, Wall, DPS1, Wall, DJS1, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS1, area={ Wall, DBS1, DJS1, Wall, DBS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,19,12), { tcERS1, DPS1, Wall, Wall, DBS1, Wall, Slot, DBS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DBS1, Slot, Wall, DPS1, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBS1(4,20,12), { tcERS1, DBS1, Wall, Wall, DBS1, Wall, Wall, DHS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS1, area={ Wall, DHS1, Wall, Wall, DBS1, Wall } } = DHS0
(DataRod *)(0x1116620)->AttemptToMove(): At DHS1(4,21,12), { tcERS1, DBS1, Wall, Wall, DHS1, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DHS1, area={ Wall, Wall, Wall, Wall, DBS1, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,4,12), { tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Slot, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,5,12), { tcERS1, Slot, Wall, Wall, Slot, Wall, Slot, DSS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DSS1, Slot, Wall, Slot, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At DSS1(5,6,12), { tcERS1, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS1, area={ Wall, DSS1, DPS1, LKWU, Slot, LBWU } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At DSS1(5,7,12), { tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, DSS1 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS1, area={ Wall, DSS1, DPS1, Wall, DSS1, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At DSS1(5,8,12), { tcERS1, DSS1, Wall, Wall, DSS1, Wall, DPS1, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS1, area={ Wall, Wall, DPS1, Wall, DSS1, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(3,8,15), DQS0(3,9,15), Slot(3,10,15), Slot(3,11,15), DQS0(3,12,15), Slot(3,13,15), Slot(3,16,15), DGS0(3,17,15), DQW0(3,18,15), Slot(3,19,15), Slot(4,4,15), DPS0(4,5,15), DPS0(4,6,15), DPS0(4,7,15), DBS0(4,8,15), DPS0(4,9,15), DBS0(4,10,15), DBS0(4,11,15), DPS0(4,12,15), DBS0(4,13,15), DBS0(4,14,15), DBS0(4,15,15), DBS0(4,16,15), DPS0(4,17,15), DBS0(4,18,15), DBS0(4,19,15), DHS0(4,20,15), Slot(4,21,15), Slot(5,4,15), DSS0(5,5,15), DSS0(5,6,15), DSS0(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) fBlked at DGS0(3,17,15) by DQW0(3,18,15)
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,8,15), { tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DQS0(3,9,15), { tcERS1, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DQS0, area={ Slot, Slot, DBER, DGER, Slot, DPS0 } } = DQS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,10,15), { tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Slot, Wall, Wall, DQS0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,11,15), { tcERS1, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Slot, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DQS0(3,12,15), { tcERS1, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DQS0, area={ Slot, Slot, DBER, DGER, Slot, DPS0 } } = DQS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,13,15), { tcERS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Wall, Wall, Wall, DQS0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,16,15), { tcERS1, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DGS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGS0(3,17,15), { tcERS1, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DGS0, area={ Wall, DQW0, Wall, Wall, Slot, DPS0 } } = DGS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DQW0(3,18,15), { tcERS1, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DQW0, area={ Slot, Slot, DPW0, Slot, DGS0, DBS0 } } = DQW0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,19,15), { tcERS1, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Wall, Wall, Wall, DQW0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,4,15), { tcERS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DPS0, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,5,15), { tcERS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, Slot, DSS0 } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,6,15), { tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, DPS0, DSS0 } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,7,15), { tcERS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DBS0, Wall, Wall, DPS0, DSS0 } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,8,15), { tcERS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Slot } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,9,15), { tcERS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,10,15), { tcERS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,11,15), { tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,12,15), { tcERS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,13,15), { tcERS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,14,15), { tcERS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,15,15), { tcERS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,16,15), { tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,17,15), { tcERS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DPS0, area={ Wall, DBS0, DGS0, Wall, DBS0, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,18,15), { tcERS1, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DBS0, DQW0, Wall, DPS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,19,15), { tcERS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DBS0, area={ Wall, DHS0, Slot, Wall, DBS0, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DHS0(4,20,15), { tcERS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DHS0, area={ Wall, Slot, Wall, Wall, DBS0, Wall } } = DHS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,21,15), { tcERS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Wall, Wall, Wall, DHS0, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,4,15), { tcERS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, DSS0, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,5,15), { tcERS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS0, area={ Wall, DSS0, DPS0, Wall, Slot, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,6,15), { tcERS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,7,15), { tcERS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=DSS0, area={ Wall, Slot, DPS0, Wall, DSS0, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,8,15), { tcERS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS1, self=Slot, area={ Wall, Wall, DBS0, Wall, DSS0, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....|..|..|......  8
 9 I---^^X---G-Q-GQ> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..|..|...... 11
12 I---^^X--1--|-GQ> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....^^X-Q|-GQ--|--------O 15
16 ......|..|..|..|..|...... 16
17 ......|..Q..G..G..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..0..0..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 50, tick tcERS0 (cycle: 1, phase: E, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcERS0, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsSet1, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(3,8,12), DQS0(3,9,12), Slot(3,10,12), Slot(3,14,12), DQS0(3,15,12), Slot(3,16,12), DGS0(3,17,12), DQW0(3,18,12), Slot(3,19,12), Slot(4,4,12), DPS0(4,5,12), DPS0(4,6,12), DPS0(4,7,12), DBS0(4,8,12), DPS0(4,9,12), DBS0(4,10,12), DBS0(4,11,12), DBS0(4,12,12), DBS0(4,13,12), DBS0(4,14,12), DPS0(4,15,12), DBS0(4,16,12), DPS0(4,17,12), DBS0(4,18,12), DBS0(4,19,12), DHS0(4,20,12), Slot(4,21,12), Slot(5,4,12), DSS0(5,5,12), DSS0(5,6,12), DSS0(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620) fBlked at DGS0(3,17,12) by DQW0(3,18,12)
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,8,12), { tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = DQSR
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,9,12), { tcERS0, Slot, DPS0, Slot, DQS0, Wall, DBER, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQS0, area={ Wall, Slot, DBER, Slot, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,10,12), { tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DQS0, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,14,12), { tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = DQSR
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,15,12), { tcERS0, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQS0, area={ Slot, Slot, DBER, DGER, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,16,12), { tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DGS0, Wall, Wall, DQS0, DBS0 } } = DGSR
(DataRod *)(0x1116620)->AttemptToMove(): At DGS0(3,17,12), { tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DGS0, area={ Wall, DQW0, Wall, Wall, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQW0(3,18,12), { tcERS0, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQW0, area={ Slot, Slot, DPW0, Slot, DGS0, DBS0 } } = DQW0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcERS0, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DQW0, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,4,12), { tcERS0, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DPS0, Wall, Wall, Wall, Slot } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,5,12), { tcERS0, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DPS0, Wall, Wall, Slot, DSS0 } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,6,12), { tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DPS0, Wall, Wall, DPS0, DSS0 } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,7,12), { tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, Wall, Wall, DPS0, DSS0 } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,8,12), { tcERS0, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Slot } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,9,12), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,10,12), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,11,12), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,12,12), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,13,12), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,14,12), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,15,12), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,16,12), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Wall } } = DPSR
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,17,12), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DGS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,18,12), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, DQW0, Wall, DPS0, Wall } } = DBSR
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,19,12), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DHS0, Slot, Wall, DBS0, Wall } } = DHSR
(DataRod *)(0x1116620)->AttemptToMove(): At DHS0(4,20,12), { tcERS0, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DHS0, area={ Wall, Slot, Wall, Wall, DBS0, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,21,12), { tcERS0, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DHS0, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,4,12), { tcERS0, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DSS0, Slot, Wall, Wall, Wall } } = DSSR
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,5,12), { tcERS0, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, DSS0, DPS0, Wall, Slot, Wall } } = DSSR
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,6,12), { tcERS0, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DSSR
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,7,12), { tcERS0, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, Slot, DPS0, Wall, DSS0, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,8,12), { tcERS0, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, DBS0, Wall, DSS0, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(3,8,15), DQS0(3,9,15), Slot(3,10,15), Slot(3,11,15), DQS0(3,12,15), Slot(3,13,15), Slot(3,16,15), DGS0(3,17,15), DQW0(3,18,15), Slot(3,19,15), Slot(4,4,15), DPS0(4,5,15), DPS0(4,6,15), DPS0(4,7,15), DBS0(4,8,15), DPS0(4,9,15), DBS0(4,10,15), DBS0(4,11,15), DPS0(4,12,15), DBS0(4,13,15), DBS0(4,14,15), DBS0(4,15,15), DBS0(4,16,15), DPS0(4,17,15), DBS0(4,18,15), DBS0(4,19,15), DHS0(4,20,15), Slot(4,21,15), Slot(5,4,15), DSS0(5,5,15), DSS0(5,6,15), DSS0(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) fBlked at DGS0(3,17,15) by DQW0(3,18,15)
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,8,15), { tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = DQSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DQS0(3,9,15), { tcERS0, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQS0, area={ Slot, Slot, DBER, DGER, Slot, DPS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,10,15), { tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Slot, Wall, Wall, DQS0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,11,15), { tcERS0, Slot, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DQS0, Wall, Wall, Slot, DBS0 } } = DQSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DQS0(3,12,15), { tcERS0, Slot, DPS0, DGER, DQS0, Slot, DBER, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQS0, area={ Slot, Slot, DBER, DGER, Slot, DPS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,13,15), { tcERS0, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DQS0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,16,15), { tcERS0, Wall, DBS0, Wall, Slot, Wall, Wall, DGS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DGS0, Wall, Wall, Wall, DBS0 } } = DGSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DGS0(3,17,15), { tcERS0, Slot, DPS0, Wall, DGS0, Wall, Wall, DQW0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DGS0, area={ Wall, DQW0, Wall, Wall, Slot, DPS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DQW0(3,18,15), { tcERS0, DGS0, DBS0, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DQW0, area={ Slot, Slot, DPW0, Slot, DGS0, DBS0 } } = DQW0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,19,15), { tcERS0, DQW0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DQW0, DBS0 } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,4,15), { tcERS0, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DPS0, Wall, Wall, Wall, Slot } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,5,15), { tcERS0, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DPS0, Wall, Wall, Slot, DSS0 } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,6,15), { tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DPS0, Wall, Wall, DPS0, DSS0 } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,7,15), { tcERS0, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, Wall, Wall, DPS0, DSS0 } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,8,15), { tcERS0, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Slot } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,9,15), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,10,15), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,11,15), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,12,15), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,13,15), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,14,15), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,15,15), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,16,15), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DPSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DPS0(4,17,15), { tcERS0, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DPS0, area={ Wall, DBS0, DGS0, Wall, DBS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,18,15), { tcERS0, DPS0, Wall, Wall, DBS0, Wall, DQW0, DBS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DBS0, DQW0, Wall, DPS0, Wall } } = DBSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DBS0(4,19,15), { tcERS0, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DBS0, area={ Wall, DHS0, Slot, Wall, DBS0, Wall } } = DHSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DHS0(4,20,15), { tcERS0, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DHS0, area={ Wall, Slot, Wall, Wall, DBS0, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,21,15), { tcERS0, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, Wall, Wall, DHS0, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,4,15), { tcERS0, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, DSS0, Slot, Wall, Wall, Wall } } = DSSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,5,15), { tcERS0, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, DSS0, DPS0, Wall, Slot, Wall } } = DSSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,6,15), { tcERS0, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DSSR
(DataRod *)(0x11175f0)->AttemptToMove(): At DSS0(5,7,15), { tcERS0, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=DSS0, area={ Wall, Slot, DPS0, Wall, DSS0, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,8,15), { tcERS0, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcERS0, self=Slot, area={ Wall, Wall, DBS0, Wall, DSS0, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X--1--|-G|> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 51, tick tcELSL (cycle: 1, phase: E, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcELSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LKWU(5,6,11), DSSR(5,6,12), LKWU(5,6,14), DSSR(5,6,15), LHWU(6,6,0), LBWU(6,6,1), LBWU(6,6,2), LBWU(6,6,3), LBWU(6,6,4), LBWU(6,6,5), LBWU(6,6,6), LBWU(6,6,7), LBWU(6,6,8), LBWU(6,6,9), LBWU(6,6,10), LPWU(6,6,11), LBWU(6,6,12), LBWU(6,6,13), LPWU(6,6,14), LBWU(6,6,15), LBWU(6,6,16), LBWU(6,6,17), LBWU(6,6,18), LBWU(6,6,19), LBWU(6,6,20), LBWU(6,6,21), LBWU(6,6,22), LTWU(6,6,23), Slot(6,6,24) } } }
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,11) by Wall(5,6,10)
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,14) by Wall(5,6,13)
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,11), { tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LKWU, area={ DSSR, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSSR(5,6,12), { tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DKSR
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,14), { tcELSL, Wall, LPWU, Wall, LKWU, DSSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LKWU, area={ DSSR, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSSR(5,6,15), { tcELSL, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DKSR
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWU(6,6,0), { tcELSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LHWU, area={ LBWU, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,1), { tcELSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LHWU, Wall, Wall } } = LHWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,2), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,3), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,4), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,5), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,6), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,7), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,8), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,9), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,10), { tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,11), { tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,12), { tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, DSSR, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,13), { tcELSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,14), { tcELSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,15), { tcELSL, Wall, Wall, LPWU, LBWU, LBWU, DSSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, DSSR, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,16), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,17), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,18), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,19), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,20), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,21), { tcELSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,22), { tcELSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LBWU, area={ LTWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWU(6,6,23), { tcELSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=LTWU, area={ Slot, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,24), { tcELSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELSL, self=Slot, area={ Wall, Wall, Wall, LTWU, Wall, Wall } } = LTWL
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^X---G-|-G|> |......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^X--1--|-G|> |...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....^^X-Q|-G|--|--------O 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 52, tick tcEUEL (cycle: 1, phase: E, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcEUEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x1110240)->{  lockState=lsUnlk, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { LTSL(0,0,6), LBSL(0,1,6), LBSL(0,2,6), LBSL(0,3,6), LBSL(0,4,6), LBSL(0,5,6), LBSL(0,6,6), LBSL(0,7,6), LBSL(0,8,6), LPSL(0,9,6), LBSL(0,10,6), LBSL(0,11,6), LPSL(0,12,6), LBSL(0,13,6), LBSL(0,14,6), LPSL(0,15,6), LBSL(0,16,6), LBSL(0,17,6), LBSL(0,18,6), LBSL(0,19,6), LBSL(0,20,6), LBSL(0,21,6), LBSL(0,22,6), LBSL(0,23,6), LBSL(0,24,6), LBSL(0,25,6), LHSL(0,26,6), Slot(0,27,6), DKER(1,9,6), Slot(1,10,6), DKER(1,12,6), Slot(1,13,6), DKER(1,15,6), Slot(1,16,6) } } }
(LockRod *)(0x1110240) rBlked by DKER(1,9,6)
(LockRod *)(0x1110240) rBlked by DKER(1,12,6)
(LockRod *)(0x1110240) rBlked by DKER(1,15,6)
(LockRod *)(0x1110240)->AttemptToMove(): At LTSL(0,0,6), { tcEUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LTSL, area={ Wall, LBSL, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,1,6), { tcEUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LTSL, Wall } } = LTSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,2,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,3,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,4,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,5,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,6,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,7,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,8,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,9,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,10,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,11,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,12,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,13,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,14,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,15,6), { tcEUEL, LBSL, DKER, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKER } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,16,6), { tcEUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,17,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,18,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,19,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,20,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,21,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,22,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,23,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,24,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,25,6), { tcEUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LBSL, area={ Wall, LHSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LHSL(0,26,6), { tcEUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=LHSL, area={ Wall, Slot, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,27,6), { tcEUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, Wall, Wall, LHSL, Wall } } = LHSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,9,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,10,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,12,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,13,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKER(1,15,6), { tcEUEL, Wall, DPER, DSER, DKER, Slot, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=DKER, area={ Slot, Slot, LPSL, DSER, Wall, DPER } } = DSER
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,16,6), { tcEUEL, DKER, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcEUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKER, Wall } } = LKSU
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 I---^^^---G-|-G|> |......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 I---^^^--1--|-G|> |...... 12
13 ......^..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....^^^-Q|-G|--|--------O 15
16 ......^..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 53, tick tcESE0 (cycle: 1, phase: E, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcESE0, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { DSER(1,9,4), DSER(1,9,5), DSER(1,9,6), Slot(1,9,7), Slot(1,9,8), DIER(2,9,0), DBER(2,9,1), DBER(2,9,2), DBER(2,9,3), DPER(2,9,4), DPER(2,9,5), DPER(2,9,6), DBER(2,9,7), DBER(2,9,8), DBER(2,9,9), DPER(2,9,10), DBER(2,9,11), DBER(2,9,12), DBER(2,9,13), DPER(2,9,14), DBER(2,9,15), DHER(2,9,16), Slot(2,9,17), Slot(2,9,18), DGER(3,9,10), Slot(3,9,11), Slot(3,9,12), DGER(3,9,14), Slot(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360) rBlked at DSER(1,9,4) by Wall(1,9,3)
(DataRod *)(0x1112360) rBlked at DGER(3,9,10) by Wall(3,9,9)
(DataRod *)(0x1112360) rBlked at DGER(3,9,14) by Wall(3,9,13)
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,4), { tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, DPER } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSER(1,9,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,8), { tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DBER } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DIER(2,9,0), { tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DIER, area={ DBER, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,1), { tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DIER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,2), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,3), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,4), { tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,5), { tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,7), { tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,8), { tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,9), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,10), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,11), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,12), { tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,13), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPER(2,9,14), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBER(2,9,15), { tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DHER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DHER(2,9,16), { tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DHER, area={ Slot, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,17), { tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DHER, Wall, Wall } } = DHE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,18), { tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGER(3,9,10), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,11), { tcESE0, Wall, Wall, DGER, Slot, Slot, DBER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, DBER, DGER, Wall, Wall } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,12), { tcESE0, DQSR, DBSR, Slot, Slot, Wall, DBER, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Slot, DBER, Slot, DQSR, DBSR } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGER(3,9,14), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,15), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Slot, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,16), { tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DHER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { DSER(1,12,4), DSER(1,12,5), DSER(1,12,6), Slot(1,12,7), Slot(1,12,8), DIER(2,12,0), DBER(2,12,1), DBER(2,12,2), DBER(2,12,3), DPER(2,12,4), DPER(2,12,5), DPER(2,12,6), DBER(2,12,7), DBER(2,12,8), DBER(2,12,9), DBER(2,12,10), DBER(2,12,11), DBER(2,12,12), DBER(2,12,13), DPER(2,12,14), DBER(2,12,15), DHER(2,12,16), Slot(2,12,17), Slot(2,12,18), DGER(3,12,14), Slot(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560) rBlked at DSER(1,12,4) by Wall(1,12,3)
(DataRod *)(0x1113560) rBlked at DGER(3,12,14) by Wall(3,12,13)
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,4), { tcESE0, Wall, DPER, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, DPER } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At DSER(1,12,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,8), { tcESE0, Wall, DBER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DBER } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DIER(2,12,0), { tcESE0, Wall, Wall, Wall, DIER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DIER, area={ DBER, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,1), { tcESE0, Wall, Wall, DIER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DIER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,2), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,3), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,4), { tcESE0, Wall, Wall, DBER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,5), { tcESE0, Wall, Wall, DPER, DPER, DPER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,7), { tcESE0, Wall, Wall, DPER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,8), { tcESE0, Wall, Wall, DBER, DBER, DBER, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Slot, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,9), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,10), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,11), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,12), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,13), { tcESE0, Wall, Wall, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DPER(2,12,14), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At DBER(2,12,15), { tcESE0, Wall, Slot, DPER, DBER, DHER, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DHER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1113560)->AttemptToMove(): At DHER(2,12,16), { tcESE0, Wall, Slot, DBER, DHER, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DHER, area={ Slot, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,17), { tcESE0, Wall, Wall, DHER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DHER, Wall, Wall } } = DHE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,18), { tcESE0, Wall, Wall, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DGER(3,12,14), { tcESE0, Wall, Wall, Wall, DGER, Slot, DPER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,15), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, Slot }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Slot, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,16), { tcESE0, Wall, Wall, Slot, Slot, Wall, DHER, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DHER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1114620)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { DSER(1,15,4), DSER(1,15,5), DSER(1,15,6), Slot(1,15,7), Slot(1,15,8), Slot(2,15,4), DPER(2,15,5), DPER(2,15,6), DBER(2,15,7), DPER(2,15,8), DBER(2,15,9), DBER(2,15,10), DPER(2,15,11), DBER(2,15,12), DBER(2,15,13), DBER(2,15,14), DBER(2,15,15), DBER(2,15,16), DBER(2,15,17), DBER(2,15,18), DBER(2,15,19), DBER(2,15,20), DBER(2,15,21), DBER(2,15,22), DBER(2,15,23), DOER(2,15,24), DQER(3,15,8), Slot(3,15,9), Slot(3,15,10), DGER(3,15,11), Slot(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1114620) rBlked at DSER(1,15,4) by Wall(1,15,3)
(DataRod *)(0x1114620) rBlked at DQER(3,15,8) by Wall(3,15,7)
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,4), { tcESE0, Wall, Slot, Wall, DSER, DSER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,5), { tcESE0, Wall, DPER, DSER, DSER, DSER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ DSER, Wall, Wall, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At DSER(1,15,6), { tcESE0, Wall, DPER, DSER, DSER, Slot, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DSER, area={ Slot, LKSU, LBSU, DSER, Wall, DPER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,7), { tcESE0, Wall, DBER, DSER, Slot, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Wall, Wall, DSER, Wall, DBER } } = DSE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,8), { tcESE0, Wall, DPER, Slot, Slot, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, Wall, Slot, Wall, DPER } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,4), { tcESE0, Wall, Wall, Wall, Slot, DPER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ DPER, Wall, DSER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,5), { tcESE0, Wall, Wall, Slot, DPER, DPER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DPER, Wall, DSER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,6), { tcESE0, Wall, Wall, DPER, DPER, DBER, DSER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, DSER, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,7), { tcESE0, Wall, Wall, DPER, DBER, DPER, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Slot, DPER, Wall, Wall } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,8), { tcESE0, Wall, DQER, DBER, DPER, DBER, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Slot, DBER, Wall, DQER } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,9), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,10), { tcESE0, Wall, Slot, DBER, DBER, DPER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DPER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DPER(2,15,11), { tcESE0, Wall, DGER, DBER, DPER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DPER, area={ DBER, Wall, Wall, DBER, Wall, DGER } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,12), { tcESE0, Wall, Slot, DPER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DPER, Wall, Slot } } = DPE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,13), { tcESE0, Wall, Slot, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Slot } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,14), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,15), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,16), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,17), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,18), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,19), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,20), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,21), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,22), { tcESE0, Wall, Wall, DBER, DBER, DBER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DBER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DBER(2,15,23), { tcESE0, Wall, Wall, DBER, DBER, DOER, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DBER, area={ DOER, Wall, Wall, DBER, Wall, Wall } } = DBE0
(DataRod *)(0x1114620)->AttemptToMove(): At DOER(2,15,24), { tcESE0, Wall, Wall, DBER, DOER, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DOER, area={ Wall, Wall, Wall, DBER, Wall, Wall } } = DOE0
(DataRod *)(0x1114620)->AttemptToMove(): At DQER(3,15,8), { tcESE0, Wall, Wall, Wall, DQER, Slot, DPER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DQER, area={ Slot, Wall, DPER, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,9), { tcESE0, DGN1, DBN1, DQER, Slot, Slot, DBER, Slot }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, Slot, DBER, DQER, DGN1, DBN1 } } = DQE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,10), { tcESE0, Wall, Wall, Slot, Slot, DGER, DBER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ DGER, Wall, DBER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DGER(3,15,11), { tcESE0, Wall, Wall, Slot, DGER, Slot, DPER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=DGER, area={ Slot, Wall, DPER, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,12), { tcESE0, DQSR, DBSR, DGER, Slot, Slot, DBER, DGSR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Slot, DGSR, DBER, DGER, DQSR, DBSR } } = DGE0
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,13), { tcESE0, Wall, Wall, Slot, Slot, Wall, DBER, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE0, self=Slot, area={ Wall, Wall, DBER, Slot, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^^^---G|--G-0|......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 0----^^^-1--|--G-0|...... 12
13 ......^..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 .... ^^^-Q--G--|--------0 15
16 ......^..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 54, tick tcESE1 (cycle: 1, phase: E, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcESE1, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,9,4), DSE0(1,9,5), DSE0(1,9,6), DSE0(1,9,7), Slot(1,9,8), DIE0(2,9,0), DBE0(2,9,1), DBE0(2,9,2), DBE0(2,9,3), DBE0(2,9,4), DPE0(2,9,5), DPE0(2,9,6), DPE0(2,9,7), DBE0(2,9,8), DBE0(2,9,9), DBE0(2,9,10), DPE0(2,9,11), DBE0(2,9,12), DBE0(2,9,13), DBE0(2,9,14), DPE0(2,9,15), DBE0(2,9,16), DHE0(2,9,17), Slot(2,9,18), Slot(3,9,10), DGE0(3,9,11), Slot(3,9,12), Slot(3,9,14), DGE0(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360) fBlked at DIE0(2,9,0) by input (dsSet0)
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,12,4), DSE0(1,12,5), DSE0(1,12,6), DSE0(1,12,7), Slot(1,12,8), DIE0(2,12,0), DBE0(2,12,1), DBE0(2,12,2), DBE0(2,12,3), DBE0(2,12,4), DPE0(2,12,5), DPE0(2,12,6), DPE0(2,12,7), DBE0(2,12,8), DBE0(2,12,9), DBE0(2,12,10), DBE0(2,12,11), DBE0(2,12,12), DBE0(2,12,13), DBE0(2,12,14), DPE0(2,12,15), DBE0(2,12,16), DHE0(2,12,17), Slot(2,12,18), Slot(3,12,14), DGE0(3,12,15), Slot(3,12,16) } } }
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,4), { tcESE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,5), { tcESE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,6), { tcESE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1113560)->AttemptToMove(): At DSE0(1,12,7), { tcESE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(1,12,8), { tcESE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = DSE1
(DataRod *)(0x1113560)->AttemptToMove(): At DIE0(2,12,0), { tcESE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,1), { tcESE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,2), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,3), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,4), { tcESE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,5), { tcESE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,6), { tcESE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,7), { tcESE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,8), { tcESE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,9), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,10), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,11), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,12), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,13), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,14), { tcESE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DPE0(2,12,15), { tcESE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At DBE0(2,12,16), { tcESE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1113560)->AttemptToMove(): At DHE0(2,12,17), { tcESE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(2,12,18), { tcESE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = DHE1
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,14), { tcESE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DGE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At DGE0(3,12,15), { tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DGE0, area={ Slot, Slot, DPE0, Slot, DQSR, DBSR } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): At Slot(3,12,16), { tcESE1, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1113560)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, DBE0, DGE0, Wall, Wall } } = DGE1
(DataRod *)(0x1114620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1114620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1114620)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,15,4), DSE0(1,15,5), DSE0(1,15,6), DSE0(1,15,7), Slot(1,15,8), Slot(2,15,4), Slot(2,15,5), DPE0(2,15,6), DPE0(2,15,7), DBE0(2,15,8), DPE0(2,15,9), DBE0(2,15,10), DBE0(2,15,11), DPE0(2,15,12), DBE0(2,15,13), DBE0(2,15,14), DBE0(2,15,15), DBE0(2,15,16), DBE0(2,15,17), DBE0(2,15,18), DBE0(2,15,19), DBE0(2,15,20), DBE0(2,15,21), DBE0(2,15,22), DBE0(2,15,23), DOE0(2,15,24), Slot(3,15,8), DQE0(3,15,9), Slot(3,15,10), Slot(3,15,11), DGE0(3,15,12), Slot(3,15,13) } } }
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,4), { tcESE1, Wall, Slot, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,5), { tcESE1, Wall, Slot, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, Slot } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,6), { tcESE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At DSE0(1,15,7), { tcESE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(1,15,8), { tcESE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = DSE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,4), { tcESE1, Wall, Wall, Wall, Slot, Slot, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Slot, Wall, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(2,15,5), { tcESE1, Wall, Wall, Slot, Slot, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DPE0, Wall, DSE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,6), { tcESE1, Wall, Wall, Slot, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DPE0, Wall, DSE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,7), { tcESE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,8), { tcESE1, Wall, Slot, DPE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Slot, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,9), { tcESE1, Wall, DQE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DQE0 } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,10), { tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,11), { tcESE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DPE0(2,15,12), { tcESE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,13), { tcESE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DPE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,14), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,15), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,16), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,17), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,18), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,19), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,20), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,21), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,22), { tcESE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DBE0(2,15,23), { tcESE1, Wall, Wall, DBE0, DBE0, DOE0, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DBE0, area={ DOE0, Wall, Wall, DBE0, Wall, Wall } } = DBE1
(DataRod *)(0x1114620)->AttemptToMove(): At DOE0(2,15,24), { tcESE1, Wall, Wall, DBE0, DOE0, Wall, Wall, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DOE0, area={ Wall, Wall, Wall, DBE0, Wall, Wall } } = DOE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,8), { tcESE1, Wall, Wall, Wall, Slot, DQE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DQE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DQE0(3,15,9), { tcESE1, DGN1, DBN1, Slot, DQE0, Slot, DPE0, Slot }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DQE0, area={ Slot, Slot, DPE0, Slot, DGN1, DBN1 } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,10), { tcESE1, Wall, Wall, DQE0, Slot, Slot, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Slot, Wall, DBE0, DQE0, Wall, Wall } } = DQE1
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,11), { tcESE1, Wall, Wall, Slot, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ DGE0, Wall, DBE0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At DGE0(3,15,12), { tcESE1, DQSR, DBSR, Slot, DGE0, Slot, DPE0, DGSR }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=DGE0, area={ Slot, DGSR, DPE0, Slot, DQSR, DBSR } } = Slot
(DataRod *)(0x1114620)->AttemptToMove(): At Slot(3,15,13), { tcESE1, Wall, Wall, DGE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1114620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcESE1, self=Slot, area={ Wall, Wall, DBE0, DGE0, Wall, Wall } } = DGE1
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^^^---G|--G-0|......  9
10 ......^.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----^^^1--|--|G-1...... 12
13 ......^..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  ^^^|Q-|G-|--------1 15
16 ......^..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 55, tick tcELEL (cycle: 1, phase: E, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcELEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x1110240)->{  lockState=lsLckd, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(0,0,6), LTSU(0,1,6), LBSU(0,2,6), LBSU(0,3,6), LBSU(0,4,6), LBSU(0,5,6), LBSU(0,6,6), LBSU(0,7,6), LBSU(0,8,6), LBSU(0,9,6), LPSU(0,10,6), LBSU(0,11,6), LBSU(0,12,6), LPSU(0,13,6), LBSU(0,14,6), LBSU(0,15,6), LPSU(0,16,6), LBSU(0,17,6), LBSU(0,18,6), LBSU(0,19,6), LBSU(0,20,6), LBSU(0,21,6), LBSU(0,22,6), LBSU(0,23,6), LBSU(0,24,6), LBSU(0,25,6), LBSU(0,26,6), LHSU(0,27,6), DSE0(1,9,6), LKSU(1,10,6), DSE1(1,12,6), LKSU(1,13,6), DSE1(1,15,6), LKSU(1,16,6) } } }
(LockRod *)(0x1110240) fBlked at LKSU(1,10,6) by Wall(1,11,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,13,6) by Wall(1,14,6)
(LockRod *)(0x1110240) fBlked at LKSU(1,16,6) by Wall(1,17,6)
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,0,6), { tcELEL, Wall, Wall, Wall, Slot, Wall, Wall, LTSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=Slot, area={ Wall, LTSU, Wall, Wall, Wall, Wall } } = LTSL
(LockRod *)(0x1110240)->AttemptToMove(): At LTSU(0,1,6), { tcELEL, Slot, Wall, Wall, LTSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LTSU, area={ Wall, LBSU, Wall, Wall, Slot, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,2,6), { tcELEL, LTSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LTSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,3,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,4,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,5,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,6,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,7,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,8,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,9,6), { tcELEL, LBSU, DSE0, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE0 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,10,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,11,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,12,6), { tcELEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE1 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,13,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,14,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,15,6), { tcELEL, LBSU, DSE1, Wall, LBSU, Wall, Wall, LPSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LPSU, Wall, Wall, LBSU, DSE1 } } = LPSL
(LockRod *)(0x1110240)->AttemptToMove(): At LPSU(0,16,6), { tcELEL, LBSU, LKSU, Wall, LPSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LPSU, area={ Wall, LBSU, Wall, Wall, LBSU, LKSU } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,17,6), { tcELEL, LPSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LPSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,18,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,19,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,20,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,21,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,22,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,23,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,24,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,25,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LBSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LBSU, Wall, Wall, LBSU, Wall } } = LBSL
(LockRod *)(0x1110240)->AttemptToMove(): At LBSU(0,26,6), { tcELEL, LBSU, Wall, Wall, LBSU, Wall, Wall, LHSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LBSU, area={ Wall, LHSU, Wall, Wall, LBSU, Wall } } = LHSL
(LockRod *)(0x1110240)->AttemptToMove(): At LHSU(0,27,6), { tcELEL, LBSU, Wall, Wall, LHSU, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LHSU, area={ Wall, Wall, Wall, Wall, LBSU, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE0(1,9,6), { tcELEL, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DKE0
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,10,6), { tcELEL, DSE0, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE0, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE1(1,12,6), { tcELEL, Wall, DPE1, Slot, DSE1, DSE1, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE1, area={ DSE1, LKSU, LBSU, Slot, Wall, DPE1 } } = DKE1
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,13,6), { tcELEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE1, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At DSE1(1,15,6), { tcELEL, Wall, Slot, Slot, DSE1, DSE1, LBSU, LKSU }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=DSE1, area={ DSE1, LKSU, LBSU, Slot, Wall, Slot } } = DKE1
(LockRod *)(0x1110240)->AttemptToMove(): At LKSU(1,16,6), { tcELEL, DSE1, Wall, Wall, LKSU, Wall, LPSU, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcELEL, self=LKSU, area={ Wall, Wall, LPSU, Wall, DSE1, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......|0-|G-Q--Q-vXv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 56, tick tcSUWL (cycle: 1, phase: S, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSUWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->{  lockState=lsUnlk, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(0,0,18), LHNL(0,1,18), LBNL(0,2,18), LBNL(0,3,18), LBNL(0,4,18), LBNL(0,5,18), LBNL(0,6,18), LBNL(0,7,18), LBNL(0,8,18), LBNL(0,9,18), LBNL(0,10,18), LBNL(0,11,18), LBNL(0,12,18), LBNL(0,13,18), LBNL(0,14,18), LBNL(0,15,18), LBNL(0,16,18), LBNL(0,17,18), LPNL(0,18,18), LBNL(0,19,18), LBNL(0,20,18), LBNL(0,21,18), LBNL(0,22,18), LBNL(0,23,18), LBNL(0,24,18), LBNL(0,25,18), LBNL(0,26,18), LTNL(0,27,18), Slot(1,17,18), DKS0(1,18,18) } } }
(LockRod *)(0x11113d0) rBlked by DKS0(1,18,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,0,18), { tcSUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=Slot, area={ Wall, LHNL, Wall, Wall, Wall, Wall } } = LHNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNL(0,1,18), { tcSUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LHNL, area={ Wall, LBNL, Wall, Wall, Slot, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,2,18), { tcSUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LHNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,3,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,4,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,5,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,6,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,7,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,8,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,9,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,10,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,11,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,12,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,13,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,14,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,15,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,16,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,17,18), { tcSUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LPNL, Wall, Wall, LBNL, Slot } } = LPNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNL(0,18,18), { tcSUWL, LBNL, DKS0, Wall, LPNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LPNL, area={ Wall, LBNL, Wall, Wall, LBNL, DKS0 } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,19,18), { tcSUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LPNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,20,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,21,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,22,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,23,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,24,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,25,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,26,18), { tcSUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LBNL, area={ Wall, LTNL, Wall, Wall, LBNL, Wall } } = LTNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNL(0,27,18), { tcSUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=LTNL, area={ Wall, Wall, Wall, Wall, LBNL, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(1,17,18), { tcSUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKS0 }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=Slot, area={ Wall, DKS0, LBNL, Wall, Wall, Wall } } = LKNU
(LockRod *)(0x11113d0)->AttemptToMove(): At DKS0(1,18,18), { tcSUWL, Slot, DPW0, DSW0, DKS0, DSW0, LPNL, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUWL, self=DKS0, area={ DSW0, Wall, LPNL, DSW0, Slot, DPW0 } } = DSW0
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..v...... 17
18 ......|0-|G-Q--Q-vvv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 57, tick tcSRW1 (cycle: 1, phase: S, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSRW1, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(1,18,16), DSW0(1,18,17), DSW0(1,18,18), DSW0(1,18,19), Slot(1,18,20), Slot(2,18,6), DHW0(2,18,7), DBW0(2,18,8), DBW0(2,18,9), DPW0(2,18,10), DBW0(2,18,11), DPW0(2,18,12), DBW0(2,18,13), DBW0(2,18,14), DPW0(2,18,15), DBW0(2,18,16), DPW0(2,18,17), DPW0(2,18,18), DPW0(2,18,19), Slot(2,18,20), Slot(3,18,8), Slot(3,18,9), DGW0(3,18,10), Slot(3,18,11), DQW0(3,18,12), Slot(3,18,13), Slot(3,18,14), DQW0(3,18,15), Slot(3,18,16) } } }
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,16), { tcSRW1, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ DSW0, Wall, Wall, Wall, Wall, DBW0 } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,17), { tcSRW1, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DSW0, area={ DSW0, Wall, Wall, Slot, Wall, DPW0 } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,18), { tcSRW1, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DSW0, area={ DSW0, Wall, LBNU, DSW0, LKNU, DPW0 } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,19), { tcSRW1, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DSW0, area={ Slot, Wall, Wall, DSW0, Wall, DPW0 } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,20), { tcSRW1, Wall, Slot, DSW0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ Wall, Wall, Wall, DSW0, Wall, Slot } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,6), { tcSRW1, Wall, Wall, Wall, Slot, DHW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ DHW0, Wall, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DHW0(2,18,7), { tcSRW1, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DHW0, area={ DBW0, Wall, Wall, Slot, Wall, Wall } } = DHW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,8), { tcSRW1, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DBW0, Wall, Wall, DHW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,9), { tcSRW1, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DPW0, Wall, Wall, DBW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,10), { tcSRW1, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DGW0 } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,11), { tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DPW0, Wall, Wall, DPW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,12), { tcSRW1, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DQW0 } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,13), { tcSRW1, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DBW0, Wall, Wall, DPW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,14), { tcSRW1, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DPW0, Wall, Wall, DBW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,15), { tcSRW1, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DQW0 } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,16), { tcSRW1, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DBW0, area={ DPW0, Wall, Slot, DPW0, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,17), { tcSRW1, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ DPW0, Wall, DSW0, DBW0, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,18), { tcSRW1, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ DPW0, Wall, DSW0, DPW0, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,19), { tcSRW1, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DPW0, area={ Slot, Wall, DSW0, DPW0, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,20), { tcSRW1, Wall, Wall, DPW0, Slot, Wall, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ Wall, Wall, Slot, DPW0, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,8), { tcSRW1, Wall, Wall, Wall, Slot, Slot, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ Slot, Wall, DBW0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,9), { tcSRW1, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ DGW0, Slot, DBW0, Slot, DQN1, DBN1 } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DGW0(3,18,10), { tcSRW1, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DGW0, area={ Slot, Wall, DPW0, Slot, Wall, Wall } } = DGW0
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,11), { tcSRW1, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ DQW0, Wall, DBW0, DGW0, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DQW0(3,18,12), { tcSRW1, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DQW0, area={ Slot, Slot, DPW0, Slot, Slot, DBSR } } = DQW0
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,13), { tcSRW1, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ Slot, Wall, DBW0, DQW0, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,14), { tcSRW1, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ DQW0, Wall, DBW0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DQW0(3,18,15), { tcSRW1, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=DQW0, area={ Slot, Slot, DPW0, Slot, Slot, DBSR } } = DQW0
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,16), { tcSRW1, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW1, self=Slot, area={ Wall, Wall, DBW0, DQW0, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..v...... 17
18 ......|0-|G-Q--Q-vvv .... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 58, tick tcSRW0 (cycle: 1, phase: S, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSRW0, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,18,16), DSW0(1,18,17), DSW0(1,18,18), DSW0(1,18,19), Slot(1,18,20), Slot(2,18,6), DHW0(2,18,7), DBW0(2,18,8), DBW0(2,18,9), DPW0(2,18,10), DBW0(2,18,11), DPW0(2,18,12), DBW0(2,18,13), DBW0(2,18,14), DPW0(2,18,15), DBW0(2,18,16), DPW0(2,18,17), DPW0(2,18,18), DPW0(2,18,19), Slot(2,18,20), Slot(3,18,8), Slot(3,18,9), DGW0(3,18,10), Slot(3,18,11), DQW0(3,18,12), Slot(3,18,13), Slot(3,18,14), DQW0(3,18,15), Slot(3,18,16) } } }
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,16), { tcSRW0, Wall, DBW0, Wall, Slot, DSW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ DSW0, Wall, Wall, Wall, Wall, DBW0 } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,17), { tcSRW0, Wall, DPW0, Slot, DSW0, DSW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DSW0, area={ DSW0, Wall, Wall, Slot, Wall, DPW0 } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,18), { tcSRW0, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DSW0, area={ DSW0, Wall, LBNU, DSW0, LKNU, DPW0 } } = DSWR
(DataRod *)(0x1115750)->AttemptToMove(): At DSW0(1,18,19), { tcSRW0, Wall, DPW0, DSW0, DSW0, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DSW0, area={ Slot, Wall, Wall, DSW0, Wall, DPW0 } } = DSWR
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,20), { tcSRW0, Wall, Slot, DSW0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ Wall, Wall, Wall, DSW0, Wall, Slot } } = DSWR
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,6), { tcSRW0, Wall, Wall, Wall, Slot, DHW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ DHW0, Wall, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DHW0(2,18,7), { tcSRW0, Wall, Wall, Slot, DHW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DHW0, area={ DBW0, Wall, Wall, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,8), { tcSRW0, Wall, Slot, DHW0, DBW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DBW0, Wall, Wall, DHW0, Wall, Slot } } = DHWR
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,9), { tcSRW0, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DPW0, Wall, Wall, DBW0, Wall, Slot } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,10), { tcSRW0, Wall, DGW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DGW0 } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,11), { tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DPW0, Wall, Wall, DPW0, Wall, Slot } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,12), { tcSRW0, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DQW0 } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,13), { tcSRW0, Wall, Slot, DPW0, DBW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DBW0, Wall, Wall, DPW0, Wall, Slot } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,14), { tcSRW0, Wall, Slot, DBW0, DBW0, DPW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DPW0, Wall, Wall, DBW0, Wall, Slot } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,15), { tcSRW0, Wall, DQW0, DBW0, DPW0, DBW0, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ DBW0, Wall, Wall, DBW0, Wall, DQW0 } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DBW0(2,18,16), { tcSRW0, Wall, Slot, DPW0, DBW0, DPW0, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DBW0, area={ DPW0, Wall, Slot, DPW0, Wall, Slot } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,17), { tcSRW0, Wall, Wall, DBW0, DPW0, DPW0, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ DPW0, Wall, DSW0, DBW0, Wall, Wall } } = DBWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,18), { tcSRW0, Wall, Wall, DPW0, DPW0, DPW0, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ DPW0, Wall, DSW0, DPW0, Wall, Wall } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At DPW0(2,18,19), { tcSRW0, Wall, Wall, DPW0, DPW0, Slot, DSW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DPW0, area={ Slot, Wall, DSW0, DPW0, Wall, Wall } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,20), { tcSRW0, Wall, Wall, DPW0, Slot, Wall, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ Wall, Wall, Slot, DPW0, Wall, Wall } } = DPWR
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,8), { tcSRW0, Wall, Wall, Wall, Slot, Slot, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ Slot, Wall, DBW0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,9), { tcSRW0, DQN1, DBN1, Slot, Slot, DGW0, DBW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ DGW0, Slot, DBW0, Slot, DQN1, DBN1 } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DGW0(3,18,10), { tcSRW0, Wall, Wall, Slot, DGW0, Slot, DPW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DGW0, area={ Slot, Wall, DPW0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,11), { tcSRW0, Wall, Wall, DGW0, Slot, DQW0, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ DQW0, Wall, DBW0, DGW0, Wall, Wall } } = DGWR
(DataRod *)(0x1115750)->AttemptToMove(): At DQW0(3,18,12), { tcSRW0, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DQW0, area={ Slot, Slot, DPW0, Slot, Slot, DBSR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,13), { tcSRW0, Wall, Wall, DQW0, Slot, Slot, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ Slot, Wall, DBW0, DQW0, Wall, Wall } } = DQWR
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,14), { tcSRW0, Wall, Wall, Slot, Slot, DQW0, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ DQW0, Wall, DBW0, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DQW0(3,18,15), { tcSRW0, Slot, DBSR, Slot, DQW0, Slot, DPW0, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=DQW0, area={ Slot, Slot, DPW0, Slot, Slot, DBSR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,16), { tcSRW0, Wall, Wall, DQW0, Slot, Wall, DBW0, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSRW0, self=Slot, area={ Wall, Wall, DBW0, DQW0, Wall, Wall } } = DQWR
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..v...... 17
18 ......| <|-G|Q-|Q-vvv.... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 59, tick tcSLWL (cycle: 1, phase: S, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSLWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LHNU(0,0,18), LBNU(0,1,18), LBNU(0,2,18), LBNU(0,3,18), LBNU(0,4,18), LBNU(0,5,18), LBNU(0,6,18), LBNU(0,7,18), LBNU(0,8,18), LBNU(0,9,18), LBNU(0,10,18), LBNU(0,11,18), LBNU(0,12,18), LBNU(0,13,18), LBNU(0,14,18), LBNU(0,15,18), LBNU(0,16,18), LPNU(0,17,18), LBNU(0,18,18), LBNU(0,19,18), LBNU(0,20,18), LBNU(0,21,18), LBNU(0,22,18), LBNU(0,23,18), LBNU(0,24,18), LBNU(0,25,18), LTNU(0,26,18), Slot(0,27,18), LKNU(1,17,18), DSWR(1,18,18) } } }
(LockRod *)(0x11113d0) fBlked at LKNU(1,17,18) by Wall(1,16,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNU(0,0,18), { tcSLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LHNU, area={ Wall, LBNU, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,1,18), { tcSLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LHNU, Wall } } = LHNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,2,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,3,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,4,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,5,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,6,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,7,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,8,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,9,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,10,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,11,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,12,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,13,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,14,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,15,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,16,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LPNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNU(0,17,18), { tcSLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LPNU, area={ Wall, LBNU, Wall, Wall, LBNU, LKNU } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,18,18), { tcSLWL, LPNU, DSWR, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LPNU, DSWR } } = LPNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,19,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,20,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,21,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,22,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,23,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,24,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,25,18), { tcSLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LBNU, area={ Wall, LTNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNU(0,26,18), { tcSLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LTNU, area={ Wall, Slot, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,27,18), { tcSLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=Slot, area={ Wall, Wall, Wall, Wall, LTNU, Wall } } = LTNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LKNU(1,17,18), { tcSLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSWR }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=LKNU, area={ Wall, DSWR, LPNU, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At DSWR(1,18,18), { tcSLWL, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLWL, self=DSWR, area={ DSWR, Wall, LBNU, Slot, LKNU, DPWR } } = DKWR
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 60, tick tcSUSL (cycle: 1, phase: S, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSUSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11191d0)->{  lockState=lsUnlk, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(5,6,11), DKSR(5,6,12), Slot(5,6,14), DKSR(5,6,15), Slot(6,6,0), LHWL(6,6,1), LBWL(6,6,2), LBWL(6,6,3), LBWL(6,6,4), LBWL(6,6,5), LBWL(6,6,6), LBWL(6,6,7), LBWL(6,6,8), LBWL(6,6,9), LBWL(6,6,10), LBWL(6,6,11), LPWL(6,6,12), LBWL(6,6,13), LBWL(6,6,14), LPWL(6,6,15), LBWL(6,6,16), LBWL(6,6,17), LBWL(6,6,18), LBWL(6,6,19), LBWL(6,6,20), LBWL(6,6,21), LBWL(6,6,22), LBWL(6,6,23), LTWL(6,6,24) } } }
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,12)
(LockRod *)(0x11191d0) rBlked by DKSR(5,6,15)
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,11), { tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,12), { tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(5,6,14), { tcSUSL, Wall, LBWL, Wall, Slot, DKSR, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ DKSR, Wall, Wall, Wall, Wall, LBWL } } = LKWU
(LockRod *)(0x11191d0)->AttemptToMove(): At DKSR(5,6,15), { tcSUSL, DSSR, LPWL, Slot, DKSR, Wall, DPSR, Slot }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=DKSR, area={ Wall, Slot, DPSR, Slot, DSSR, LPWL } } = DSSR
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,0), { tcSUSL, Wall, Wall, Wall, Slot, LHWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=Slot, area={ LHWL, Wall, Wall, Wall, Wall, Wall } } = LHWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWL(6,6,1), { tcSUSL, Wall, Wall, Slot, LHWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LHWL, area={ LBWL, Wall, Wall, Slot, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,2), { tcSUSL, Wall, Wall, LHWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LHWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,3), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,4), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,5), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,6), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,7), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,8), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,9), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,10), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,11), { tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,12), { tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,13), { tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,14), { tcSUSL, Wall, Wall, LBWL, LBWL, LPWL, Slot, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LPWL, Wall, Slot, LBWL, Wall, Wall } } = LPWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWL(6,6,15), { tcSUSL, Wall, Wall, LBWL, LPWL, LBWL, DKSR, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LPWL, area={ LBWL, Wall, DKSR, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,16), { tcSUSL, Wall, Wall, LPWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LPWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,17), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,18), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,19), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,20), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,21), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,22), { tcSUSL, Wall, Wall, LBWL, LBWL, LBWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LBWL, Wall, Wall, LBWL, Wall, Wall } } = LBWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWL(6,6,23), { tcSUSL, Wall, Wall, LBWL, LBWL, LTWL, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LBWL, area={ LTWL, Wall, Wall, LBWL, Wall, Wall } } = LTWU
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWL(6,6,24), { tcSUSL, Wall, Wall, LBWL, LTWL, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSUSL, self=LTWL, area={ Wall, Wall, Wall, LBWL, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|.....>..>..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....|..|..|......  7
 8 ......|.....Q..Q..|......  8
 9 0----^X^---G|--G-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..Q..|...... 11
12 1-----X^^1--|--|G-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..Q..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..G..G..|...... 16
17 ......|..Q..|..|..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..<..v..v..|...... 19
20 ......|..<.. .. ..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 61, tick tcSSS0 (cycle: 1, phase: S, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSSS0, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { DQSR(3,8,12), Slot(3,9,12), Slot(3,10,12), DQSR(3,14,12), Slot(3,15,12), DGSR(3,16,12), Slot(3,17,12), Slot(3,18,12), Slot(3,19,12), DPSR(4,4,12), DPSR(4,5,12), DPSR(4,6,12), DBSR(4,7,12), DPSR(4,8,12), DBSR(4,9,12), DBSR(4,10,12), DBSR(4,11,12), DBSR(4,12,12), DBSR(4,13,12), DPSR(4,14,12), DBSR(4,15,12), DPSR(4,16,12), DBSR(4,17,12), DBSR(4,18,12), DHSR(4,19,12), Slot(4,20,12), Slot(4,21,12), DSSR(5,4,12), DSSR(5,5,12), DSSR(5,6,12), Slot(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620) rBlked at DQSR(3,8,12) by Wall(3,7,12)
(DataRod *)(0x1116620) rBlked at DQSR(3,14,12) by Wall(3,13,12)
(DataRod *)(0x1116620) rBlked at DPSR(4,4,12) by Wall(4,3,12)
(DataRod *)(0x1116620) rBlked at DSSR(5,4,12) by Wall(5,3,12)
(DataRod *)(0x1116620)->AttemptToMove(): At DQSR(3,8,12), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,9,12), { tcSSS0, DQSR, DBSR, DGE0, Slot, Wall, DBE0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBE0, DGE0, DQSR, DBSR } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,10,12), { tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DBSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQSR(3,14,12), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,15,12), { tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, DGSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DGE1, DGSR, DBE1, Slot, DQSR, DBSR } } = DQS0
(DataRod *)(0x1116620)->AttemptToMove(): At DGSR(3,16,12), { tcSSS0, Slot, DPSR, Wall, DGSR, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGSR, area={ Wall, Slot, Wall, Wall, Slot, DPSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,17,12), { tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DGSR, DBSR } } = DGS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,18,12), { tcSSS0, Slot, DBSR, DGWR, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DQWR, Slot, DBWR, DGWR, Slot, DBSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DHSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,4,12), { tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, Wall, DSSR } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,5,12), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,6,12), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,7,12), { tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DPSR, Slot } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,8,12), { tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Slot } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,9,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,10,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,11,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,12,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,13,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,14,12), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,15,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DPSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DPSR(4,16,12), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DGSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,17,12), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x1116620)->AttemptToMove(): At DBSR(4,18,12), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DHSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At DHSR(4,19,12), { tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DHSR, area={ Wall, Slot, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,20,12), { tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DHSR, Wall } } = DHS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,21,12), { tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,4,12), { tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,5,12), { tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At DSSR(5,6,12), { tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,7,12), { tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,8,12), { tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, DPSR, Wall, Slot, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { DQSR(3,8,15), DGE0(3,9,15), Slot(3,10,15), DQSR(3,11,15), Slot(3,12,15), Slot(3,13,15), DGSR(3,16,15), Slot(3,17,15), Slot(3,18,15), Slot(3,19,15), DPSR(4,4,15), DPSR(4,5,15), DPSR(4,6,15), DBSR(4,7,15), DPSR(4,8,15), DBSR(4,9,15), DBSR(4,10,15), DPSR(4,11,15), DBSR(4,12,15), DBSR(4,13,15), DBSR(4,14,15), DBSR(4,15,15), DPSR(4,16,15), DBSR(4,17,15), DBSR(4,18,15), DHSR(4,19,15), Slot(4,20,15), Slot(4,21,15), DSSR(5,4,15), DSSR(5,5,15), DSSR(5,6,15), Slot(5,7,15), Slot(5,8,15) } } }
(DataRod *)(0x11175f0) rBlked at DQSR(3,8,15) by Wall(3,7,15)
(DataRod *)(0x11175f0) rBlked at DGSR(3,16,15) by Wall(3,15,15)
(DataRod *)(0x11175f0) rBlked at DPSR(4,4,15) by Wall(4,3,15)
(DataRod *)(0x11175f0) rBlked at DSSR(5,4,15) by Wall(5,3,15)
(DataRod *)(0x11175f0)->AttemptToMove(): At DQSR(3,8,15), { tcSSS0, Wall, DPSR, Wall, DQSR, Wall, Wall, DGE0 }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, DGE0, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGE0(3,9,15), { tcSSS0, DQSR, DBSR, Slot, DGE0, Slot, DPE0, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGE0, area={ Slot, Slot, DPE0, Slot, DQSR, DBSR } } = DJE0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,10,15), { tcSSS0, DGE0, DBSR, Wall, Slot, Wall, Wall, DQSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, DQSR, Wall, Wall, DGE0, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DQSR(3,11,15), { tcSSS0, Slot, DPSR, Wall, DQSR, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DQSR, area={ Wall, Slot, Wall, Wall, Slot, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,12,15), { tcSSS0, DQSR, DBSR, Slot, Slot, DGE1, DBE1, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DGE1, Slot, DBE1, Slot, DQSR, DBSR } } = DQS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,13,15), { tcSSS0, Slot, DBSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DGSR(3,16,15), { tcSSS0, Wall, DPSR, Wall, DGSR, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DGSR, area={ Wall, Slot, Wall, Wall, Wall, DPSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,17,15), { tcSSS0, DGSR, DBSR, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DGSR, DBSR } } = DGS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,18,15), { tcSSS0, Slot, DBSR, Slot, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ DQWR, Slot, DBWR, Slot, Slot, DBSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(3,19,15), { tcSSS0, Slot, DHSR, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DHSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,4,15), { tcSSS0, Wall, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, Wall, DSSR } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,5,15), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DPSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,6,15), { tcSSS0, DPSR, DSSR, Wall, DPSR, Wall, Wall, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, Wall, Wall, DPSR, DSSR } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,7,15), { tcSSS0, DPSR, Slot, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DPSR, Slot } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,8,15), { tcSSS0, DBSR, Slot, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Slot } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,9,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, DGE0, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, DGE0, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,10,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,11,15), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DQSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DQSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,12,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,13,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,14,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,15,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Wall, DPSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DPSR, Wall, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DPSR(4,16,15), { tcSSS0, DBSR, Wall, Wall, DPSR, Wall, DGSR, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DPSR, area={ Wall, DBSR, DGSR, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,17,15), { tcSSS0, DPSR, Wall, Wall, DBSR, Wall, Slot, DBSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DBSR, Slot, Wall, DPSR, Wall } } = DPS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DBSR(4,18,15), { tcSSS0, DBSR, Wall, Wall, DBSR, Wall, Slot, DHSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DBSR, area={ Wall, DHSR, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DHSR(4,19,15), { tcSSS0, DBSR, Wall, Wall, DHSR, Wall, Slot, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DHSR, area={ Wall, Slot, Slot, Wall, DBSR, Wall } } = DBS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,20,15), { tcSSS0, DHSR, Wall, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, Wall, Wall, DHSR, Wall } } = DHS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(4,21,15), { tcSSS0, Slot, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,4,15), { tcSSS0, Wall, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,5,15), { tcSSS0, DSSR, Wall, Wall, DSSR, Wall, DPSR, DSSR }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, DSSR, DPSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At DSSR(5,6,15), { tcSSS0, DSSR, LBWU, LKWU, DSSR, Wall, DPSR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=DSSR, area={ Wall, Slot, DPSR, LKWU, DSSR, LBWU } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,7,15), { tcSSS0, DSSR, Wall, Wall, Slot, Wall, DBSR, Slot }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Slot, DBSR, Wall, DSSR, Wall } } = DSS0
(DataRod *)(0x11175f0)->AttemptToMove(): At Slot(5,8,15), { tcSSS0, Slot, Wall, Wall, Slot, Wall, DPSR, Wall }
(DataRod *)(0x11175f0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS0, self=Slot, area={ Wall, Wall, DPSR, Wall, Slot, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|.....>..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....|..|..|......  8
 9 0----^X^---GQ--X-0|......  9
10 ......|.....|..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-QG-|--------1 15
16 ......|..|..|..|..|...... 16
17 ......|..Q..G..G..|...... 17
18 ......| <|-G|Q-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..0..0..|...... 20
21 >--------X------------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 62, tick tcSSS1 (cycle: 1, phase: S, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSSS1, tProperties.rodType=rtDS, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1116620)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1116620)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1116620)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,8,12), DQS0(3,9,12), Slot(3,10,12), Slot(3,14,12), DQS0(3,15,12), Slot(3,16,12), DGS0(3,17,12), Slot(3,18,12), Slot(3,19,12), Slot(4,4,12), DPS0(4,5,12), DPS0(4,6,12), DPS0(4,7,12), DBS0(4,8,12), DPS0(4,9,12), DBS0(4,10,12), DBS0(4,11,12), DBS0(4,12,12), DBS0(4,13,12), DBS0(4,14,12), DPS0(4,15,12), DBS0(4,16,12), DPS0(4,17,12), DBS0(4,18,12), DBS0(4,19,12), DHS0(4,20,12), Slot(4,21,12), Slot(5,4,12), DSS0(5,5,12), DSS0(5,6,12), DSS0(5,7,12), Slot(5,8,12) } } }
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,8,12), { tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,9,12), { tcSSS1, Slot, DPS0, DGE0, DQS0, Wall, DBE0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DQS0, area={ Wall, Slot, DBE0, DGE0, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,10,12), { tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, DQS0, DBS0 } } = DQS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,14,12), { tcSSS1, Wall, DBS0, Wall, Slot, Wall, Wall, DQS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DQS0, Wall, Wall, Wall, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DQS0(3,15,12), { tcSSS1, Slot, DPS0, Slot, DQS0, DGE1, DBE1, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DQS0, area={ DGE1, Slot, DBE1, Slot, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,16,12), { tcSSS1, DQS0, DBS0, Wall, Slot, Wall, Wall, DGS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DGS0, Wall, Wall, DQS0, DBS0 } } = DQS1
(DataRod *)(0x1116620)->AttemptToMove(): At DGS0(3,17,12), { tcSSS1, Slot, DPS0, Wall, DGS0, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DGS0, area={ Wall, Slot, Wall, Wall, Slot, DPS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,18,12), { tcSSS1, DGS0, DBS0, DGWR, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ DQWR, Slot, DBWR, DGWR, DGS0, DBS0 } } = DGS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(3,19,12), { tcSSS1, Slot, DBS0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DBS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,4,12), { tcSSS1, Wall, Slot, Wall, Slot, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DPS0, Wall, Wall, Wall, Slot } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,5,12), { tcSSS1, Slot, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, Slot, DSS0 } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,6,12), { tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DPS0, Wall, Wall, DPS0, DSS0 } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,7,12), { tcSSS1, DPS0, DSS0, Wall, DPS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, Wall, Wall, DPS0, DSS0 } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,8,12), { tcSSS1, DPS0, Slot, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Slot } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,9,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,10,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,11,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,12,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,13,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Wall, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,14,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,15,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DQS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DQS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,16,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DPS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DPS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DPS0(4,17,12), { tcSSS1, DBS0, Wall, Wall, DPS0, Wall, DGS0, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DPS0, area={ Wall, DBS0, DGS0, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,18,12), { tcSSS1, DPS0, Wall, Wall, DBS0, Wall, Slot, DBS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DBS0, Slot, Wall, DPS0, Wall } } = DPS1
(DataRod *)(0x1116620)->AttemptToMove(): At DBS0(4,19,12), { tcSSS1, DBS0, Wall, Wall, DBS0, Wall, Slot, DHS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DBS0, area={ Wall, DHS0, Slot, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At DHS0(4,20,12), { tcSSS1, DBS0, Wall, Wall, DHS0, Wall, Wall, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DHS0, area={ Wall, Slot, Wall, Wall, DBS0, Wall } } = DBS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(4,21,12), { tcSSS1, DHS0, Wall, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, Wall, Wall, DHS0, Wall } } = DHS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,4,12), { tcSSS1, Wall, Wall, Wall, Slot, Wall, Slot, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, DSS0, Slot, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,5,12), { tcSSS1, Slot, Wall, Wall, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, DSS0, DPS0, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,6,12), { tcSSS1, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DSS1
(DataRod *)(0x1116620)->AttemptToMove(): At DSS0(5,7,12), { tcSSS1, DSS0, Wall, Wall, DSS0, Wall, DPS0, Slot }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=DSS0, area={ Wall, Slot, DPS0, Wall, DSS0, Wall } } = DSS1
(DataRod *)(0x1116620)->AttemptToMove(): At Slot(5,8,12), { tcSSS1, DSS0, Wall, Wall, Slot, Wall, DBS0, Wall }
(DataRod *)(0x1116620)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSSS1, self=Slot, area={ Wall, Wall, DBS0, Wall, DSS0, Wall } } = DSS1
(DataRod *)(0x11175f0)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x11175f0)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x11175f0)->{ rodType=rtDS,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(3,8,15), DJE0(3,9,15), Slot(3,10,15), Slot(3,11,15), DQS0(3,12,15), Slot(3,13,15), Slot(3,16,15), DGS0(3,17,15), Slot(3,18,15), Slot(3,19,15), Slot(4,4,15), DPS0(4,5,15), DPS0(4,6,15), DPS0(4,7,15), DBS0(4,8,15), DPS0(4,9,15), DBS0(4,10,15), DBS0(4,11,15), DPS0(4,12,15), DBS0(4,13,15), DBS0(4,14,15), DBS0(4,15,15), DBS0(4,16,15), DPS0(4,17,15), DBS0(4,18,15), DBS0(4,19,15), DHS0(4,20,15), Slot(4,21,15), Slot(5,4,15), DSS0(5,5,15), DSS0(5,6,15), DSS0(5,7,15), Slot(5,8,15) } } }
(LockRod *)(0x11175f0) fBlked by DJE0(3,9,15)
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6 <---------->>->>-------<   6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 63, tick tcSLSL (cycle: 1, phase: S, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcSLSL, tProperties.rodType=rtLW, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11191d0)->{  lockState=lsLckd, (Item *)(0x11191d0)->{ rodType=rtLW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LKWU(5,6,11), DSS1(5,6,12), LKWU(5,6,14), DSS0(5,6,15), LHWU(6,6,0), LBWU(6,6,1), LBWU(6,6,2), LBWU(6,6,3), LBWU(6,6,4), LBWU(6,6,5), LBWU(6,6,6), LBWU(6,6,7), LBWU(6,6,8), LBWU(6,6,9), LBWU(6,6,10), LPWU(6,6,11), LBWU(6,6,12), LBWU(6,6,13), LPWU(6,6,14), LBWU(6,6,15), LBWU(6,6,16), LBWU(6,6,17), LBWU(6,6,18), LBWU(6,6,19), LBWU(6,6,20), LBWU(6,6,21), LBWU(6,6,22), LTWU(6,6,23), Slot(6,6,24) } } }
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,11) by Wall(5,6,10)
(LockRod *)(0x11191d0) fBlked at LKWU(5,6,14) by Wall(5,6,13)
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,11), { tcSLSL, Wall, LPWU, Wall, LKWU, DSS1, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LKWU, area={ DSS1, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSS1(5,6,12), { tcSLSL, Slot, LBWU, LKWU, DSS1, Wall, DPS1, DSS1 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=DSS1, area={ Wall, DSS1, DPS1, LKWU, Slot, LBWU } } = DKS1
(LockRod *)(0x11191d0)->AttemptToMove(): At LKWU(5,6,14), { tcSLSL, Wall, LPWU, Wall, LKWU, DSS0, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LKWU, area={ DSS0, Wall, Wall, Wall, Wall, LPWU } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At DSS0(5,6,15), { tcSLSL, DSS0, LBWU, LKWU, DSS0, Wall, DPS0, DSS0 }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=DSS0, area={ Wall, DSS0, DPS0, LKWU, DSS0, LBWU } } = DKS0
(LockRod *)(0x11191d0)->AttemptToMove(): At LHWU(6,6,0), { tcSLSL, Wall, Wall, Wall, LHWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LHWU, area={ LBWU, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,1), { tcSLSL, Wall, Wall, LHWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LHWU, Wall, Wall } } = LHWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,2), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,3), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,4), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,5), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,6), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,7), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,8), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,9), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,10), { tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,11), { tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,12), { tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS1, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, DSS1, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,13), { tcSLSL, Wall, Wall, LBWU, LBWU, LPWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LPWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LPWU(6,6,14), { tcSLSL, Wall, Wall, LBWU, LPWU, LBWU, LKWU, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LPWU, area={ LBWU, Wall, LKWU, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,15), { tcSLSL, Wall, Wall, LPWU, LBWU, LBWU, DSS0, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, DSS0, LPWU, Wall, Wall } } = LPWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,16), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,17), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,18), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,19), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,20), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,21), { tcSLSL, Wall, Wall, LBWU, LBWU, LBWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LBWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LBWU(6,6,22), { tcSLSL, Wall, Wall, LBWU, LBWU, LTWU, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LBWU, area={ LTWU, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At LTWU(6,6,23), { tcSLSL, Wall, Wall, LBWU, LTWU, Slot, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=LTWU, area={ Slot, Wall, Wall, LBWU, Wall, Wall } } = LBWL
(LockRod *)(0x11191d0)->AttemptToMove(): At Slot(6,6,24), { tcSLSL, Wall, Wall, LTWU, Slot, Wall, Wall, Wall }
(LockRod *)(0x11191d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcSLSL, self=Slot, area={ Wall, Wall, Wall, LTWU, Wall, Wall } } = LTWL
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 64, tick tcDUWL (cycle: 1, phase: D, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDUWL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 65, tick tcDRW1 (cycle: 1, phase: D, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDRW1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 66, tick tcDRW0 (cycle: 1, phase: D, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDRW0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 67, tick tcDLWL (cycle: 1, phase: D, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDLWL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 68, tick tcDUSL (cycle: 1, phase: D, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDUSL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 69, tick tcDSS0 (cycle: 1, phase: D, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDSS0, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 70, tick tcDSS1 (cycle: 1, phase: D, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDSS1, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Fwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 71, tick tcDLSL (cycle: 1, phase: D, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcDLSL, tProperties.rodType=rtUn, tProperties.fwdOrBwd=Bwd
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 72, tick tcWUNL (cycle: 1, phase: W, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWUNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x111a060)->{  lockState=lsUnlk, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { DKN1(5,21,9), Slot(5,21,10), LTEL(6,21,0), LBEL(6,21,1), LBEL(6,21,2), LBEL(6,21,3), LBEL(6,21,4), LBEL(6,21,5), LBEL(6,21,6), LBEL(6,21,7), LBEL(6,21,8), LPEL(6,21,9), LBEL(6,21,10), LBEL(6,21,11), LBEL(6,21,12), LBEL(6,21,13), LBEL(6,21,14), LBEL(6,21,15), LBEL(6,21,16), LBEL(6,21,17), LBEL(6,21,18), LBEL(6,21,19), LBEL(6,21,20), LBEL(6,21,21), LBEL(6,21,22), LHEL(6,21,23), Slot(6,21,24) } } }
(LockRod *)(0x111a060) rBlked by DKN1(5,21,9)
(LockRod *)(0x111a060)->AttemptToMove(): At DKN1(5,21,9), { tcWUNL, DSN1, LPEL, Wall, DKN1, Slot, DPN1, Slot }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=DKN1, area={ Slot, Slot, DPN1, Wall, DSN1, LPEL } } = DSN1
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(5,21,10), { tcWUNL, Wall, LBEL, DKN1, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=Slot, area={ Wall, Wall, Wall, DKN1, Wall, LBEL } } = LKEU
(LockRod *)(0x111a060)->AttemptToMove(): At LTEL(6,21,0), { tcWUNL, Wall, Wall, Wall, LTEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LTEL, area={ LBEL, Wall, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,1), { tcWUNL, Wall, Wall, LTEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LTEL, Wall, Wall } } = LTEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,2), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,3), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,4), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,5), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,6), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,7), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,8), { tcWUNL, Wall, Wall, LBEL, LBEL, LPEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LPEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LPEL(6,21,9), { tcWUNL, Wall, Wall, LBEL, LPEL, LBEL, DKN1, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LPEL, area={ LBEL, Wall, DKN1, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,10), { tcWUNL, Wall, Wall, LPEL, LBEL, LBEL, Slot, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Slot, LPEL, Wall, Wall } } = LPEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,11), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,12), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,13), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,14), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,15), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,16), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,17), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,18), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,19), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,20), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,21), { tcWUNL, Wall, Wall, LBEL, LBEL, LBEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LBEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LBEL(6,21,22), { tcWUNL, Wall, Wall, LBEL, LBEL, LHEL, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LBEL, area={ LHEL, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At LHEL(6,21,23), { tcWUNL, Wall, Wall, LBEL, LHEL, Slot, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=LHEL, area={ Slot, Wall, Wall, LBEL, Wall, Wall } } = LBEU
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,24), { tcWUNL, Wall, Wall, LHEL, Slot, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUNL, self=Slot, area={ Wall, Wall, Wall, LHEL, Wall, Wall } } = LHEU
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^1--|--QG-1...... 12
13 ......|..|..|..|..|...... 13
14 ......|..G..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..Q..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..<..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|.. ........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 73, tick tcWRN1 (cycle: 1, phase: W, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWRN1, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1118640)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { DGN1(3,14,9), Slot(3,15,9), Slot(3,16,9), DQN1(3,17,9), Slot(3,18,9), Slot(3,19,9), DHN1(4,12,9), DBN1(4,13,9), DPN1(4,14,9), DBN1(4,15,9), DBN1(4,16,9), DPN1(4,17,9), DBN1(4,18,9), DPN1(4,19,9), DPN1(4,20,9), DPN1(4,21,9), Slot(4,22,9), Slot(4,23,9), DSN1(5,19,9), DSN1(5,20,9), DSN1(5,21,9), Slot(5,22,9), Slot(5,23,9) } } }
(DataRod *)(0x1118640) fBlked at DGN1(3,14,9) by Wall(3,13,9)
(DataRod *)(0x1118640) fBlked at DHN1(4,12,9) by Wall(4,11,9)
(DataRod *)(0x1118640) fBlked at DSN1(5,19,9) by Wall(5,18,9)
(DataRod *)(0x1118640)->AttemptToMove(): At DGN1(3,14,9), { tcWRN1, Wall, DPN1, Wall, DGN1, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DGN1, area={ Wall, Slot, Wall, Wall, Wall, DPN1 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,15,9), { tcWRN1, DGN1, DBN1, Slot, Slot, DQE1, DBE1, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ DQE1, Slot, DBE1, Slot, DGN1, DBN1 } } = DGN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,16,9), { tcWRN1, Slot, DBN1, Wall, Slot, Wall, Wall, DQN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, DQN1, Wall, Wall, Slot, DBN1 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DQN1(3,17,9), { tcWRN1, Slot, DPN1, Wall, DQN1, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DQN1, area={ Wall, Slot, Wall, Wall, Slot, DPN1 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,18,9), { tcWRN1, DQN1, DBN1, Slot, Slot, Slot, DBWR, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Slot, Slot, DBWR, Slot, DQN1, DBN1 } } = DQN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,19,9), { tcWRN1, Slot, DPN1, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, DPN1 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DHN1(4,12,9), { tcWRN1, Wall, Wall, Wall, DHN1, Wall, Wall, DBN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DHN1, area={ Wall, DBN1, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DBN1(4,13,9), { tcWRN1, DHN1, Wall, Wall, DBN1, Wall, Wall, DPN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DBN1, area={ Wall, DPN1, Wall, Wall, DHN1, Wall } } = DHN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPN1(4,14,9), { tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DGN1, DBN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DPN1, area={ Wall, DBN1, DGN1, Wall, DBN1, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBN1(4,15,9), { tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DBN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DBN1, area={ Wall, DBN1, Slot, Wall, DPN1, Wall } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBN1(4,16,9), { tcWRN1, DBN1, Wall, Wall, DBN1, Wall, Slot, DPN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DBN1, area={ Wall, DPN1, Slot, Wall, DBN1, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPN1(4,17,9), { tcWRN1, DBN1, Wall, Wall, DPN1, Wall, DQN1, DBN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DPN1, area={ Wall, DBN1, DQN1, Wall, DBN1, Wall } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DBN1(4,18,9), { tcWRN1, DPN1, Wall, Wall, DBN1, Wall, Slot, DPN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DBN1, area={ Wall, DPN1, Slot, Wall, DPN1, Wall } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPN1(4,19,9), { tcWRN1, DBN1, DSN1, Wall, DPN1, Wall, Slot, DPN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DPN1, area={ Wall, DPN1, Slot, Wall, DBN1, DSN1 } } = DBN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPN1(4,20,9), { tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, DPN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DPN1, area={ Wall, DPN1, Wall, Wall, DPN1, DSN1 } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At DPN1(4,21,9), { tcWRN1, DPN1, DSN1, Wall, DPN1, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DPN1, area={ Wall, Slot, Wall, Wall, DPN1, DSN1 } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,22,9), { tcWRN1, DPN1, Slot, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, Slot, Wall, Wall, DPN1, Slot } } = DPN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,23,9), { tcWRN1, Slot, Slot, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, Wall, Wall, Wall, Slot, Slot } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DSN1(5,19,9), { tcWRN1, Wall, Wall, Wall, DSN1, Wall, DPN1, DSN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DSN1, area={ Wall, DSN1, DPN1, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DSN1(5,20,9), { tcWRN1, DSN1, Wall, Wall, DSN1, Wall, DPN1, DSN1 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DSN1, area={ Wall, DSN1, DPN1, Wall, DSN1, Wall } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At DSN1(5,21,9), { tcWRN1, DSN1, LBEU, Wall, DSN1, LKEU, DPN1, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=DSN1, area={ LKEU, Slot, DPN1, Wall, DSN1, LBEU } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,22,9), { tcWRN1, DSN1, Wall, Wall, Slot, Wall, Slot, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, Slot, Slot, Wall, DSN1, Wall } } = DSN0
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,23,9), { tcWRN1, Slot, Wall, Wall, Slot, Wall, Slot, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN1, self=Slot, area={ Wall, Wall, Slot, Wall, Slot, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|..0..|..|..|...... 13
14 ......|..|..|..|..|...... 14
15 ....  X^^GQ-|G-|--------1 15
16 ......|..|..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <Q-GGQ-|Q-Xvv.... 18
19 ......|..|..|..|..|...... 19
20 ......|..<..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|.. ........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 74, tick tcWRN0 (cycle: 1, phase: W, minor tick: ResetNextDataRodsFrom0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWRN0, tProperties.rodType=rtDN, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1118640)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1118640)->{ lockState=lsUnlk,  dataState=dsSet1, (Item *)(0x1118640)->{ rodType=rtDN,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(3,14,9), DGN0(3,15,9), Slot(3,16,9), Slot(3,17,9), DQN0(3,18,9), Slot(3,19,9), Slot(4,12,9), DHN0(4,13,9), DBN0(4,14,9), DPN0(4,15,9), DBN0(4,16,9), DBN0(4,17,9), DPN0(4,18,9), DBN0(4,19,9), DPN0(4,20,9), DPN0(4,21,9), DPN0(4,22,9), Slot(4,23,9), Slot(5,19,9), DSN0(5,20,9), DSN0(5,21,9), DSN0(5,22,9), Slot(5,23,9) } } }
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,14,9), { tcWRN0, Wall, DBN0, Wall, Slot, Wall, Wall, DGN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, DGN0, Wall, Wall, Wall, DBN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DGN0(3,15,9), { tcWRN0, Slot, DPN0, Slot, DGN0, DQE1, DBE1, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DGN0, area={ DQE1, Slot, DBE1, Slot, Slot, DPN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,16,9), { tcWRN0, DGN0, DBN0, Wall, Slot, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, Slot, Wall, Wall, DGN0, DBN0 } } = DGNR
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,17,9), { tcWRN0, Slot, DBN0, Wall, Slot, Wall, Wall, DQN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, DQN0, Wall, Wall, Slot, DBN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DQN0(3,18,9), { tcWRN0, Slot, DPN0, Slot, DQN0, Slot, DBWR, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DQN0, area={ Slot, Slot, DBWR, Slot, Slot, DPN0 } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(3,19,9), { tcWRN0, DQN0, DBN0, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, Wall, Wall, Wall, DQN0, DBN0 } } = DQNR
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,12,9), { tcWRN0, Wall, Wall, Wall, Slot, Wall, Wall, DHN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, DHN0, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DHN0(4,13,9), { tcWRN0, Slot, Wall, Wall, DHN0, Wall, Wall, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DHN0, area={ Wall, DBN0, Wall, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,14,9), { tcWRN0, DHN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DBN0, area={ Wall, DPN0, Slot, Wall, DHN0, Wall } } = DHNR
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,15,9), { tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DGN0, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DPN0, area={ Wall, DBN0, DGN0, Wall, DBN0, Wall } } = DBNR
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,16,9), { tcWRN0, DPN0, Wall, Wall, DBN0, Wall, Slot, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DBN0, area={ Wall, DBN0, Slot, Wall, DPN0, Wall } } = DPNR
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,17,9), { tcWRN0, DBN0, Wall, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DBN0, area={ Wall, DPN0, Slot, Wall, DBN0, Wall } } = DBNR
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,18,9), { tcWRN0, DBN0, Wall, Wall, DPN0, Wall, DQN0, DBN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DPN0, area={ Wall, DBN0, DQN0, Wall, DBN0, Wall } } = DBNR
(DataRod *)(0x1118640)->AttemptToMove(): At DBN0(4,19,9), { tcWRN0, DPN0, Slot, Wall, DBN0, Wall, Slot, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DBN0, area={ Wall, DPN0, Slot, Wall, DPN0, Slot } } = DPNR
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,20,9), { tcWRN0, DBN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DPN0, area={ Wall, DPN0, Wall, Wall, DBN0, DSN0 } } = DBNR
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,21,9), { tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, DPN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DPN0, area={ Wall, DPN0, Wall, Wall, DPN0, DSN0 } } = DPNR
(DataRod *)(0x1118640)->AttemptToMove(): At DPN0(4,22,9), { tcWRN0, DPN0, DSN0, Wall, DPN0, Wall, Wall, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DPN0, area={ Wall, Slot, Wall, Wall, DPN0, DSN0 } } = DPNR
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(4,23,9), { tcWRN0, DPN0, Slot, Wall, Slot, Wall, Wall, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, Wall, Wall, Wall, DPN0, Slot } } = DPNR
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,19,9), { tcWRN0, Wall, Wall, Wall, Slot, Wall, DBN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, DSN0, DBN0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,20,9), { tcWRN0, Slot, Wall, Wall, DSN0, Wall, DPN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DSN0, area={ Wall, DSN0, DPN0, Wall, Slot, Wall } } = Slot
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,21,9), { tcWRN0, DSN0, LBEU, Wall, DSN0, LKEU, DPN0, DSN0 }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DSN0, area={ LKEU, DSN0, DPN0, Wall, DSN0, LBEU } } = DSNR
(DataRod *)(0x1118640)->AttemptToMove(): At DSN0(5,22,9), { tcWRN0, DSN0, Wall, Wall, DSN0, Wall, DPN0, Slot }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=DSN0, area={ Wall, Slot, DPN0, Wall, DSN0, Wall } } = DSNR
(DataRod *)(0x1118640)->AttemptToMove(): At Slot(5,23,9), { tcWRN0, DSN0, Wall, Wall, Slot, Wall, Slot, Wall }
(DataRod *)(0x1118640)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWRN0, self=Slot, area={ Wall, Wall, Slot, Wall, DSN0, Wall } } = DSNR
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21  >-------<<-1-----------> 21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 75, tick tcWLNL (cycle: 1, phase: W, minor tick: RelockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWLNL, tProperties.rodType=rtLE, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x111a060)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x111a060)->{  lockState=lsLckd, (Item *)(0x111a060)->{ rodType=rtLE,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { DSNR(5,21,9), LKEU(5,21,10), Slot(6,21,0), LTEU(6,21,1), LBEU(6,21,2), LBEU(6,21,3), LBEU(6,21,4), LBEU(6,21,5), LBEU(6,21,6), LBEU(6,21,7), LBEU(6,21,8), LBEU(6,21,9), LPEU(6,21,10), LBEU(6,21,11), LBEU(6,21,12), LBEU(6,21,13), LBEU(6,21,14), LBEU(6,21,15), LBEU(6,21,16), LBEU(6,21,17), LBEU(6,21,18), LBEU(6,21,19), LBEU(6,21,20), LBEU(6,21,21), LBEU(6,21,22), LBEU(6,21,23), LHEU(6,21,24) } } }
(LockRod *)(0x111a060) fBlked at LKEU(5,21,10) by Wall(5,21,11)
(LockRod *)(0x111a060)->AttemptToMove(): At DSNR(5,21,9), { tcWLNL, Slot, LBEU, Wall, DSNR, LKEU, DPNR, DSNR }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=DSNR, area={ LKEU, DSNR, DPNR, Wall, Slot, LBEU } } = DKNR
(LockRod *)(0x111a060)->AttemptToMove(): At LKEU(5,21,10), { tcWLNL, Wall, LPEU, DSNR, LKEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LKEU, area={ Wall, Wall, Wall, DSNR, Wall, LPEU } } = Slot
(LockRod *)(0x111a060)->AttemptToMove(): At Slot(6,21,0), { tcWLNL, Wall, Wall, Wall, Slot, LTEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=Slot, area={ LTEU, Wall, Wall, Wall, Wall, Wall } } = LTEL
(LockRod *)(0x111a060)->AttemptToMove(): At LTEU(6,21,1), { tcWLNL, Wall, Wall, Slot, LTEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LTEU, area={ LBEU, Wall, Wall, Slot, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,2), { tcWLNL, Wall, Wall, LTEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LTEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,3), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,4), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,5), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,6), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,7), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,8), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,9), { tcWLNL, Wall, Wall, LBEU, LBEU, LPEU, DSNR, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LPEU, Wall, DSNR, LBEU, Wall, Wall } } = LPEL
(LockRod *)(0x111a060)->AttemptToMove(): At LPEU(6,21,10), { tcWLNL, Wall, Wall, LBEU, LPEU, LBEU, LKEU, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LPEU, area={ LBEU, Wall, LKEU, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,11), { tcWLNL, Wall, Wall, LPEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LPEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,12), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,13), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,14), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,15), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,16), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,17), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,18), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,19), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,20), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,21), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,22), { tcWLNL, Wall, Wall, LBEU, LBEU, LBEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LBEU, Wall, Wall, LBEU, Wall, Wall } } = LBEL
(LockRod *)(0x111a060)->AttemptToMove(): At LBEU(6,21,23), { tcWLNL, Wall, Wall, LBEU, LBEU, LHEU, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LBEU, area={ LHEU, Wall, Wall, LBEU, Wall, Wall } } = LHEL
(LockRod *)(0x111a060)->AttemptToMove(): At LHEU(6,21,24), { tcWLNL, Wall, Wall, LBEU, LHEU, Wall, Wall, Wall }
(LockRod *)(0x111a060)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLNL, self=LHEU, area={ Wall, Wall, Wall, LBEU, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......| <|-GGQ-|Q-Xvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 76, tick tcWUWL (cycle: 1, phase: W, minor tick: UnlockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWUWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x11113d0)->{  lockState=lsUnlk, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(0,0,18), LHNL(0,1,18), LBNL(0,2,18), LBNL(0,3,18), LBNL(0,4,18), LBNL(0,5,18), LBNL(0,6,18), LBNL(0,7,18), LBNL(0,8,18), LBNL(0,9,18), LBNL(0,10,18), LBNL(0,11,18), LBNL(0,12,18), LBNL(0,13,18), LBNL(0,14,18), LBNL(0,15,18), LBNL(0,16,18), LBNL(0,17,18), LPNL(0,18,18), LBNL(0,19,18), LBNL(0,20,18), LBNL(0,21,18), LBNL(0,22,18), LBNL(0,23,18), LBNL(0,24,18), LBNL(0,25,18), LBNL(0,26,18), LTNL(0,27,18), Slot(1,17,18), DKWR(1,18,18) } } }
(LockRod *)(0x11113d0) rBlked by DKWR(1,18,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,0,18), { tcWUWL, Wall, Wall, Wall, Slot, Wall, Wall, LHNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=Slot, area={ Wall, LHNL, Wall, Wall, Wall, Wall } } = LHNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNL(0,1,18), { tcWUWL, Slot, Wall, Wall, LHNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LHNL, area={ Wall, LBNL, Wall, Wall, Slot, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,2,18), { tcWUWL, LHNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LHNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,3,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,4,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,5,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,6,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,7,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,8,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,9,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,10,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,11,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,12,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,13,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,14,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,15,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,16,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,17,18), { tcWUWL, LBNL, Slot, Wall, LBNL, Wall, Wall, LPNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LPNL, Wall, Wall, LBNL, Slot } } = LPNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNL(0,18,18), { tcWUWL, LBNL, DKWR, Wall, LPNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LPNL, area={ Wall, LBNL, Wall, Wall, LBNL, DKWR } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,19,18), { tcWUWL, LPNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LPNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,20,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,21,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,22,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,23,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,24,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,25,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LBNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LBNL, Wall, Wall, LBNL, Wall } } = LBNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNL(0,26,18), { tcWUWL, LBNL, Wall, Wall, LBNL, Wall, Wall, LTNL }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LBNL, area={ Wall, LTNL, Wall, Wall, LBNL, Wall } } = LTNU
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNL(0,27,18), { tcWUWL, LBNL, Wall, Wall, LTNL, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=LTNL, area={ Wall, Wall, Wall, Wall, LBNL, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(1,17,18), { tcWUWL, Wall, Wall, Wall, Slot, Wall, LBNL, DKWR }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=Slot, area={ Wall, DKWR, LBNL, Wall, Wall, Wall } } = LKNU
(LockRod *)(0x11113d0)->AttemptToMove(): At DKWR(1,18,18), { tcWUWL, Slot, DPWR, Slot, DKWR, DSWR, LPNL, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWUWL, self=DKWR, area={ DSWR, Wall, LPNL, Slot, Slot, DPWR } } = DSWR
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......| <|-GGQ-|Q-vvv.... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 77, tick tcWSW0 (cycle: 1, phase: W, minor tick: SetDataRodsTo0)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWSW0, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,18,16), Slot(1,18,17), DSWR(1,18,18), DSWR(1,18,19), DSWR(1,18,20), Slot(2,18,6), Slot(2,18,7), DHWR(2,18,8), DBWR(2,18,9), DBWR(2,18,10), DPWR(2,18,11), DBWR(2,18,12), DPWR(2,18,13), DBWR(2,18,14), DBWR(2,18,15), DPWR(2,18,16), DBWR(2,18,17), DPWR(2,18,18), DPWR(2,18,19), DPWR(2,18,20), Slot(3,18,8), Slot(3,18,9), Slot(3,18,10), DGWR(3,18,11), DGS1(3,18,12), DQWR(3,18,13), Slot(3,18,14), Slot(3,18,15), DQWR(3,18,16) } } }
(DataRod *)(0x1115750) rBlked at DSWR(1,18,20) by Wall(1,18,21)
(DataRod *)(0x1115750) rBlked at DPWR(2,18,20) by Wall(2,18,21)
(DataRod *)(0x1115750) rBlked at DQWR(3,18,16) by Wall(3,18,17)
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,16), { tcWSW0, Wall, DPWR, Wall, Slot, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, Wall, Wall, Wall, DPWR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(1,18,17), { tcWSW0, Wall, DBWR, Slot, Slot, DSWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DSWR, Wall, Wall, Slot, Wall, DBWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,18), { tcWSW0, LKNU, DPWR, Slot, DSWR, DSWR, LBNU, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ DSWR, Wall, LBNU, Slot, LKNU, DPWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,19), { tcWSW0, Wall, DPWR, DSWR, DSWR, DSWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ DSWR, Wall, Wall, DSWR, Wall, DPWR } } = DSW0
(DataRod *)(0x1115750)->AttemptToMove(): At DSWR(1,18,20), { tcWSW0, Wall, DPWR, DSWR, DSWR, Wall, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DSWR, area={ Wall, Wall, Wall, DSWR, Wall, DPWR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,6), { tcWSW0, Wall, Wall, Wall, Slot, Slot, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, Wall, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(2,18,7), { tcWSW0, Wall, Wall, Slot, Slot, DHWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DHWR, Wall, Wall, Slot, Wall, Wall } } = DHW0
(DataRod *)(0x1115750)->AttemptToMove(): At DHWR(2,18,8), { tcWSW0, Wall, Slot, Slot, DHWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DHWR, area={ DBWR, Wall, Wall, Slot, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,9), { tcWSW0, Wall, Slot, DHWR, DBWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DBWR, Wall, Wall, DHWR, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,10), { tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DBWR, Wall, Slot } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,11), { tcWSW0, Wall, DGWR, DBWR, DPWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Wall, DBWR, Wall, DGWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,12), { tcWSW0, Wall, DGS1, DPWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DPWR, Wall, DGS1 } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,13), { tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Wall, DBWR, Wall, DQWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,14), { tcWSW0, Wall, Slot, DPWR, DBWR, DBWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DBWR, Wall, Wall, DPWR, Wall, Slot } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,15), { tcWSW0, Wall, Slot, DBWR, DBWR, DPWR, Wall, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Wall, DBWR, Wall, Slot } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,16), { tcWSW0, Wall, DQWR, DBWR, DPWR, DBWR, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DBWR, Wall, Slot, DBWR, Wall, DQWR } } = DBW0
(DataRod *)(0x1115750)->AttemptToMove(): At DBWR(2,18,17), { tcWSW0, Wall, Wall, DPWR, DBWR, DPWR, Slot, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DBWR, area={ DPWR, Wall, Slot, DPWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,18), { tcWSW0, Wall, Wall, DBWR, DPWR, DPWR, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DPWR, Wall, DSWR, DBWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,19), { tcWSW0, Wall, Wall, DPWR, DPWR, DPWR, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ DPWR, Wall, DSWR, DPWR, Wall, Wall } } = DPW0
(DataRod *)(0x1115750)->AttemptToMove(): At DPWR(2,18,20), { tcWSW0, Wall, Wall, DPWR, DPWR, Wall, DSWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DPWR, area={ Wall, Wall, DSWR, DPWR, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,8), { tcWSW0, Wall, Wall, Wall, Slot, Slot, DHWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, DHWR, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,9), { tcWSW0, Slot, DBNR, Slot, Slot, Slot, DBWR, DQNR }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, DQNR, DBWR, Slot, Slot, DBNR } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,10), { tcWSW0, Wall, Wall, Slot, Slot, DGWR, DBWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DGWR, Wall, DBWR, Slot, Wall, Wall } } = DGW0
(DataRod *)(0x1115750)->AttemptToMove(): At DGWR(3,18,11), { tcWSW0, Wall, Wall, Slot, DGWR, DGS1, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DGWR, area={ DGS1, Wall, DPWR, Slot, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At DGS1(3,18,12), { tcWSW0, Slot, DPS1, DGWR, DGS1, DQWR, DBWR, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DGS1, area={ DQWR, Slot, DBWR, DGWR, Slot, DPS1 } } = DJS1
(DataRod *)(0x1115750)->AttemptToMove(): At DQWR(3,18,13), { tcWSW0, Wall, Wall, DGS1, DQWR, Slot, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DQWR, area={ Slot, Wall, DPWR, DGS1, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,14), { tcWSW0, Wall, Wall, DQWR, Slot, Slot, DBWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ Slot, Wall, DBWR, DQWR, Wall, Wall } } = Slot
(DataRod *)(0x1115750)->AttemptToMove(): At Slot(3,18,15), { tcWSW0, DGS0, DBS0, Slot, Slot, DQWR, DBWR, Slot }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=Slot, area={ DQWR, Slot, DBWR, Slot, DGS0, DBS0 } } = DQW0
(DataRod *)(0x1115750)->AttemptToMove(): At DQWR(3,18,16), { tcWSW0, Wall, Wall, Slot, DQWR, Wall, DPWR, Wall }
(DataRod *)(0x1115750)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWSW0, self=DQWR, area={ Wall, Wall, DPWR, Slot, Wall, Wall } } = Slot
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......|0-|G-X--Q-vvv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 78, tick tcWSW1 (cycle: 1, phase: W, minor tick: SetDataRodsTo1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWSW1, tProperties.rodType=rtDW, tProperties.fwdOrBwd=Fwd
(DataRod *)(0x1115750)->AttemptToMove(): fwdOrBwd=Fwd
(DataRod *)(0x1115750)->{ lockState=lsUnlk,  dataState=dsRset, (Item *)(0x1115750)->{ rodType=rtDW,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { Slot(1,18,16), DSW0(1,18,17), DSW0(1,18,18), DSW0(1,18,19), Slot(1,18,20), Slot(2,18,6), DHW0(2,18,7), DBW0(2,18,8), DBW0(2,18,9), DPW0(2,18,10), DBW0(2,18,11), DPW0(2,18,12), DBW0(2,18,13), DBW0(2,18,14), DPW0(2,18,15), DBW0(2,18,16), DPW0(2,18,17), DPW0(2,18,18), DPW0(2,18,19), Slot(2,18,20), Slot(3,18,8), Slot(3,18,9), DGW0(3,18,10), Slot(3,18,11), DJS1(3,18,12), Slot(3,18,13), Slot(3,18,14), DQW0(3,18,15), Slot(3,18,16) } } }
(LockRod *)(0x1115750) fBlked by DJS1(3,18,12)
             111111111122222
   0123456789012345678901234
 0 ......v...........^......  0
 1 ......|...........|......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..v...... 17
18 ......|0-|G-X--Q-vvv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........^...... 26
27 ...... ........... ...... 27
             111111111122222
   0123456789012345678901234
Clock: 79, tick tcWLWL (cycle: 1, phase: W, minor tick: RelockDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcWLWL, tProperties.rodType=rtLN, tProperties.fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->AttemptToMove(): fwdOrBwd=Bwd
(LockRod *)(0x11113d0)->{  lockState=lsLckd, (Item *)(0x11113d0)->{ rodType=rtLN,  fBlkState=fbUnbk,  rBlkState=rbBlkd, { LHNU(0,0,18), LBNU(0,1,18), LBNU(0,2,18), LBNU(0,3,18), LBNU(0,4,18), LBNU(0,5,18), LBNU(0,6,18), LBNU(0,7,18), LBNU(0,8,18), LBNU(0,9,18), LBNU(0,10,18), LBNU(0,11,18), LBNU(0,12,18), LBNU(0,13,18), LBNU(0,14,18), LBNU(0,15,18), LBNU(0,16,18), LPNU(0,17,18), LBNU(0,18,18), LBNU(0,19,18), LBNU(0,20,18), LBNU(0,21,18), LBNU(0,22,18), LBNU(0,23,18), LBNU(0,24,18), LBNU(0,25,18), LTNU(0,26,18), Slot(0,27,18), LKNU(1,17,18), DSW0(1,18,18) } } }
(LockRod *)(0x11113d0) fBlked at LKNU(1,17,18) by Wall(1,16,18)
(LockRod *)(0x11113d0)->AttemptToMove(): At LHNU(0,0,18), { tcWLWL, Wall, Wall, Wall, LHNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LHNU, area={ Wall, LBNU, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,1,18), { tcWLWL, LHNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LHNU, Wall } } = LHNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,2,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,3,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,4,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,5,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,6,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,7,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,8,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,9,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,10,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,11,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,12,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,13,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,14,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,15,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,16,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LPNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LPNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LPNU(0,17,18), { tcWLWL, LBNU, LKNU, Wall, LPNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LPNU, area={ Wall, LBNU, Wall, Wall, LBNU, LKNU } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,18,18), { tcWLWL, LPNU, DSW0, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LPNU, DSW0 } } = LPNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,19,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,20,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,21,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,22,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,23,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,24,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LBNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LBNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LBNU(0,25,18), { tcWLWL, LBNU, Wall, Wall, LBNU, Wall, Wall, LTNU }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LBNU, area={ Wall, LTNU, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LTNU(0,26,18), { tcWLWL, LBNU, Wall, Wall, LTNU, Wall, Wall, Slot }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LTNU, area={ Wall, Slot, Wall, Wall, LBNU, Wall } } = LBNL
(LockRod *)(0x11113d0)->AttemptToMove(): At Slot(0,27,18), { tcWLWL, LTNU, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=Slot, area={ Wall, Wall, Wall, Wall, LTNU, Wall } } = LTNL
(LockRod *)(0x11113d0)->AttemptToMove(): At LKNU(1,17,18), { tcWLWL, Wall, Wall, Wall, LKNU, Wall, LPNU, DSW0 }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=LKNU, area={ Wall, DSW0, LPNU, Wall, Wall, Wall } } = Slot
(LockRod *)(0x11113d0)->AttemptToMove(): At DSW0(1,18,18), { tcWLWL, LKNU, DPW0, DSW0, DSW0, DSW0, LBNU, Wall }
(LockRod *)(0x11113d0)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcWLWL, self=DSW0, area={ DSW0, Wall, LBNU, DSW0, LKNU, DPW0 } } = DKS0
             111111111122222
   0123456789012345678901234
 0 ......v........... ......  0
 1 ......|...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^X^---G|--X-0|......  9
10 ......|.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----X^^---|--QG-1...... 12
13 ......|.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  X^^|Q-|G-|--------1 15
16 ......|..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......v...........|...... 26
27 ...... ...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 80, tick tcNUEL (cycle: 1, phase: N, minor tick: UnlockNextDataRods)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNUEL, tProperties.rodType=rtLS, tProperties.fwdOrBwd=Fwd
(LockRod *)(0x1110240)->AttemptToMove(): fwdOrBwd=Fwd
(LockRod *)(0x1110240)->{  lockState=lsUnlk, (Item *)(0x1110240)->{ rodType=rtLS,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { LTSL(0,0,6), LBSL(0,1,6), LBSL(0,2,6), LBSL(0,3,6), LBSL(0,4,6), LBSL(0,5,6), LBSL(0,6,6), LBSL(0,7,6), LBSL(0,8,6), LPSL(0,9,6), LBSL(0,10,6), LBSL(0,11,6), LPSL(0,12,6), LBSL(0,13,6), LBSL(0,14,6), LPSL(0,15,6), LBSL(0,16,6), LBSL(0,17,6), LBSL(0,18,6), LBSL(0,19,6), LBSL(0,20,6), LBSL(0,21,6), LBSL(0,22,6), LBSL(0,23,6), LBSL(0,24,6), LBSL(0,25,6), LHSL(0,26,6), Slot(0,27,6), DKE0(1,9,6), Slot(1,10,6), DKE1(1,12,6), Slot(1,13,6), DKE1(1,15,6), Slot(1,16,6) } } }
(LockRod *)(0x1110240) rBlked by DKE0(1,9,6)
(LockRod *)(0x1110240) rBlked by DKE1(1,12,6)
(LockRod *)(0x1110240) rBlked by DKE1(1,15,6)
(LockRod *)(0x1110240)->AttemptToMove(): At LTSL(0,0,6), { tcNUEL, Wall, Wall, Wall, LTSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LTSL, area={ Wall, LBSL, Wall, Wall, Wall, Wall } } = Slot
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,1,6), { tcNUEL, LTSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LTSL, Wall } } = LTSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,2,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,3,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,4,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,5,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,6,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,7,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,8,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,9,6), { tcNUEL, LBSL, DKE0, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE0 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,10,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,11,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,12,6), { tcNUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE1 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,13,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,14,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LPSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LPSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LPSL(0,15,6), { tcNUEL, LBSL, DKE1, Wall, LPSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LPSL, area={ Wall, LBSL, Wall, Wall, LBSL, DKE1 } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,16,6), { tcNUEL, LPSL, Slot, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LPSL, Slot } } = LPSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,17,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,18,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,19,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,20,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,21,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,22,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,23,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,24,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LBSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LBSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LBSL(0,25,6), { tcNUEL, LBSL, Wall, Wall, LBSL, Wall, Wall, LHSL }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LBSL, area={ Wall, LHSL, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At LHSL(0,26,6), { tcNUEL, LBSL, Wall, Wall, LHSL, Wall, Wall, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=LHSL, area={ Wall, Slot, Wall, Wall, LBSL, Wall } } = LBSU
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(0,27,6), { tcNUEL, LHSL, Wall, Wall, Slot, Wall, Wall, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, Wall, Wall, LHSL, Wall } } = LHSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE0(1,9,6), { tcNUEL, Wall, DPE0, DSE0, DKE0, DSE0, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE0, area={ DSE0, Slot, LPSL, DSE0, Wall, DPE0 } } = DSE0
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,10,6), { tcNUEL, DKE0, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE0, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE1(1,12,6), { tcNUEL, Wall, DPE1, Slot, DKE1, DSE1, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE1, area={ DSE1, Slot, LPSL, Slot, Wall, DPE1 } } = DSE1
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,13,6), { tcNUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE1, Wall } } = LKSU
(LockRod *)(0x1110240)->AttemptToMove(): At DKE1(1,15,6), { tcNUEL, Wall, Slot, Slot, DKE1, DSE1, LPSL, Slot }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=DKE1, area={ DSE1, Slot, LPSL, Slot, Wall, Slot } } = DSE1
(LockRod *)(0x1110240)->AttemptToMove(): At Slot(1,16,6), { tcNUEL, DKE1, Wall, Wall, Slot, Wall, LBSL, Wall }
(LockRod *)(0x1110240)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNUEL, self=Slot, area={ Wall, Wall, LBSL, Wall, DKE1, Wall } } = LKSU
             111111111122222
   0123456789012345678901234
 0 ...... ........... ......  0
 1 ......v...........^......  1
 2 ......|...........|......  2
 3 ......|...........|......  3
 4 ......|..... .. ..|......  4
 5 ......|..... ..>..|......  5
 6  <----------X--X--------<  6
 7 ......|.....>..>..|......  7
 8 ......|.....>..|..|......  8
 9 0----^^^---G|--X-0|......  9
10 ......^.....Q..|..|...... 10
11 ......|.....|..|..|...... 11
12 1-----^^^---|--QG-1...... 12
13 ......^.. ..|..|..|...... 13
14 ......|..^..|..|..|...... 14
15 ....  ^^^|Q-|G-|--------1 15
16 ......^..G..Q..|..|...... 16
17 ......|..|..|..G..|...... 17
18 ......|0-|G-X--Q-vXv .... 18
19 ......|..Q..|..|..|...... 19
20 ......|..|..|..0..|...... 20
21 >--------X--1---------->  21
22 ......|..<........|...... 22
23 ......|..<........|...... 23
24 ......|...........|...... 24
25 ......|...........|...... 25
26 ......|...........|...... 26
27 ......v...........^...... 27
             111111111122222
   0123456789012345678901234
Clock: 81, tick tcNRE1 (cycle: 1, phase: N, minor tick: ResetNextDataRodsFrom1)

(Volume *)(0x7fffea0d24a0)->ProceedOneTick(): tick=tcNRE1, tProperties.rodType=rtDE, tProperties.fwdOrBwd=Bwd
(DataRod *)(0x1112360)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1112360)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1112360)->{ rodType=rtDE,  fBlkState=fbBlkd,  rBlkState=rbUnbk, { Slot(1,9,4), DSE0(1,9,5), DSE0(1,9,6), DSE0(1,9,7), Slot(1,9,8), DIE0(2,9,0), DBE0(2,9,1), DBE0(2,9,2), DBE0(2,9,3), DBE0(2,9,4), DPE0(2,9,5), DPE0(2,9,6), DPE0(2,9,7), DBE0(2,9,8), DBE0(2,9,9), DBE0(2,9,10), DPE0(2,9,11), DBE0(2,9,12), DBE0(2,9,13), DBE0(2,9,14), DPE0(2,9,15), DBE0(2,9,16), DHE0(2,9,17), Slot(2,9,18), Slot(3,9,10), DGE0(3,9,11), Slot(3,9,12), Slot(3,9,14), DJE0(3,9,15), Slot(3,9,16) } } }
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,4), { tcNRE1, Wall, DBE0, Wall, Slot, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DSE0, Wall, Wall, Wall, Wall, DBE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,5), { tcNRE1, Wall, DPE0, Slot, DSE0, DSE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, Wall, Wall, Slot, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,6), { tcNRE1, Wall, DPE0, DSE0, DSE0, DSE0, LBSU, LKSU }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ DSE0, LKSU, LBSU, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At DSE0(1,9,7), { tcNRE1, Wall, DPE0, DSE0, DSE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DSE0, area={ Slot, Wall, Wall, DSE0, Wall, DPE0 } } = DSE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(1,9,8), { tcNRE1, Wall, DBE0, DSE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DSE0, Wall, DBE0 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DIE0(2,9,0), { tcNRE1, Wall, Wall, Wall, DIE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DIE0, area={ DBE0, Wall, Wall, Wall, Wall, Wall } } = DIE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,1), { tcNRE1, Wall, Wall, DIE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DIE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,2), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,3), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,4), { tcNRE1, Wall, Wall, DBE0, DBE0, DPE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Slot, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,5), { tcNRE1, Wall, Wall, DBE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DBE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,6), { tcNRE1, Wall, Wall, DPE0, DPE0, DPE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DPE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,7), { tcNRE1, Wall, Wall, DPE0, DPE0, DBE0, DSE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, DSE0, DPE0, Wall, Wall } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,8), { tcNRE1, Wall, Wall, DPE0, DBE0, DBE0, Slot, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Slot, DPE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,9), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,10), { tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,11), { tcNRE1, Wall, DGE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DGE0 } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,12), { tcNRE1, Wall, Slot, DPE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DPE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,13), { tcNRE1, Wall, Wall, DBE0, DBE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DBE0, Wall, Wall, DBE0, Wall, Wall } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,14), { tcNRE1, Wall, Slot, DBE0, DBE0, DPE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DPE0, Wall, Wall, DBE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DPE0(2,9,15), { tcNRE1, Wall, DJE0, DBE0, DPE0, DBE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DPE0, area={ DBE0, Wall, Wall, DBE0, Wall, DJE0 } } = DPE0
(DataRod *)(0x1112360)->AttemptToMove(): At DBE0(2,9,16), { tcNRE1, Wall, Slot, DPE0, DBE0, DHE0, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DBE0, area={ DHE0, Wall, Wall, DPE0, Wall, Slot } } = DBE0
(DataRod *)(0x1112360)->AttemptToMove(): At DHE0(2,9,17), { tcNRE1, Wall, Wall, DBE0, DHE0, Slot, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DHE0, area={ Slot, Wall, Wall, DBE0, Wall, Wall } } = DHE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(2,9,18), { tcNRE1, Wall, Wall, DHE0, Slot, Wall, Wall, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, Wall, DHE0, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,10), { tcNRE1, Wall, Wall, Wall, Slot, DGE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DGE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DGE0(3,9,11), { tcNRE1, Wall, Wall, Slot, DGE0, Slot, DPE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DGE0, area={ Slot, Wall, DPE0, Slot, Wall, Wall } } = DGE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,12), { tcNRE1, Slot, DBS1, DGE0, Slot, Wall, DBE0, DQS1 }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, DQS1, DBE0, DGE0, Slot, DBS1 } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,14), { tcNRE1, Wall, Wall, Wall, Slot, DJE0, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ DJE0, Wall, DBE0, Wall, Wall, Wall } } = Slot
(DataRod *)(0x1112360)->AttemptToMove(): At DJE0(3,9,15), { tcNRE1, Slot, DPS0, Slot, DJE0, Slot, DPE0, Slot }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=DJE0, area={ Slot, Slot, DPE0, Slot, Slot, DPS0 } } = DJE0
(DataRod *)(0x1112360)->AttemptToMove(): At Slot(3,9,16), { tcNRE1, Wall, Wall, DJE0, Slot, Wall, DBE0, Wall }
(DataRod *)(0x1112360)->AttemptToMove(): Applying rule (Scenario *)(0x7fffea0d22d0)->{ tick=tcNRE1, self=Slot, area={ Wall, Wall, DBE0, DJE0, Wall, Wall } } = Slot
(DataRod *)(0x1113560)->AttemptToMove(): fwdOrBwd=Bwd
(DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsSet0, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbUnbk,  rBlkState=rbUnbk, { Slot(1,12,4), Slot(1,12,5), DSE1(1,12,6), DSE1(1,12,7), DSE1(1,12,8), DIE1(2,12,0), DBE1(2,12,1), DBE1(2,12,2), DBE1(2,12,3), DBE1(2,12,4), DBE1(2,12,5), DPE1(2,12,6), DPE1(2,12,7), DPE1(2,12,8), DBE1(2,12,9), DBE1(2,12,10), DBE1(2,12,11), DBE1(2,12,12), DBE1(2,12,13), DBE1(2,12,14), DBE1(2,12,15), DPE1(2,12,16), DBE1(2,12,17), DHE1(2,12,18), Slot(3,12,14), DQS0(3,12,15), DGE1(3,12,16) } } }
(DataRod *)(0x1113560) fBlked at DSE1(1,12,8) by Wall(1,12,9)
(DataRod *)(0x1113560) fBlked at DHE1(2,12,18) by Wall(2,12,19)
(DataRod *)(0x1113560) fBlked at DGE1(3,12,16) by Wall(3,12,17)
(DataRod *)(0x1113560) rBlked at DGE1(3,12,16) by DQS0(3,12,15)
(DataRod *)(0x1113560)->AttemptToMove(): Unable to move Bwd during tcNRE1: (DataRod *)(0x1113560)->{ lockState=lsUnlk,  dataState=dsSet1, (Item *)(0x1113560)->{ rodType=rtDE,  fBlkState=fbBlkd,  rBlkState=rbBlkd, { Slot(1,12,4), Slot(1,12,5), DSE1(1,12,6), DSE1(1,12,7), DSE1(1,12,8), DIE1(2,12,0), DBE1(2,12,1), DBE1(2,12,2), DBE1(2,12,3), DBE1(2,12,4), DBE1(2,12,5), DPE1(2,12,6), DPE1(2,12,7), DPE1(2,12,8), DBE1(2,12,9), DBE1(2,12,10), DBE1(2,12,11), DBE1(2,12,12), DBE1(2,12,13), DBE1(2,12,14), DBE1(2,12,15), DPE1(2,12,16), DBE1(2,12,17), DHE1(2,12,18), Slot(3,12,14), DQS0(3,12,15), DGE1(3,12,16) } } }
